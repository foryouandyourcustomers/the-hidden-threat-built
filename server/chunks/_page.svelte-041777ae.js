import { c as create_ssr_component, a as subscribe, e as escape, v as validate_component, o as onDestroy, h as get_store_value, g as each, i as add_styles, f as add_attribute, j as merge_ssr_styles, k as createEventDispatcher, m as missing_component, b as spread, d as escape_object, l as compute_rest_props, n as escape_attribute_value, p as noop, q as compute_slots } from './ssr-ea380d77.js';
import { r as readable, w as writable, d as derived } from './index2-863c54a1.js';
import { c as createMachine, b as createActor, a as assign, n as not, G as GameState, d as and, s as sharedGuards, R as ROW_COUNT, C as COLUMN_COUNT, N as NEW_GLOBAL_ATTACK_ROUNDS, e as ATTACKER_REVEAL_ROUNDS, T as TOTAL_ROUNDS } from './guards-104127fa.js';
import { u as useSelector, g as getCurrentUser, B as Board } from './Board-d43dd77e.js';
import { s as setGameContext, g as getGameContext } from './game-context-19a9f73b.js';
import { i as require_root, E as require_baseGetTag, t as requireIsObjectLike, d as requireIsObject, B as envBool, z as isEqual$1, g as getSharedGameContext, D as getGameSummary, C as getGameSummaryFilename, A as findStageAt, F as getStage, H as BOARD_ITEMS, I as BOARD_SUPPLY_CHAINS, o as objectEntries } from './index3-7678c32b.js';
import { a as userIsAdmin, g as getCharacter, i as isDefenseCharacter, j as gameEventRequiresReaction, k as getPlayer, l as guardForGameEventType, C as CHARACTERS, A as ABILITIES, c as isDefenderId, m as isActionEventOf, e as getPlayerSide, n as getUser } from './user-e3413fb3.js';
import { c as commonjsGlobal, g as getDefaultExportFromCjs } from './_commonjsHelpers-24198af3.js';
import { H as Heading } from './Heading-86ff148c.js';
import { T as Tooltip, P as Paragraph, A as Actions$1, B as Button } from './Paragraph-a8f64156.js';
import { F as Face } from './Face-2e6c32a1.js';
import { I as Item } from './Item-c17d5747.js';
import { b as isItemIdOfSide, g as getItem, I as ITEMS, a as isAttackItemId, i as isDefenseItemId } from './items-4883f019.js';
import { P as Polygon } from './Polygon-2366dc2b.js';
import './FooterNav-16dc3408.js';

var lodash = {exports: {}};

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash.exports;

var hasRequiredLodash;

function requireLodash () {
	if (hasRequiredLodash) return lodash.exports;
	hasRequiredLodash = 1;
	(function (module, exports) {
(function() {

		  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
		  var undefined$1;

		  /** Used as the semantic version number. */
		  var VERSION = '4.17.21';

		  /** Used as the size to enable large array optimizations. */
		  var LARGE_ARRAY_SIZE = 200;

		  /** Error message constants. */
		  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
		      FUNC_ERROR_TEXT = 'Expected a function',
		      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

		  /** Used to stand-in for `undefined` hash values. */
		  var HASH_UNDEFINED = '__lodash_hash_undefined__';

		  /** Used as the maximum memoize cache size. */
		  var MAX_MEMOIZE_SIZE = 500;

		  /** Used as the internal argument placeholder. */
		  var PLACEHOLDER = '__lodash_placeholder__';

		  /** Used to compose bitmasks for cloning. */
		  var CLONE_DEEP_FLAG = 1,
		      CLONE_FLAT_FLAG = 2,
		      CLONE_SYMBOLS_FLAG = 4;

		  /** Used to compose bitmasks for value comparisons. */
		  var COMPARE_PARTIAL_FLAG = 1,
		      COMPARE_UNORDERED_FLAG = 2;

		  /** Used to compose bitmasks for function metadata. */
		  var WRAP_BIND_FLAG = 1,
		      WRAP_BIND_KEY_FLAG = 2,
		      WRAP_CURRY_BOUND_FLAG = 4,
		      WRAP_CURRY_FLAG = 8,
		      WRAP_CURRY_RIGHT_FLAG = 16,
		      WRAP_PARTIAL_FLAG = 32,
		      WRAP_PARTIAL_RIGHT_FLAG = 64,
		      WRAP_ARY_FLAG = 128,
		      WRAP_REARG_FLAG = 256,
		      WRAP_FLIP_FLAG = 512;

		  /** Used as default options for `_.truncate`. */
		  var DEFAULT_TRUNC_LENGTH = 30,
		      DEFAULT_TRUNC_OMISSION = '...';

		  /** Used to detect hot functions by number of calls within a span of milliseconds. */
		  var HOT_COUNT = 800,
		      HOT_SPAN = 16;

		  /** Used to indicate the type of lazy iteratees. */
		  var LAZY_FILTER_FLAG = 1,
		      LAZY_MAP_FLAG = 2,
		      LAZY_WHILE_FLAG = 3;

		  /** Used as references for various `Number` constants. */
		  var INFINITY = 1 / 0,
		      MAX_SAFE_INTEGER = 9007199254740991,
		      MAX_INTEGER = 1.7976931348623157e+308,
		      NAN = 0 / 0;

		  /** Used as references for the maximum length and index of an array. */
		  var MAX_ARRAY_LENGTH = 4294967295,
		      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
		      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

		  /** Used to associate wrap methods with their bit flags. */
		  var wrapFlags = [
		    ['ary', WRAP_ARY_FLAG],
		    ['bind', WRAP_BIND_FLAG],
		    ['bindKey', WRAP_BIND_KEY_FLAG],
		    ['curry', WRAP_CURRY_FLAG],
		    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
		    ['flip', WRAP_FLIP_FLAG],
		    ['partial', WRAP_PARTIAL_FLAG],
		    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
		    ['rearg', WRAP_REARG_FLAG]
		  ];

		  /** `Object#toString` result references. */
		  var argsTag = '[object Arguments]',
		      arrayTag = '[object Array]',
		      asyncTag = '[object AsyncFunction]',
		      boolTag = '[object Boolean]',
		      dateTag = '[object Date]',
		      domExcTag = '[object DOMException]',
		      errorTag = '[object Error]',
		      funcTag = '[object Function]',
		      genTag = '[object GeneratorFunction]',
		      mapTag = '[object Map]',
		      numberTag = '[object Number]',
		      nullTag = '[object Null]',
		      objectTag = '[object Object]',
		      promiseTag = '[object Promise]',
		      proxyTag = '[object Proxy]',
		      regexpTag = '[object RegExp]',
		      setTag = '[object Set]',
		      stringTag = '[object String]',
		      symbolTag = '[object Symbol]',
		      undefinedTag = '[object Undefined]',
		      weakMapTag = '[object WeakMap]',
		      weakSetTag = '[object WeakSet]';

		  var arrayBufferTag = '[object ArrayBuffer]',
		      dataViewTag = '[object DataView]',
		      float32Tag = '[object Float32Array]',
		      float64Tag = '[object Float64Array]',
		      int8Tag = '[object Int8Array]',
		      int16Tag = '[object Int16Array]',
		      int32Tag = '[object Int32Array]',
		      uint8Tag = '[object Uint8Array]',
		      uint8ClampedTag = '[object Uint8ClampedArray]',
		      uint16Tag = '[object Uint16Array]',
		      uint32Tag = '[object Uint32Array]';

		  /** Used to match empty string literals in compiled template source. */
		  var reEmptyStringLeading = /\b__p \+= '';/g,
		      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
		      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

		  /** Used to match HTML entities and HTML characters. */
		  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
		      reUnescapedHtml = /[&<>"']/g,
		      reHasEscapedHtml = RegExp(reEscapedHtml.source),
		      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

		  /** Used to match template delimiters. */
		  var reEscape = /<%-([\s\S]+?)%>/g,
		      reEvaluate = /<%([\s\S]+?)%>/g,
		      reInterpolate = /<%=([\s\S]+?)%>/g;

		  /** Used to match property names within property paths. */
		  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		      reIsPlainProp = /^\w*$/,
		      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		  /**
		   * Used to match `RegExp`
		   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		   */
		  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
		      reHasRegExpChar = RegExp(reRegExpChar.source);

		  /** Used to match leading whitespace. */
		  var reTrimStart = /^\s+/;

		  /** Used to match a single whitespace character. */
		  var reWhitespace = /\s/;

		  /** Used to match wrap detail comments. */
		  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
		      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
		      reSplitDetails = /,? & /;

		  /** Used to match words composed of alphanumeric characters. */
		  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

		  /**
		   * Used to validate the `validate` option in `_.template` variable.
		   *
		   * Forbids characters which could potentially change the meaning of the function argument definition:
		   * - "()," (modification of function parameters)
		   * - "=" (default value)
		   * - "[]{}" (destructuring of function parameters)
		   * - "/" (beginning of a comment)
		   * - whitespace
		   */
		  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

		  /** Used to match backslashes in property paths. */
		  var reEscapeChar = /\\(\\)?/g;

		  /**
		   * Used to match
		   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
		   */
		  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

		  /** Used to match `RegExp` flags from their coerced string values. */
		  var reFlags = /\w*$/;

		  /** Used to detect bad signed hexadecimal string values. */
		  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

		  /** Used to detect binary string values. */
		  var reIsBinary = /^0b[01]+$/i;

		  /** Used to detect host constructors (Safari). */
		  var reIsHostCtor = /^\[object .+?Constructor\]$/;

		  /** Used to detect octal string values. */
		  var reIsOctal = /^0o[0-7]+$/i;

		  /** Used to detect unsigned integer values. */
		  var reIsUint = /^(?:0|[1-9]\d*)$/;

		  /** Used to match Latin Unicode letters (excluding mathematical operators). */
		  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

		  /** Used to ensure capturing order of template delimiters. */
		  var reNoMatch = /($^)/;

		  /** Used to match unescaped characters in compiled string literals. */
		  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

		  /** Used to compose unicode character classes. */
		  var rsAstralRange = '\\ud800-\\udfff',
		      rsComboMarksRange = '\\u0300-\\u036f',
		      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
		      rsComboSymbolsRange = '\\u20d0-\\u20ff',
		      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
		      rsDingbatRange = '\\u2700-\\u27bf',
		      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
		      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
		      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
		      rsPunctuationRange = '\\u2000-\\u206f',
		      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
		      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
		      rsVarRange = '\\ufe0e\\ufe0f',
		      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

		  /** Used to compose unicode capture groups. */
		  var rsApos = "['\u2019]",
		      rsAstral = '[' + rsAstralRange + ']',
		      rsBreak = '[' + rsBreakRange + ']',
		      rsCombo = '[' + rsComboRange + ']',
		      rsDigits = '\\d+',
		      rsDingbat = '[' + rsDingbatRange + ']',
		      rsLower = '[' + rsLowerRange + ']',
		      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
		      rsFitz = '\\ud83c[\\udffb-\\udfff]',
		      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
		      rsNonAstral = '[^' + rsAstralRange + ']',
		      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
		      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
		      rsUpper = '[' + rsUpperRange + ']',
		      rsZWJ = '\\u200d';

		  /** Used to compose unicode regexes. */
		  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
		      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
		      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
		      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
		      reOptMod = rsModifier + '?',
		      rsOptVar = '[' + rsVarRange + ']?',
		      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
		      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
		      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
		      rsSeq = rsOptVar + reOptMod + rsOptJoin,
		      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
		      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

		  /** Used to match apostrophes. */
		  var reApos = RegExp(rsApos, 'g');

		  /**
		   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
		   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
		   */
		  var reComboMark = RegExp(rsCombo, 'g');

		  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
		  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

		  /** Used to match complex or compound words. */
		  var reUnicodeWord = RegExp([
		    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
		    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
		    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
		    rsUpper + '+' + rsOptContrUpper,
		    rsOrdUpper,
		    rsOrdLower,
		    rsDigits,
		    rsEmoji
		  ].join('|'), 'g');

		  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
		  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

		  /** Used to detect strings that need a more robust regexp to match words. */
		  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

		  /** Used to assign default `context` object properties. */
		  var contextProps = [
		    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
		    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
		    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
		    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
		    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
		  ];

		  /** Used to make template sourceURLs easier to identify. */
		  var templateCounter = -1;

		  /** Used to identify `toStringTag` values of typed arrays. */
		  var typedArrayTags = {};
		  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		  typedArrayTags[uint32Tag] = true;
		  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		  typedArrayTags[setTag] = typedArrayTags[stringTag] =
		  typedArrayTags[weakMapTag] = false;

		  /** Used to identify `toStringTag` values supported by `_.clone`. */
		  var cloneableTags = {};
		  cloneableTags[argsTag] = cloneableTags[arrayTag] =
		  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
		  cloneableTags[boolTag] = cloneableTags[dateTag] =
		  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
		  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
		  cloneableTags[int32Tag] = cloneableTags[mapTag] =
		  cloneableTags[numberTag] = cloneableTags[objectTag] =
		  cloneableTags[regexpTag] = cloneableTags[setTag] =
		  cloneableTags[stringTag] = cloneableTags[symbolTag] =
		  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
		  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		  cloneableTags[errorTag] = cloneableTags[funcTag] =
		  cloneableTags[weakMapTag] = false;

		  /** Used to map Latin Unicode letters to basic Latin letters. */
		  var deburredLetters = {
		    // Latin-1 Supplement block.
		    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
		    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
		    '\xc7': 'C',  '\xe7': 'c',
		    '\xd0': 'D',  '\xf0': 'd',
		    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
		    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
		    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
		    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
		    '\xd1': 'N',  '\xf1': 'n',
		    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
		    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
		    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
		    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
		    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
		    '\xc6': 'Ae', '\xe6': 'ae',
		    '\xde': 'Th', '\xfe': 'th',
		    '\xdf': 'ss',
		    // Latin Extended-A block.
		    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
		    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
		    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
		    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
		    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
		    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
		    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
		    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
		    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
		    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
		    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
		    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
		    '\u0134': 'J',  '\u0135': 'j',
		    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
		    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
		    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
		    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
		    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
		    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
		    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
		    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
		    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
		    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
		    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
		    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
		    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
		    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
		    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
		    '\u0174': 'W',  '\u0175': 'w',
		    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
		    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
		    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
		    '\u0132': 'IJ', '\u0133': 'ij',
		    '\u0152': 'Oe', '\u0153': 'oe',
		    '\u0149': "'n", '\u017f': 's'
		  };

		  /** Used to map characters to HTML entities. */
		  var htmlEscapes = {
		    '&': '&amp;',
		    '<': '&lt;',
		    '>': '&gt;',
		    '"': '&quot;',
		    "'": '&#39;'
		  };

		  /** Used to map HTML entities to characters. */
		  var htmlUnescapes = {
		    '&amp;': '&',
		    '&lt;': '<',
		    '&gt;': '>',
		    '&quot;': '"',
		    '&#39;': "'"
		  };

		  /** Used to escape characters for inclusion in compiled string literals. */
		  var stringEscapes = {
		    '\\': '\\',
		    "'": "'",
		    '\n': 'n',
		    '\r': 'r',
		    '\u2028': 'u2028',
		    '\u2029': 'u2029'
		  };

		  /** Built-in method references without a dependency on `root`. */
		  var freeParseFloat = parseFloat,
		      freeParseInt = parseInt;

		  /** Detect free variable `global` from Node.js. */
		  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		  /** Detect free variable `self`. */
		  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		  /** Used as a reference to the global object. */
		  var root = freeGlobal || freeSelf || Function('return this')();

		  /** Detect free variable `exports`. */
		  var freeExports = exports && !exports.nodeType && exports;

		  /** Detect free variable `module`. */
		  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		  /** Detect the popular CommonJS extension `module.exports`. */
		  var moduleExports = freeModule && freeModule.exports === freeExports;

		  /** Detect free variable `process` from Node.js. */
		  var freeProcess = moduleExports && freeGlobal.process;

		  /** Used to access faster Node.js helpers. */
		  var nodeUtil = (function() {
		    try {
		      // Use `util.types` for Node.js 10+.
		      var types = freeModule && freeModule.require && freeModule.require('util').types;

		      if (types) {
		        return types;
		      }

		      // Legacy `process.binding('util')` for Node.js < 10.
		      return freeProcess && freeProcess.binding && freeProcess.binding('util');
		    } catch (e) {}
		  }());

		  /* Node.js helper references. */
		  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
		      nodeIsDate = nodeUtil && nodeUtil.isDate,
		      nodeIsMap = nodeUtil && nodeUtil.isMap,
		      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
		      nodeIsSet = nodeUtil && nodeUtil.isSet,
		      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		  /*--------------------------------------------------------------------------*/

		  /**
		   * A faster alternative to `Function#apply`, this function invokes `func`
		   * with the `this` binding of `thisArg` and the arguments of `args`.
		   *
		   * @private
		   * @param {Function} func The function to invoke.
		   * @param {*} thisArg The `this` binding of `func`.
		   * @param {Array} args The arguments to invoke `func` with.
		   * @returns {*} Returns the result of `func`.
		   */
		  function apply(func, thisArg, args) {
		    switch (args.length) {
		      case 0: return func.call(thisArg);
		      case 1: return func.call(thisArg, args[0]);
		      case 2: return func.call(thisArg, args[0], args[1]);
		      case 3: return func.call(thisArg, args[0], args[1], args[2]);
		    }
		    return func.apply(thisArg, args);
		  }

		  /**
		   * A specialized version of `baseAggregator` for arrays.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} setter The function to set `accumulator` values.
		   * @param {Function} iteratee The iteratee to transform keys.
		   * @param {Object} accumulator The initial aggregated object.
		   * @returns {Function} Returns `accumulator`.
		   */
		  function arrayAggregator(array, setter, iteratee, accumulator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      var value = array[index];
		      setter(accumulator, value, iteratee(value), array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.forEach` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEach(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (iteratee(array[index], index, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.forEachRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayEachRight(array, iteratee) {
		    var length = array == null ? 0 : array.length;

		    while (length--) {
		      if (iteratee(array[length], length, array) === false) {
		        break;
		      }
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.every` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if all elements pass the predicate check,
		   *  else `false`.
		   */
		  function arrayEvery(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (!predicate(array[index], index, array)) {
		        return false;
		      }
		    }
		    return true;
		  }

		  /**
		   * A specialized version of `_.filter` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {Array} Returns the new filtered array.
		   */
		  function arrayFilter(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (predicate(value, index, array)) {
		        result[resIndex++] = value;
		      }
		    }
		    return result;
		  }

		  /**
		   * A specialized version of `_.includes` for arrays without support for
		   * specifying an index to search from.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludes(array, value) {
		    var length = array == null ? 0 : array.length;
		    return !!length && baseIndexOf(array, value, 0) > -1;
		  }

		  /**
		   * This function is like `arrayIncludes` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} [array] The array to inspect.
		   * @param {*} target The value to search for.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {boolean} Returns `true` if `target` is found, else `false`.
		   */
		  function arrayIncludesWith(array, value, comparator) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (comparator(value, array[index])) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * A specialized version of `_.map` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the new mapped array.
		   */
		  function arrayMap(array, iteratee) {
		    var index = -1,
		        length = array == null ? 0 : array.length,
		        result = Array(length);

		    while (++index < length) {
		      result[index] = iteratee(array[index], index, array);
		    }
		    return result;
		  }

		  /**
		   * Appends the elements of `values` to `array`.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {Array} values The values to append.
		   * @returns {Array} Returns `array`.
		   */
		  function arrayPush(array, values) {
		    var index = -1,
		        length = values.length,
		        offset = array.length;

		    while (++index < length) {
		      array[offset + index] = values[index];
		    }
		    return array;
		  }

		  /**
		   * A specialized version of `_.reduce` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the first element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduce(array, iteratee, accumulator, initAccum) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    if (initAccum && length) {
		      accumulator = array[++index];
		    }
		    while (++index < length) {
		      accumulator = iteratee(accumulator, array[index], index, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.reduceRight` for arrays without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} [accumulator] The initial value.
		   * @param {boolean} [initAccum] Specify using the last element of `array` as
		   *  the initial value.
		   * @returns {*} Returns the accumulated value.
		   */
		  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
		    var length = array == null ? 0 : array.length;
		    if (initAccum && length) {
		      accumulator = array[--length];
		    }
		    while (length--) {
		      accumulator = iteratee(accumulator, array[length], length, array);
		    }
		    return accumulator;
		  }

		  /**
		   * A specialized version of `_.some` for arrays without support for iteratee
		   * shorthands.
		   *
		   * @private
		   * @param {Array} [array] The array to iterate over.
		   * @param {Function} predicate The function invoked per iteration.
		   * @returns {boolean} Returns `true` if any element passes the predicate check,
		   *  else `false`.
		   */
		  function arraySome(array, predicate) {
		    var index = -1,
		        length = array == null ? 0 : array.length;

		    while (++index < length) {
		      if (predicate(array[index], index, array)) {
		        return true;
		      }
		    }
		    return false;
		  }

		  /**
		   * Gets the size of an ASCII `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  var asciiSize = baseProperty('length');

		  /**
		   * Converts an ASCII `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function asciiToArray(string) {
		    return string.split('');
		  }

		  /**
		   * Splits an ASCII `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function asciiWords(string) {
		    return string.match(reAsciiWord) || [];
		  }

		  /**
		   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
		   * without support for iteratee shorthands, which iterates over `collection`
		   * using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the found element or its key, else `undefined`.
		   */
		  function baseFindKey(collection, predicate, eachFunc) {
		    var result;
		    eachFunc(collection, function(value, key, collection) {
		      if (predicate(value, key, collection)) {
		        result = key;
		        return false;
		      }
		    });
		    return result;
		  }

		  /**
		   * The base implementation of `_.findIndex` and `_.findLastIndex` without
		   * support for iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {Function} predicate The function invoked per iteration.
		   * @param {number} fromIndex The index to search from.
		   * @param {boolean} [fromRight] Specify iterating from right to left.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseFindIndex(array, predicate, fromIndex, fromRight) {
		    var length = array.length,
		        index = fromIndex + (fromRight ? 1 : -1);

		    while ((fromRight ? index-- : ++index < length)) {
		      if (predicate(array[index], index, array)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOf(array, value, fromIndex) {
		    return value === value
		      ? strictIndexOf(array, value, fromIndex)
		      : baseFindIndex(array, baseIsNaN, fromIndex);
		  }

		  /**
		   * This function is like `baseIndexOf` except that it accepts a comparator.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @param {Function} comparator The comparator invoked per element.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function baseIndexOfWith(array, value, fromIndex, comparator) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (comparator(array[index], value)) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * The base implementation of `_.isNaN` without support for number objects.
		   *
		   * @private
		   * @param {*} value The value to check.
		   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		   */
		  function baseIsNaN(value) {
		    return value !== value;
		  }

		  /**
		   * The base implementation of `_.mean` and `_.meanBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the mean.
		   */
		  function baseMean(array, iteratee) {
		    var length = array == null ? 0 : array.length;
		    return length ? (baseSum(array, iteratee) / length) : NAN;
		  }

		  /**
		   * The base implementation of `_.property` without support for deep paths.
		   *
		   * @private
		   * @param {string} key The key of the property to get.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function baseProperty(key) {
		    return function(object) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.propertyOf` without support for deep paths.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @returns {Function} Returns the new accessor function.
		   */
		  function basePropertyOf(object) {
		    return function(key) {
		      return object == null ? undefined$1 : object[key];
		    };
		  }

		  /**
		   * The base implementation of `_.reduce` and `_.reduceRight`, without support
		   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
		   *
		   * @private
		   * @param {Array|Object} collection The collection to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @param {*} accumulator The initial value.
		   * @param {boolean} initAccum Specify using the first or last element of
		   *  `collection` as the initial value.
		   * @param {Function} eachFunc The function to iterate over `collection`.
		   * @returns {*} Returns the accumulated value.
		   */
		  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
		    eachFunc(collection, function(value, index, collection) {
		      accumulator = initAccum
		        ? (initAccum = false, value)
		        : iteratee(accumulator, value, index, collection);
		    });
		    return accumulator;
		  }

		  /**
		   * The base implementation of `_.sortBy` which uses `comparer` to define the
		   * sort order of `array` and replaces criteria objects with their corresponding
		   * values.
		   *
		   * @private
		   * @param {Array} array The array to sort.
		   * @param {Function} comparer The function to define sort order.
		   * @returns {Array} Returns `array`.
		   */
		  function baseSortBy(array, comparer) {
		    var length = array.length;

		    array.sort(comparer);
		    while (length--) {
		      array[length] = array[length].value;
		    }
		    return array;
		  }

		  /**
		   * The base implementation of `_.sum` and `_.sumBy` without support for
		   * iteratee shorthands.
		   *
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {number} Returns the sum.
		   */
		  function baseSum(array, iteratee) {
		    var result,
		        index = -1,
		        length = array.length;

		    while (++index < length) {
		      var current = iteratee(array[index]);
		      if (current !== undefined$1) {
		        result = result === undefined$1 ? current : (result + current);
		      }
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.times` without support for iteratee shorthands
		   * or max array length checks.
		   *
		   * @private
		   * @param {number} n The number of times to invoke `iteratee`.
		   * @param {Function} iteratee The function invoked per iteration.
		   * @returns {Array} Returns the array of results.
		   */
		  function baseTimes(n, iteratee) {
		    var index = -1,
		        result = Array(n);

		    while (++index < n) {
		      result[index] = iteratee(index);
		    }
		    return result;
		  }

		  /**
		   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
		   * of key-value pairs for `object` corresponding to the property names of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the key-value pairs.
		   */
		  function baseToPairs(object, props) {
		    return arrayMap(props, function(key) {
		      return [key, object[key]];
		    });
		  }

		  /**
		   * The base implementation of `_.trim`.
		   *
		   * @private
		   * @param {string} string The string to trim.
		   * @returns {string} Returns the trimmed string.
		   */
		  function baseTrim(string) {
		    return string
		      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
		      : string;
		  }

		  /**
		   * The base implementation of `_.unary` without support for storing metadata.
		   *
		   * @private
		   * @param {Function} func The function to cap arguments for.
		   * @returns {Function} Returns the new capped function.
		   */
		  function baseUnary(func) {
		    return function(value) {
		      return func(value);
		    };
		  }

		  /**
		   * The base implementation of `_.values` and `_.valuesIn` which creates an
		   * array of `object` property values corresponding to the property names
		   * of `props`.
		   *
		   * @private
		   * @param {Object} object The object to query.
		   * @param {Array} props The property names to get values for.
		   * @returns {Object} Returns the array of property values.
		   */
		  function baseValues(object, props) {
		    return arrayMap(props, function(key) {
		      return object[key];
		    });
		  }

		  /**
		   * Checks if a `cache` value for `key` exists.
		   *
		   * @private
		   * @param {Object} cache The cache to query.
		   * @param {string} key The key of the entry to check.
		   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		   */
		  function cacheHas(cache, key) {
		    return cache.has(key);
		  }

		  /**
		   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the first unmatched string symbol.
		   */
		  function charsStartIndex(strSymbols, chrSymbols) {
		    var index = -1,
		        length = strSymbols.length;

		    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
		   * that is not found in the character symbols.
		   *
		   * @private
		   * @param {Array} strSymbols The string symbols to inspect.
		   * @param {Array} chrSymbols The character symbols to find.
		   * @returns {number} Returns the index of the last unmatched string symbol.
		   */
		  function charsEndIndex(strSymbols, chrSymbols) {
		    var index = strSymbols.length;

		    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
		    return index;
		  }

		  /**
		   * Gets the number of `placeholder` occurrences in `array`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} placeholder The placeholder to search for.
		   * @returns {number} Returns the placeholder count.
		   */
		  function countHolders(array, placeholder) {
		    var length = array.length,
		        result = 0;

		    while (length--) {
		      if (array[length] === placeholder) {
		        ++result;
		      }
		    }
		    return result;
		  }

		  /**
		   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
		   * letters to basic Latin letters.
		   *
		   * @private
		   * @param {string} letter The matched letter to deburr.
		   * @returns {string} Returns the deburred letter.
		   */
		  var deburrLetter = basePropertyOf(deburredLetters);

		  /**
		   * Used by `_.escape` to convert characters to HTML entities.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  var escapeHtmlChar = basePropertyOf(htmlEscapes);

		  /**
		   * Used by `_.template` to escape characters for inclusion in compiled string literals.
		   *
		   * @private
		   * @param {string} chr The matched character to escape.
		   * @returns {string} Returns the escaped character.
		   */
		  function escapeStringChar(chr) {
		    return '\\' + stringEscapes[chr];
		  }

		  /**
		   * Gets the value at `key` of `object`.
		   *
		   * @private
		   * @param {Object} [object] The object to query.
		   * @param {string} key The key of the property to get.
		   * @returns {*} Returns the property value.
		   */
		  function getValue(object, key) {
		    return object == null ? undefined$1 : object[key];
		  }

		  /**
		   * Checks if `string` contains Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
		   */
		  function hasUnicode(string) {
		    return reHasUnicode.test(string);
		  }

		  /**
		   * Checks if `string` contains a word composed of Unicode symbols.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {boolean} Returns `true` if a word is found, else `false`.
		   */
		  function hasUnicodeWord(string) {
		    return reHasUnicodeWord.test(string);
		  }

		  /**
		   * Converts `iterator` to an array.
		   *
		   * @private
		   * @param {Object} iterator The iterator to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function iteratorToArray(iterator) {
		    var data,
		        result = [];

		    while (!(data = iterator.next()).done) {
		      result.push(data.value);
		    }
		    return result;
		  }

		  /**
		   * Converts `map` to its key-value pairs.
		   *
		   * @private
		   * @param {Object} map The map to convert.
		   * @returns {Array} Returns the key-value pairs.
		   */
		  function mapToArray(map) {
		    var index = -1,
		        result = Array(map.size);

		    map.forEach(function(value, key) {
		      result[++index] = [key, value];
		    });
		    return result;
		  }

		  /**
		   * Creates a unary function that invokes `func` with its argument transformed.
		   *
		   * @private
		   * @param {Function} func The function to wrap.
		   * @param {Function} transform The argument transform.
		   * @returns {Function} Returns the new function.
		   */
		  function overArg(func, transform) {
		    return function(arg) {
		      return func(transform(arg));
		    };
		  }

		  /**
		   * Replaces all `placeholder` elements in `array` with an internal placeholder
		   * and returns an array of their indexes.
		   *
		   * @private
		   * @param {Array} array The array to modify.
		   * @param {*} placeholder The placeholder to replace.
		   * @returns {Array} Returns the new array of placeholder indexes.
		   */
		  function replaceHolders(array, placeholder) {
		    var index = -1,
		        length = array.length,
		        resIndex = 0,
		        result = [];

		    while (++index < length) {
		      var value = array[index];
		      if (value === placeholder || value === PLACEHOLDER) {
		        array[index] = PLACEHOLDER;
		        result[resIndex++] = index;
		      }
		    }
		    return result;
		  }

		  /**
		   * Converts `set` to an array of its values.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the values.
		   */
		  function setToArray(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = value;
		    });
		    return result;
		  }

		  /**
		   * Converts `set` to its value-value pairs.
		   *
		   * @private
		   * @param {Object} set The set to convert.
		   * @returns {Array} Returns the value-value pairs.
		   */
		  function setToPairs(set) {
		    var index = -1,
		        result = Array(set.size);

		    set.forEach(function(value) {
		      result[++index] = [value, value];
		    });
		    return result;
		  }

		  /**
		   * A specialized version of `_.indexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictIndexOf(array, value, fromIndex) {
		    var index = fromIndex - 1,
		        length = array.length;

		    while (++index < length) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return -1;
		  }

		  /**
		   * A specialized version of `_.lastIndexOf` which performs strict equality
		   * comparisons of values, i.e. `===`.
		   *
		   * @private
		   * @param {Array} array The array to inspect.
		   * @param {*} value The value to search for.
		   * @param {number} fromIndex The index to search from.
		   * @returns {number} Returns the index of the matched value, else `-1`.
		   */
		  function strictLastIndexOf(array, value, fromIndex) {
		    var index = fromIndex + 1;
		    while (index--) {
		      if (array[index] === value) {
		        return index;
		      }
		    }
		    return index;
		  }

		  /**
		   * Gets the number of symbols in `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the string size.
		   */
		  function stringSize(string) {
		    return hasUnicode(string)
		      ? unicodeSize(string)
		      : asciiSize(string);
		  }

		  /**
		   * Converts `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function stringToArray(string) {
		    return hasUnicode(string)
		      ? unicodeToArray(string)
		      : asciiToArray(string);
		  }

		  /**
		   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
		   * character of `string`.
		   *
		   * @private
		   * @param {string} string The string to inspect.
		   * @returns {number} Returns the index of the last non-whitespace character.
		   */
		  function trimmedEndIndex(string) {
		    var index = string.length;

		    while (index-- && reWhitespace.test(string.charAt(index))) {}
		    return index;
		  }

		  /**
		   * Used by `_.unescape` to convert HTML entities to characters.
		   *
		   * @private
		   * @param {string} chr The matched character to unescape.
		   * @returns {string} Returns the unescaped character.
		   */
		  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

		  /**
		   * Gets the size of a Unicode `string`.
		   *
		   * @private
		   * @param {string} string The string inspect.
		   * @returns {number} Returns the string size.
		   */
		  function unicodeSize(string) {
		    var result = reUnicode.lastIndex = 0;
		    while (reUnicode.test(string)) {
		      ++result;
		    }
		    return result;
		  }

		  /**
		   * Converts a Unicode `string` to an array.
		   *
		   * @private
		   * @param {string} string The string to convert.
		   * @returns {Array} Returns the converted array.
		   */
		  function unicodeToArray(string) {
		    return string.match(reUnicode) || [];
		  }

		  /**
		   * Splits a Unicode `string` into an array of its words.
		   *
		   * @private
		   * @param {string} The string to inspect.
		   * @returns {Array} Returns the words of `string`.
		   */
		  function unicodeWords(string) {
		    return string.match(reUnicodeWord) || [];
		  }

		  /*--------------------------------------------------------------------------*/

		  /**
		   * Create a new pristine `lodash` function using the `context` object.
		   *
		   * @static
		   * @memberOf _
		   * @since 1.1.0
		   * @category Util
		   * @param {Object} [context=root] The context object.
		   * @returns {Function} Returns a new `lodash` function.
		   * @example
		   *
		   * _.mixin({ 'foo': _.constant('foo') });
		   *
		   * var lodash = _.runInContext();
		   * lodash.mixin({ 'bar': lodash.constant('bar') });
		   *
		   * _.isFunction(_.foo);
		   * // => true
		   * _.isFunction(_.bar);
		   * // => false
		   *
		   * lodash.isFunction(lodash.foo);
		   * // => false
		   * lodash.isFunction(lodash.bar);
		   * // => true
		   *
		   * // Create a suped-up `defer` in Node.js.
		   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
		   */
		  var runInContext = (function runInContext(context) {
		    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

		    /** Built-in constructor references. */
		    var Array = context.Array,
		        Date = context.Date,
		        Error = context.Error,
		        Function = context.Function,
		        Math = context.Math,
		        Object = context.Object,
		        RegExp = context.RegExp,
		        String = context.String,
		        TypeError = context.TypeError;

		    /** Used for built-in method references. */
		    var arrayProto = Array.prototype,
		        funcProto = Function.prototype,
		        objectProto = Object.prototype;

		    /** Used to detect overreaching core-js shims. */
		    var coreJsData = context['__core-js_shared__'];

		    /** Used to resolve the decompiled source of functions. */
		    var funcToString = funcProto.toString;

		    /** Used to check objects for own properties. */
		    var hasOwnProperty = objectProto.hasOwnProperty;

		    /** Used to generate unique IDs. */
		    var idCounter = 0;

		    /** Used to detect methods masquerading as native. */
		    var maskSrcKey = (function() {
		      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		      return uid ? ('Symbol(src)_1.' + uid) : '';
		    }());

		    /**
		     * Used to resolve the
		     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		     * of values.
		     */
		    var nativeObjectToString = objectProto.toString;

		    /** Used to infer the `Object` constructor. */
		    var objectCtorString = funcToString.call(Object);

		    /** Used to restore the original `_` reference in `_.noConflict`. */
		    var oldDash = root._;

		    /** Used to detect if a method is native. */
		    var reIsNative = RegExp('^' +
		      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		    );

		    /** Built-in value references. */
		    var Buffer = moduleExports ? context.Buffer : undefined$1,
		        Symbol = context.Symbol,
		        Uint8Array = context.Uint8Array,
		        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
		        getPrototype = overArg(Object.getPrototypeOf, Object),
		        objectCreate = Object.create,
		        propertyIsEnumerable = objectProto.propertyIsEnumerable,
		        splice = arrayProto.splice,
		        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
		        symIterator = Symbol ? Symbol.iterator : undefined$1,
		        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

		    var defineProperty = (function() {
		      try {
		        var func = getNative(Object, 'defineProperty');
		        func({}, '', {});
		        return func;
		      } catch (e) {}
		    }());

		    /** Mocked built-ins. */
		    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
		        ctxNow = Date && Date.now !== root.Date.now && Date.now,
		        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

		    /* Built-in method references for those with the same name as other `lodash` methods. */
		    var nativeCeil = Math.ceil,
		        nativeFloor = Math.floor,
		        nativeGetSymbols = Object.getOwnPropertySymbols,
		        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
		        nativeIsFinite = context.isFinite,
		        nativeJoin = arrayProto.join,
		        nativeKeys = overArg(Object.keys, Object),
		        nativeMax = Math.max,
		        nativeMin = Math.min,
		        nativeNow = Date.now,
		        nativeParseInt = context.parseInt,
		        nativeRandom = Math.random,
		        nativeReverse = arrayProto.reverse;

		    /* Built-in method references that are verified to be native. */
		    var DataView = getNative(context, 'DataView'),
		        Map = getNative(context, 'Map'),
		        Promise = getNative(context, 'Promise'),
		        Set = getNative(context, 'Set'),
		        WeakMap = getNative(context, 'WeakMap'),
		        nativeCreate = getNative(Object, 'create');

		    /** Used to store function metadata. */
		    var metaMap = WeakMap && new WeakMap;

		    /** Used to lookup unminified function names. */
		    var realNames = {};

		    /** Used to detect maps, sets, and weakmaps. */
		    var dataViewCtorString = toSource(DataView),
		        mapCtorString = toSource(Map),
		        promiseCtorString = toSource(Promise),
		        setCtorString = toSource(Set),
		        weakMapCtorString = toSource(WeakMap);

		    /** Used to convert symbols to primitives and strings. */
		    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
		        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
		        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` object which wraps `value` to enable implicit method
		     * chain sequences. Methods that operate on and return arrays, collections,
		     * and functions can be chained together. Methods that retrieve a single value
		     * or may return a primitive value will automatically end the chain sequence
		     * and return the unwrapped value. Otherwise, the value must be unwrapped
		     * with `_#value`.
		     *
		     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
		     * enabled using `_.chain`.
		     *
		     * The execution of chained methods is lazy, that is, it's deferred until
		     * `_#value` is implicitly or explicitly called.
		     *
		     * Lazy evaluation allows several methods to support shortcut fusion.
		     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
		     * the creation of intermediate arrays and can greatly reduce the number of
		     * iteratee executions. Sections of a chain sequence qualify for shortcut
		     * fusion if the section is applied to an array and iteratees accept only
		     * one argument. The heuristic for whether a section qualifies for shortcut
		     * fusion is subject to change.
		     *
		     * Chaining is supported in custom builds as long as the `_#value` method is
		     * directly or indirectly included in the build.
		     *
		     * In addition to lodash methods, wrappers have `Array` and `String` methods.
		     *
		     * The wrapper `Array` methods are:
		     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
		     *
		     * The wrapper `String` methods are:
		     * `replace` and `split`
		     *
		     * The wrapper methods that support shortcut fusion are:
		     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
		     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
		     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
		     *
		     * The chainable wrapper methods are:
		     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
		     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
		     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
		     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
		     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
		     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
		     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
		     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
		     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
		     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
		     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
		     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
		     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
		     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
		     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
		     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
		     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
		     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
		     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
		     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
		     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
		     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
		     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
		     * `zipObject`, `zipObjectDeep`, and `zipWith`
		     *
		     * The wrapper methods that are **not** chainable by default are:
		     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
		     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
		     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
		     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
		     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
		     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
		     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
		     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
		     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
		     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
		     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
		     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
		     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
		     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
		     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
		     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
		     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
		     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
		     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
		     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
		     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
		     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
		     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
		     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
		     * `upperFirst`, `value`, and `words`
		     *
		     * @name _
		     * @constructor
		     * @category Seq
		     * @param {*} value The value to wrap in a `lodash` instance.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2, 3]);
		     *
		     * // Returns an unwrapped value.
		     * wrapped.reduce(_.add);
		     * // => 6
		     *
		     * // Returns a wrapped value.
		     * var squares = wrapped.map(square);
		     *
		     * _.isArray(squares);
		     * // => false
		     *
		     * _.isArray(squares.value());
		     * // => true
		     */
		    function lodash(value) {
		      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
		        if (value instanceof LodashWrapper) {
		          return value;
		        }
		        if (hasOwnProperty.call(value, '__wrapped__')) {
		          return wrapperClone(value);
		        }
		      }
		      return new LodashWrapper(value);
		    }

		    /**
		     * The base implementation of `_.create` without support for assigning
		     * properties to the created object.
		     *
		     * @private
		     * @param {Object} proto The object to inherit from.
		     * @returns {Object} Returns the new object.
		     */
		    var baseCreate = (function() {
		      function object() {}
		      return function(proto) {
		        if (!isObject(proto)) {
		          return {};
		        }
		        if (objectCreate) {
		          return objectCreate(proto);
		        }
		        object.prototype = proto;
		        var result = new object;
		        object.prototype = undefined$1;
		        return result;
		      };
		    }());

		    /**
		     * The function whose prototype chain sequence wrappers inherit from.
		     *
		     * @private
		     */
		    function baseLodash() {
		      // No operation performed.
		    }

		    /**
		     * The base constructor for creating `lodash` wrapper objects.
		     *
		     * @private
		     * @param {*} value The value to wrap.
		     * @param {boolean} [chainAll] Enable explicit method chain sequences.
		     */
		    function LodashWrapper(value, chainAll) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__chain__ = !!chainAll;
		      this.__index__ = 0;
		      this.__values__ = undefined$1;
		    }

		    /**
		     * By default, the template delimiters used by lodash are like those in
		     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
		     * following template settings to use alternative delimiters.
		     *
		     * @static
		     * @memberOf _
		     * @type {Object}
		     */
		    lodash.templateSettings = {

		      /**
		       * Used to detect `data` property values to be HTML-escaped.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'escape': reEscape,

		      /**
		       * Used to detect code to be evaluated.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'evaluate': reEvaluate,

		      /**
		       * Used to detect `data` property values to inject.
		       *
		       * @memberOf _.templateSettings
		       * @type {RegExp}
		       */
		      'interpolate': reInterpolate,

		      /**
		       * Used to reference the data object in the template text.
		       *
		       * @memberOf _.templateSettings
		       * @type {string}
		       */
		      'variable': '',

		      /**
		       * Used to import variables into the compiled template.
		       *
		       * @memberOf _.templateSettings
		       * @type {Object}
		       */
		      'imports': {

		        /**
		         * A reference to the `lodash` function.
		         *
		         * @memberOf _.templateSettings.imports
		         * @type {Function}
		         */
		        '_': lodash
		      }
		    };

		    // Ensure wrappers are instances of `baseLodash`.
		    lodash.prototype = baseLodash.prototype;
		    lodash.prototype.constructor = lodash;

		    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
		    LodashWrapper.prototype.constructor = LodashWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
		     *
		     * @private
		     * @constructor
		     * @param {*} value The value to wrap.
		     */
		    function LazyWrapper(value) {
		      this.__wrapped__ = value;
		      this.__actions__ = [];
		      this.__dir__ = 1;
		      this.__filtered__ = false;
		      this.__iteratees__ = [];
		      this.__takeCount__ = MAX_ARRAY_LENGTH;
		      this.__views__ = [];
		    }

		    /**
		     * Creates a clone of the lazy wrapper object.
		     *
		     * @private
		     * @name clone
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the cloned `LazyWrapper` object.
		     */
		    function lazyClone() {
		      var result = new LazyWrapper(this.__wrapped__);
		      result.__actions__ = copyArray(this.__actions__);
		      result.__dir__ = this.__dir__;
		      result.__filtered__ = this.__filtered__;
		      result.__iteratees__ = copyArray(this.__iteratees__);
		      result.__takeCount__ = this.__takeCount__;
		      result.__views__ = copyArray(this.__views__);
		      return result;
		    }

		    /**
		     * Reverses the direction of lazy iteration.
		     *
		     * @private
		     * @name reverse
		     * @memberOf LazyWrapper
		     * @returns {Object} Returns the new reversed `LazyWrapper` object.
		     */
		    function lazyReverse() {
		      if (this.__filtered__) {
		        var result = new LazyWrapper(this);
		        result.__dir__ = -1;
		        result.__filtered__ = true;
		      } else {
		        result = this.clone();
		        result.__dir__ *= -1;
		      }
		      return result;
		    }

		    /**
		     * Extracts the unwrapped value from its lazy wrapper.
		     *
		     * @private
		     * @name value
		     * @memberOf LazyWrapper
		     * @returns {*} Returns the unwrapped value.
		     */
		    function lazyValue() {
		      var array = this.__wrapped__.value(),
		          dir = this.__dir__,
		          isArr = isArray(array),
		          isRight = dir < 0,
		          arrLength = isArr ? array.length : 0,
		          view = getView(0, arrLength, this.__views__),
		          start = view.start,
		          end = view.end,
		          length = end - start,
		          index = isRight ? end : (start - 1),
		          iteratees = this.__iteratees__,
		          iterLength = iteratees.length,
		          resIndex = 0,
		          takeCount = nativeMin(length, this.__takeCount__);

		      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
		        return baseWrapperValue(array, this.__actions__);
		      }
		      var result = [];

		      outer:
		      while (length-- && resIndex < takeCount) {
		        index += dir;

		        var iterIndex = -1,
		            value = array[index];

		        while (++iterIndex < iterLength) {
		          var data = iteratees[iterIndex],
		              iteratee = data.iteratee,
		              type = data.type,
		              computed = iteratee(value);

		          if (type == LAZY_MAP_FLAG) {
		            value = computed;
		          } else if (!computed) {
		            if (type == LAZY_FILTER_FLAG) {
		              continue outer;
		            } else {
		              break outer;
		            }
		          }
		        }
		        result[resIndex++] = value;
		      }
		      return result;
		    }

		    // Ensure `LazyWrapper` is an instance of `baseLodash`.
		    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
		    LazyWrapper.prototype.constructor = LazyWrapper;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a hash object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Hash(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the hash.
		     *
		     * @private
		     * @name clear
		     * @memberOf Hash
		     */
		    function hashClear() {
		      this.__data__ = nativeCreate ? nativeCreate(null) : {};
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the hash.
		     *
		     * @private
		     * @name delete
		     * @memberOf Hash
		     * @param {Object} hash The hash to modify.
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function hashDelete(key) {
		      var result = this.has(key) && delete this.__data__[key];
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the hash value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Hash
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function hashGet(key) {
		      var data = this.__data__;
		      if (nativeCreate) {
		        var result = data[key];
		        return result === HASH_UNDEFINED ? undefined$1 : result;
		      }
		      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
		    }

		    /**
		     * Checks if a hash value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Hash
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function hashHas(key) {
		      var data = this.__data__;
		      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
		    }

		    /**
		     * Sets the hash `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Hash
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the hash instance.
		     */
		    function hashSet(key, value) {
		      var data = this.__data__;
		      this.size += this.has(key) ? 0 : 1;
		      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
		      return this;
		    }

		    // Add methods to `Hash`.
		    Hash.prototype.clear = hashClear;
		    Hash.prototype['delete'] = hashDelete;
		    Hash.prototype.get = hashGet;
		    Hash.prototype.has = hashHas;
		    Hash.prototype.set = hashSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an list cache object.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function ListCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the list cache.
		     *
		     * @private
		     * @name clear
		     * @memberOf ListCache
		     */
		    function listCacheClear() {
		      this.__data__ = [];
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the list cache.
		     *
		     * @private
		     * @name delete
		     * @memberOf ListCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function listCacheDelete(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        return false;
		      }
		      var lastIndex = data.length - 1;
		      if (index == lastIndex) {
		        data.pop();
		      } else {
		        splice.call(data, index, 1);
		      }
		      --this.size;
		      return true;
		    }

		    /**
		     * Gets the list cache value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf ListCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function listCacheGet(key) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      return index < 0 ? undefined$1 : data[index][1];
		    }

		    /**
		     * Checks if a list cache value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf ListCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function listCacheHas(key) {
		      return assocIndexOf(this.__data__, key) > -1;
		    }

		    /**
		     * Sets the list cache `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf ListCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the list cache instance.
		     */
		    function listCacheSet(key, value) {
		      var data = this.__data__,
		          index = assocIndexOf(data, key);

		      if (index < 0) {
		        ++this.size;
		        data.push([key, value]);
		      } else {
		        data[index][1] = value;
		      }
		      return this;
		    }

		    // Add methods to `ListCache`.
		    ListCache.prototype.clear = listCacheClear;
		    ListCache.prototype['delete'] = listCacheDelete;
		    ListCache.prototype.get = listCacheGet;
		    ListCache.prototype.has = listCacheHas;
		    ListCache.prototype.set = listCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a map cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function MapCache(entries) {
		      var index = -1,
		          length = entries == null ? 0 : entries.length;

		      this.clear();
		      while (++index < length) {
		        var entry = entries[index];
		        this.set(entry[0], entry[1]);
		      }
		    }

		    /**
		     * Removes all key-value entries from the map.
		     *
		     * @private
		     * @name clear
		     * @memberOf MapCache
		     */
		    function mapCacheClear() {
		      this.size = 0;
		      this.__data__ = {
		        'hash': new Hash,
		        'map': new (Map || ListCache),
		        'string': new Hash
		      };
		    }

		    /**
		     * Removes `key` and its value from the map.
		     *
		     * @private
		     * @name delete
		     * @memberOf MapCache
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function mapCacheDelete(key) {
		      var result = getMapData(this, key)['delete'](key);
		      this.size -= result ? 1 : 0;
		      return result;
		    }

		    /**
		     * Gets the map value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf MapCache
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function mapCacheGet(key) {
		      return getMapData(this, key).get(key);
		    }

		    /**
		     * Checks if a map value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf MapCache
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function mapCacheHas(key) {
		      return getMapData(this, key).has(key);
		    }

		    /**
		     * Sets the map `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf MapCache
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the map cache instance.
		     */
		    function mapCacheSet(key, value) {
		      var data = getMapData(this, key),
		          size = data.size;

		      data.set(key, value);
		      this.size += data.size == size ? 0 : 1;
		      return this;
		    }

		    // Add methods to `MapCache`.
		    MapCache.prototype.clear = mapCacheClear;
		    MapCache.prototype['delete'] = mapCacheDelete;
		    MapCache.prototype.get = mapCacheGet;
		    MapCache.prototype.has = mapCacheHas;
		    MapCache.prototype.set = mapCacheSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     *
		     * Creates an array cache object to store unique values.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [values] The values to cache.
		     */
		    function SetCache(values) {
		      var index = -1,
		          length = values == null ? 0 : values.length;

		      this.__data__ = new MapCache;
		      while (++index < length) {
		        this.add(values[index]);
		      }
		    }

		    /**
		     * Adds `value` to the array cache.
		     *
		     * @private
		     * @name add
		     * @memberOf SetCache
		     * @alias push
		     * @param {*} value The value to cache.
		     * @returns {Object} Returns the cache instance.
		     */
		    function setCacheAdd(value) {
		      this.__data__.set(value, HASH_UNDEFINED);
		      return this;
		    }

		    /**
		     * Checks if `value` is in the array cache.
		     *
		     * @private
		     * @name has
		     * @memberOf SetCache
		     * @param {*} value The value to search for.
		     * @returns {number} Returns `true` if `value` is found, else `false`.
		     */
		    function setCacheHas(value) {
		      return this.__data__.has(value);
		    }

		    // Add methods to `SetCache`.
		    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		    SetCache.prototype.has = setCacheHas;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a stack cache object to store key-value pairs.
		     *
		     * @private
		     * @constructor
		     * @param {Array} [entries] The key-value pairs to cache.
		     */
		    function Stack(entries) {
		      var data = this.__data__ = new ListCache(entries);
		      this.size = data.size;
		    }

		    /**
		     * Removes all key-value entries from the stack.
		     *
		     * @private
		     * @name clear
		     * @memberOf Stack
		     */
		    function stackClear() {
		      this.__data__ = new ListCache;
		      this.size = 0;
		    }

		    /**
		     * Removes `key` and its value from the stack.
		     *
		     * @private
		     * @name delete
		     * @memberOf Stack
		     * @param {string} key The key of the value to remove.
		     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		     */
		    function stackDelete(key) {
		      var data = this.__data__,
		          result = data['delete'](key);

		      this.size = data.size;
		      return result;
		    }

		    /**
		     * Gets the stack value for `key`.
		     *
		     * @private
		     * @name get
		     * @memberOf Stack
		     * @param {string} key The key of the value to get.
		     * @returns {*} Returns the entry value.
		     */
		    function stackGet(key) {
		      return this.__data__.get(key);
		    }

		    /**
		     * Checks if a stack value for `key` exists.
		     *
		     * @private
		     * @name has
		     * @memberOf Stack
		     * @param {string} key The key of the entry to check.
		     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		     */
		    function stackHas(key) {
		      return this.__data__.has(key);
		    }

		    /**
		     * Sets the stack `key` to `value`.
		     *
		     * @private
		     * @name set
		     * @memberOf Stack
		     * @param {string} key The key of the value to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns the stack cache instance.
		     */
		    function stackSet(key, value) {
		      var data = this.__data__;
		      if (data instanceof ListCache) {
		        var pairs = data.__data__;
		        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		          pairs.push([key, value]);
		          this.size = ++data.size;
		          return this;
		        }
		        data = this.__data__ = new MapCache(pairs);
		      }
		      data.set(key, value);
		      this.size = data.size;
		      return this;
		    }

		    // Add methods to `Stack`.
		    Stack.prototype.clear = stackClear;
		    Stack.prototype['delete'] = stackDelete;
		    Stack.prototype.get = stackGet;
		    Stack.prototype.has = stackHas;
		    Stack.prototype.set = stackSet;

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of the enumerable property names of the array-like `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @param {boolean} inherited Specify returning inherited property names.
		     * @returns {Array} Returns the array of property names.
		     */
		    function arrayLikeKeys(value, inherited) {
		      var isArr = isArray(value),
		          isArg = !isArr && isArguments(value),
		          isBuff = !isArr && !isArg && isBuffer(value),
		          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		          skipIndexes = isArr || isArg || isBuff || isType,
		          result = skipIndexes ? baseTimes(value.length, String) : [],
		          length = result.length;

		      for (var key in value) {
		        if ((inherited || hasOwnProperty.call(value, key)) &&
		            !(skipIndexes && (
		               // Safari 9 has enumerable `arguments.length` in strict mode.
		               key == 'length' ||
		               // Node.js 0.10 has enumerable non-index properties on buffers.
		               (isBuff && (key == 'offset' || key == 'parent')) ||
		               // PhantomJS 2 has enumerable non-index properties on typed arrays.
		               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		               // Skip index properties.
		               isIndex(key, length)
		            ))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `_.sample` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @returns {*} Returns the random element.
		     */
		    function arraySample(array) {
		      var length = array.length;
		      return length ? array[baseRandom(0, length - 1)] : undefined$1;
		    }

		    /**
		     * A specialized version of `_.sampleSize` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function arraySampleSize(array, n) {
		      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
		    }

		    /**
		     * A specialized version of `_.shuffle` for arrays.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function arrayShuffle(array) {
		      return shuffleSelf(copyArray(array));
		    }

		    /**
		     * This function is like `assignValue` except that it doesn't assign
		     * `undefined` values.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignMergeValue(object, key, value) {
		      if ((value !== undefined$1 && !eq(object[key], value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Assigns `value` to `key` of `object` if the existing value is not equivalent
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function assignValue(object, key, value) {
		      var objValue = object[key];
		      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		          (value === undefined$1 && !(key in object))) {
		        baseAssignValue(object, key, value);
		      }
		    }

		    /**
		     * Gets the index at which the `key` is found in `array` of key-value pairs.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {*} key The key to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     */
		    function assocIndexOf(array, key) {
		      var length = array.length;
		      while (length--) {
		        if (eq(array[length][0], key)) {
		          return length;
		        }
		      }
		      return -1;
		    }

		    /**
		     * Aggregates elements of `collection` on `accumulator` with keys transformed
		     * by `iteratee` and values set by `setter`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform keys.
		     * @param {Object} accumulator The initial aggregated object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseAggregator(collection, setter, iteratee, accumulator) {
		      baseEach(collection, function(value, key, collection) {
		        setter(accumulator, value, iteratee(value), collection);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.assign` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssign(object, source) {
		      return object && copyObject(source, keys(source), object);
		    }

		    /**
		     * The base implementation of `_.assignIn` without support for multiple sources
		     * or `customizer` functions.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @returns {Object} Returns `object`.
		     */
		    function baseAssignIn(object, source) {
		      return object && copyObject(source, keysIn(source), object);
		    }

		    /**
		     * The base implementation of `assignValue` and `assignMergeValue` without
		     * value checks.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {string} key The key of the property to assign.
		     * @param {*} value The value to assign.
		     */
		    function baseAssignValue(object, key, value) {
		      if (key == '__proto__' && defineProperty) {
		        defineProperty(object, key, {
		          'configurable': true,
		          'enumerable': true,
		          'value': value,
		          'writable': true
		        });
		      } else {
		        object[key] = value;
		      }
		    }

		    /**
		     * The base implementation of `_.at` without support for individual paths.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Array} Returns the picked elements.
		     */
		    function baseAt(object, paths) {
		      var index = -1,
		          length = paths.length,
		          result = Array(length),
		          skip = object == null;

		      while (++index < length) {
		        result[index] = skip ? undefined$1 : get(object, paths[index]);
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.clamp` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     */
		    function baseClamp(number, lower, upper) {
		      if (number === number) {
		        if (upper !== undefined$1) {
		          number = number <= upper ? number : upper;
		        }
		        if (lower !== undefined$1) {
		          number = number >= lower ? number : lower;
		        }
		      }
		      return number;
		    }

		    /**
		     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
		     * traversed objects.
		     *
		     * @private
		     * @param {*} value The value to clone.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Deep clone
		     *  2 - Flatten inherited properties
		     *  4 - Clone symbols
		     * @param {Function} [customizer] The function to customize cloning.
		     * @param {string} [key] The key of `value`.
		     * @param {Object} [object] The parent object of `value`.
		     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
		     * @returns {*} Returns the cloned value.
		     */
		    function baseClone(value, bitmask, customizer, key, object, stack) {
		      var result,
		          isDeep = bitmask & CLONE_DEEP_FLAG,
		          isFlat = bitmask & CLONE_FLAT_FLAG,
		          isFull = bitmask & CLONE_SYMBOLS_FLAG;

		      if (customizer) {
		        result = object ? customizer(value, key, object, stack) : customizer(value);
		      }
		      if (result !== undefined$1) {
		        return result;
		      }
		      if (!isObject(value)) {
		        return value;
		      }
		      var isArr = isArray(value);
		      if (isArr) {
		        result = initCloneArray(value);
		        if (!isDeep) {
		          return copyArray(value, result);
		        }
		      } else {
		        var tag = getTag(value),
		            isFunc = tag == funcTag || tag == genTag;

		        if (isBuffer(value)) {
		          return cloneBuffer(value, isDeep);
		        }
		        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
		          result = (isFlat || isFunc) ? {} : initCloneObject(value);
		          if (!isDeep) {
		            return isFlat
		              ? copySymbolsIn(value, baseAssignIn(result, value))
		              : copySymbols(value, baseAssign(result, value));
		          }
		        } else {
		          if (!cloneableTags[tag]) {
		            return object ? value : {};
		          }
		          result = initCloneByTag(value, tag, isDeep);
		        }
		      }
		      // Check for circular references and return its corresponding clone.
		      stack || (stack = new Stack);
		      var stacked = stack.get(value);
		      if (stacked) {
		        return stacked;
		      }
		      stack.set(value, result);

		      if (isSet(value)) {
		        value.forEach(function(subValue) {
		          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
		        });
		      } else if (isMap(value)) {
		        value.forEach(function(subValue, key) {
		          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
		        });
		      }

		      var keysFunc = isFull
		        ? (isFlat ? getAllKeysIn : getAllKeys)
		        : (isFlat ? keysIn : keys);

		      var props = isArr ? undefined$1 : keysFunc(value);
		      arrayEach(props || value, function(subValue, key) {
		        if (props) {
		          key = subValue;
		          subValue = value[key];
		        }
		        // Recursively populate clone (susceptible to call stack limits).
		        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.conforms` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseConforms(source) {
		      var props = keys(source);
		      return function(object) {
		        return baseConformsTo(object, source, props);
		      };
		    }

		    /**
		     * The base implementation of `_.conformsTo` which accepts `props` to check.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     */
		    function baseConformsTo(object, source, props) {
		      var length = props.length;
		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (length--) {
		        var key = props[length],
		            predicate = source[key],
		            value = object[key];

		        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.delay` and `_.defer` which accepts `args`
		     * to provide to `func`.
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {Array} args The arguments to provide to `func`.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    function baseDelay(func, wait, args) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
		    }

		    /**
		     * The base implementation of methods like `_.difference` without support
		     * for excluding multiple arrays or iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Array} values The values to exclude.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     */
		    function baseDifference(array, values, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          isCommon = true,
		          length = array.length,
		          result = [],
		          valuesLength = values.length;

		      if (!length) {
		        return result;
		      }
		      if (iteratee) {
		        values = arrayMap(values, baseUnary(iteratee));
		      }
		      if (comparator) {
		        includes = arrayIncludesWith;
		        isCommon = false;
		      }
		      else if (values.length >= LARGE_ARRAY_SIZE) {
		        includes = cacheHas;
		        isCommon = false;
		        values = new SetCache(values);
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee == null ? value : iteratee(value);

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var valuesIndex = valuesLength;
		          while (valuesIndex--) {
		            if (values[valuesIndex] === computed) {
		              continue outer;
		            }
		          }
		          result.push(value);
		        }
		        else if (!includes(values, computed, comparator)) {
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.forEach` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEach = createBaseEach(baseForOwn);

		    /**
		     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     */
		    var baseEachRight = createBaseEach(baseForOwnRight, true);

		    /**
		     * The base implementation of `_.every` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`
		     */
		    function baseEvery(collection, predicate) {
		      var result = true;
		      baseEach(collection, function(value, index, collection) {
		        result = !!predicate(value, index, collection);
		        return result;
		      });
		      return result;
		    }

		    /**
		     * The base implementation of methods like `_.max` and `_.min` which accepts a
		     * `comparator` to determine the extremum value.
		     *
		     * @private
		     * @param {Array} array The array to iterate over.
		     * @param {Function} iteratee The iteratee invoked per iteration.
		     * @param {Function} comparator The comparator used to compare values.
		     * @returns {*} Returns the extremum value.
		     */
		    function baseExtremum(array, iteratee, comparator) {
		      var index = -1,
		          length = array.length;

		      while (++index < length) {
		        var value = array[index],
		            current = iteratee(value);

		        if (current != null && (computed === undefined$1
		              ? (current === current && !isSymbol(current))
		              : comparator(current, computed)
		            )) {
		          var computed = current,
		              result = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.fill` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     */
		    function baseFill(array, value, start, end) {
		      var length = array.length;

		      start = toInteger(start);
		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = (end === undefined$1 || end > length) ? length : toInteger(end);
		      if (end < 0) {
		        end += length;
		      }
		      end = start > end ? 0 : toLength(end);
		      while (start < end) {
		        array[start++] = value;
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.filter` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     */
		    function baseFilter(collection, predicate) {
		      var result = [];
		      baseEach(collection, function(value, index, collection) {
		        if (predicate(value, index, collection)) {
		          result.push(value);
		        }
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.flatten` with support for restricting flattening.
		     *
		     * @private
		     * @param {Array} array The array to flatten.
		     * @param {number} depth The maximum recursion depth.
		     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
		     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
		     * @param {Array} [result=[]] The initial result value.
		     * @returns {Array} Returns the new flattened array.
		     */
		    function baseFlatten(array, depth, predicate, isStrict, result) {
		      var index = -1,
		          length = array.length;

		      predicate || (predicate = isFlattenable);
		      result || (result = []);

		      while (++index < length) {
		        var value = array[index];
		        if (depth > 0 && predicate(value)) {
		          if (depth > 1) {
		            // Recursively flatten arrays (susceptible to call stack limits).
		            baseFlatten(value, depth - 1, predicate, isStrict, result);
		          } else {
		            arrayPush(result, value);
		          }
		        } else if (!isStrict) {
		          result[result.length] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `baseForOwn` which iterates over `object`
		     * properties returned by `keysFunc` and invokes `iteratee` for each property.
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseFor = createBaseFor();

		    /**
		     * This function is like `baseFor` except that it iterates over properties
		     * in the opposite order.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @returns {Object} Returns `object`.
		     */
		    var baseForRight = createBaseFor(true);

		    /**
		     * The base implementation of `_.forOwn` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwn(object, iteratee) {
		      return object && baseFor(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     */
		    function baseForOwnRight(object, iteratee) {
		      return object && baseForRight(object, iteratee, keys);
		    }

		    /**
		     * The base implementation of `_.functions` which creates an array of
		     * `object` function property names filtered from `props`.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Array} props The property names to filter.
		     * @returns {Array} Returns the function names.
		     */
		    function baseFunctions(object, props) {
		      return arrayFilter(props, function(key) {
		        return isFunction(object[key]);
		      });
		    }

		    /**
		     * The base implementation of `_.get` without support for default values.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseGet(object, path) {
		      path = castPath(path, object);

		      var index = 0,
		          length = path.length;

		      while (object != null && index < length) {
		        object = object[toKey(path[index++])];
		      }
		      return (index && index == length) ? object : undefined$1;
		    }

		    /**
		     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Function} keysFunc The function to get the keys of `object`.
		     * @param {Function} symbolsFunc The function to get the symbols of `object`.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		      var result = keysFunc(object);
		      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		    }

		    /**
		     * The base implementation of `getTag` without fallbacks for buggy environments.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    function baseGetTag(value) {
		      if (value == null) {
		        return value === undefined$1 ? undefinedTag : nullTag;
		      }
		      return (symToStringTag && symToStringTag in Object(value))
		        ? getRawTag(value)
		        : objectToString(value);
		    }

		    /**
		     * The base implementation of `_.gt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     */
		    function baseGt(value, other) {
		      return value > other;
		    }

		    /**
		     * The base implementation of `_.has` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHas(object, key) {
		      return object != null && hasOwnProperty.call(object, key);
		    }

		    /**
		     * The base implementation of `_.hasIn` without support for deep paths.
		     *
		     * @private
		     * @param {Object} [object] The object to query.
		     * @param {Array|string} key The key to check.
		     * @returns {boolean} Returns `true` if `key` exists, else `false`.
		     */
		    function baseHasIn(object, key) {
		      return object != null && key in Object(object);
		    }

		    /**
		     * The base implementation of `_.inRange` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {number} number The number to check.
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     */
		    function baseInRange(number, start, end) {
		      return number >= nativeMin(start, end) && number < nativeMax(start, end);
		    }

		    /**
		     * The base implementation of methods like `_.intersection`, without support
		     * for iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of shared values.
		     */
		    function baseIntersection(arrays, iteratee, comparator) {
		      var includes = comparator ? arrayIncludesWith : arrayIncludes,
		          length = arrays[0].length,
		          othLength = arrays.length,
		          othIndex = othLength,
		          caches = Array(othLength),
		          maxLength = Infinity,
		          result = [];

		      while (othIndex--) {
		        var array = arrays[othIndex];
		        if (othIndex && iteratee) {
		          array = arrayMap(array, baseUnary(iteratee));
		        }
		        maxLength = nativeMin(array.length, maxLength);
		        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
		          ? new SetCache(othIndex && array)
		          : undefined$1;
		      }
		      array = arrays[0];

		      var index = -1,
		          seen = caches[0];

		      outer:
		      while (++index < length && result.length < maxLength) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (!(seen
		              ? cacheHas(seen, computed)
		              : includes(result, computed, comparator)
		            )) {
		          othIndex = othLength;
		          while (--othIndex) {
		            var cache = caches[othIndex];
		            if (!(cache
		                  ? cacheHas(cache, computed)
		                  : includes(arrays[othIndex], computed, comparator))
		                ) {
		              continue outer;
		            }
		          }
		          if (seen) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.invert` and `_.invertBy` which inverts
		     * `object` with values transformed by `iteratee` and set by `setter`.
		     *
		     * @private
		     * @param {Object} object The object to iterate over.
		     * @param {Function} setter The function to set `accumulator` values.
		     * @param {Function} iteratee The iteratee to transform values.
		     * @param {Object} accumulator The initial inverted object.
		     * @returns {Function} Returns `accumulator`.
		     */
		    function baseInverter(object, setter, iteratee, accumulator) {
		      baseForOwn(object, function(value, key, object) {
		        setter(accumulator, iteratee(value), key, object);
		      });
		      return accumulator;
		    }

		    /**
		     * The base implementation of `_.invoke` without support for individual
		     * method arguments.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {Array} args The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     */
		    function baseInvoke(object, path, args) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      var func = object == null ? object : object[toKey(last(path))];
		      return func == null ? undefined$1 : apply(func, object, args);
		    }

		    /**
		     * The base implementation of `_.isArguments`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     */
		    function baseIsArguments(value) {
		      return isObjectLike(value) && baseGetTag(value) == argsTag;
		    }

		    /**
		     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     */
		    function baseIsArrayBuffer(value) {
		      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
		    }

		    /**
		     * The base implementation of `_.isDate` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     */
		    function baseIsDate(value) {
		      return isObjectLike(value) && baseGetTag(value) == dateTag;
		    }

		    /**
		     * The base implementation of `_.isEqual` which supports partial comparisons
		     * and tracks traversed objects.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {boolean} bitmask The bitmask flags.
		     *  1 - Unordered comparison
		     *  2 - Partial comparison
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     */
		    function baseIsEqual(value, other, bitmask, customizer, stack) {
		      if (value === other) {
		        return true;
		      }
		      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
		        return value !== value && other !== other;
		      }
		      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		    }

		    /**
		     * A specialized version of `baseIsEqual` for arrays and objects which performs
		     * deep comparisons and tracks traversed objects enabling objects with circular
		     * references to be compared.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
		      var objIsArr = isArray(object),
		          othIsArr = isArray(other),
		          objTag = objIsArr ? arrayTag : getTag(object),
		          othTag = othIsArr ? arrayTag : getTag(other);

		      objTag = objTag == argsTag ? objectTag : objTag;
		      othTag = othTag == argsTag ? objectTag : othTag;

		      var objIsObj = objTag == objectTag,
		          othIsObj = othTag == objectTag,
		          isSameTag = objTag == othTag;

		      if (isSameTag && isBuffer(object)) {
		        if (!isBuffer(other)) {
		          return false;
		        }
		        objIsArr = true;
		        objIsObj = false;
		      }
		      if (isSameTag && !objIsObj) {
		        stack || (stack = new Stack);
		        return (objIsArr || isTypedArray(object))
		          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
		          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
		      }
		      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
		        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

		        if (objIsWrapped || othIsWrapped) {
		          var objUnwrapped = objIsWrapped ? object.value() : object,
		              othUnwrapped = othIsWrapped ? other.value() : other;

		          stack || (stack = new Stack);
		          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
		        }
		      }
		      if (!isSameTag) {
		        return false;
		      }
		      stack || (stack = new Stack);
		      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		    }

		    /**
		     * The base implementation of `_.isMap` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     */
		    function baseIsMap(value) {
		      return isObjectLike(value) && getTag(value) == mapTag;
		    }

		    /**
		     * The base implementation of `_.isMatch` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Array} matchData The property names, values, and compare flags to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     */
		    function baseIsMatch(object, source, matchData, customizer) {
		      var index = matchData.length,
		          length = index,
		          noCustomizer = !customizer;

		      if (object == null) {
		        return !length;
		      }
		      object = Object(object);
		      while (index--) {
		        var data = matchData[index];
		        if ((noCustomizer && data[2])
		              ? data[1] !== object[data[0]]
		              : !(data[0] in object)
		            ) {
		          return false;
		        }
		      }
		      while (++index < length) {
		        data = matchData[index];
		        var key = data[0],
		            objValue = object[key],
		            srcValue = data[1];

		        if (noCustomizer && data[2]) {
		          if (objValue === undefined$1 && !(key in object)) {
		            return false;
		          }
		        } else {
		          var stack = new Stack;
		          if (customizer) {
		            var result = customizer(objValue, srcValue, key, object, source, stack);
		          }
		          if (!(result === undefined$1
		                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
		                : result
		              )) {
		            return false;
		          }
		        }
		      }
		      return true;
		    }

		    /**
		     * The base implementation of `_.isNative` without bad shim checks.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     */
		    function baseIsNative(value) {
		      if (!isObject(value) || isMasked(value)) {
		        return false;
		      }
		      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		      return pattern.test(toSource(value));
		    }

		    /**
		     * The base implementation of `_.isRegExp` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     */
		    function baseIsRegExp(value) {
		      return isObjectLike(value) && baseGetTag(value) == regexpTag;
		    }

		    /**
		     * The base implementation of `_.isSet` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     */
		    function baseIsSet(value) {
		      return isObjectLike(value) && getTag(value) == setTag;
		    }

		    /**
		     * The base implementation of `_.isTypedArray` without Node.js optimizations.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     */
		    function baseIsTypedArray(value) {
		      return isObjectLike(value) &&
		        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		    }

		    /**
		     * The base implementation of `_.iteratee`.
		     *
		     * @private
		     * @param {*} [value=_.identity] The value to convert to an iteratee.
		     * @returns {Function} Returns the iteratee.
		     */
		    function baseIteratee(value) {
		      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
		      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
		      if (typeof value == 'function') {
		        return value;
		      }
		      if (value == null) {
		        return identity;
		      }
		      if (typeof value == 'object') {
		        return isArray(value)
		          ? baseMatchesProperty(value[0], value[1])
		          : baseMatches(value);
		      }
		      return property(value);
		    }

		    /**
		     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeys(object) {
		      if (!isPrototype(object)) {
		        return nativeKeys(object);
		      }
		      var result = [];
		      for (var key in Object(object)) {
		        if (hasOwnProperty.call(object, key) && key != 'constructor') {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function baseKeysIn(object) {
		      if (!isObject(object)) {
		        return nativeKeysIn(object);
		      }
		      var isProto = isPrototype(object),
		          result = [];

		      for (var key in object) {
		        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.lt` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     */
		    function baseLt(value, other) {
		      return value < other;
		    }

		    /**
		     * The base implementation of `_.map` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} iteratee The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     */
		    function baseMap(collection, iteratee) {
		      var index = -1,
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value, key, collection) {
		        result[++index] = iteratee(value, key, collection);
		      });
		      return result;
		    }

		    /**
		     * The base implementation of `_.matches` which doesn't clone `source`.
		     *
		     * @private
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatches(source) {
		      var matchData = getMatchData(source);
		      if (matchData.length == 1 && matchData[0][2]) {
		        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
		      }
		      return function(object) {
		        return object === source || baseIsMatch(object, source, matchData);
		      };
		    }

		    /**
		     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
		     *
		     * @private
		     * @param {string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function baseMatchesProperty(path, srcValue) {
		      if (isKey(path) && isStrictComparable(srcValue)) {
		        return matchesStrictComparable(toKey(path), srcValue);
		      }
		      return function(object) {
		        var objValue = get(object, path);
		        return (objValue === undefined$1 && objValue === srcValue)
		          ? hasIn(object, path)
		          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
		      };
		    }

		    /**
		     * The base implementation of `_.merge` without support for multiple sources.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} [customizer] The function to customize merged values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMerge(object, source, srcIndex, customizer, stack) {
		      if (object === source) {
		        return;
		      }
		      baseFor(source, function(srcValue, key) {
		        stack || (stack = new Stack);
		        if (isObject(srcValue)) {
		          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
		        }
		        else {
		          var newValue = customizer
		            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
		            : undefined$1;

		          if (newValue === undefined$1) {
		            newValue = srcValue;
		          }
		          assignMergeValue(object, key, newValue);
		        }
		      }, keysIn);
		    }

		    /**
		     * A specialized version of `baseMerge` for arrays and objects which performs
		     * deep merges and tracks traversed objects enabling objects with circular
		     * references to be merged.
		     *
		     * @private
		     * @param {Object} object The destination object.
		     * @param {Object} source The source object.
		     * @param {string} key The key of the value to merge.
		     * @param {number} srcIndex The index of `source`.
		     * @param {Function} mergeFunc The function to merge values.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     */
		    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
		      var objValue = safeGet(object, key),
		          srcValue = safeGet(source, key),
		          stacked = stack.get(srcValue);

		      if (stacked) {
		        assignMergeValue(object, key, stacked);
		        return;
		      }
		      var newValue = customizer
		        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
		        : undefined$1;

		      var isCommon = newValue === undefined$1;

		      if (isCommon) {
		        var isArr = isArray(srcValue),
		            isBuff = !isArr && isBuffer(srcValue),
		            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

		        newValue = srcValue;
		        if (isArr || isBuff || isTyped) {
		          if (isArray(objValue)) {
		            newValue = objValue;
		          }
		          else if (isArrayLikeObject(objValue)) {
		            newValue = copyArray(objValue);
		          }
		          else if (isBuff) {
		            isCommon = false;
		            newValue = cloneBuffer(srcValue, true);
		          }
		          else if (isTyped) {
		            isCommon = false;
		            newValue = cloneTypedArray(srcValue, true);
		          }
		          else {
		            newValue = [];
		          }
		        }
		        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
		          newValue = objValue;
		          if (isArguments(objValue)) {
		            newValue = toPlainObject(objValue);
		          }
		          else if (!isObject(objValue) || isFunction(objValue)) {
		            newValue = initCloneObject(srcValue);
		          }
		        }
		        else {
		          isCommon = false;
		        }
		      }
		      if (isCommon) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, newValue);
		        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
		        stack['delete'](srcValue);
		      }
		      assignMergeValue(object, key, newValue);
		    }

		    /**
		     * The base implementation of `_.nth` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {number} n The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     */
		    function baseNth(array, n) {
		      var length = array.length;
		      if (!length) {
		        return;
		      }
		      n += n < 0 ? length : 0;
		      return isIndex(n, length) ? array[n] : undefined$1;
		    }

		    /**
		     * The base implementation of `_.orderBy` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
		     * @param {string[]} orders The sort orders of `iteratees`.
		     * @returns {Array} Returns the new sorted array.
		     */
		    function baseOrderBy(collection, iteratees, orders) {
		      if (iteratees.length) {
		        iteratees = arrayMap(iteratees, function(iteratee) {
		          if (isArray(iteratee)) {
		            return function(value) {
		              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
		            }
		          }
		          return iteratee;
		        });
		      } else {
		        iteratees = [identity];
		      }

		      var index = -1;
		      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

		      var result = baseMap(collection, function(value, key, collection) {
		        var criteria = arrayMap(iteratees, function(iteratee) {
		          return iteratee(value);
		        });
		        return { 'criteria': criteria, 'index': ++index, 'value': value };
		      });

		      return baseSortBy(result, function(object, other) {
		        return compareMultiple(object, other, orders);
		      });
		    }

		    /**
		     * The base implementation of `_.pick` without support for individual
		     * property identifiers.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @returns {Object} Returns the new object.
		     */
		    function basePick(object, paths) {
		      return basePickBy(object, paths, function(value, path) {
		        return hasIn(object, path);
		      });
		    }

		    /**
		     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Object} object The source object.
		     * @param {string[]} paths The property paths to pick.
		     * @param {Function} predicate The function invoked per property.
		     * @returns {Object} Returns the new object.
		     */
		    function basePickBy(object, paths, predicate) {
		      var index = -1,
		          length = paths.length,
		          result = {};

		      while (++index < length) {
		        var path = paths[index],
		            value = baseGet(object, path);

		        if (predicate(value, path)) {
		          baseSet(result, castPath(path, object), value);
		        }
		      }
		      return result;
		    }

		    /**
		     * A specialized version of `baseProperty` which supports deep paths.
		     *
		     * @private
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     */
		    function basePropertyDeep(path) {
		      return function(object) {
		        return baseGet(object, path);
		      };
		    }

		    /**
		     * The base implementation of `_.pullAllBy` without support for iteratee
		     * shorthands.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAll(array, values, iteratee, comparator) {
		      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
		          index = -1,
		          length = values.length,
		          seen = array;

		      if (array === values) {
		        values = copyArray(values);
		      }
		      if (iteratee) {
		        seen = arrayMap(array, baseUnary(iteratee));
		      }
		      while (++index < length) {
		        var fromIndex = 0,
		            value = values[index],
		            computed = iteratee ? iteratee(value) : value;

		        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
		          if (seen !== array) {
		            splice.call(seen, fromIndex, 1);
		          }
		          splice.call(array, fromIndex, 1);
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.pullAt` without support for individual
		     * indexes or capturing the removed elements.
		     *
		     * @private
		     * @param {Array} array The array to modify.
		     * @param {number[]} indexes The indexes of elements to remove.
		     * @returns {Array} Returns `array`.
		     */
		    function basePullAt(array, indexes) {
		      var length = array ? indexes.length : 0,
		          lastIndex = length - 1;

		      while (length--) {
		        var index = indexes[length];
		        if (length == lastIndex || index !== previous) {
		          var previous = index;
		          if (isIndex(index)) {
		            splice.call(array, index, 1);
		          } else {
		            baseUnset(array, index);
		          }
		        }
		      }
		      return array;
		    }

		    /**
		     * The base implementation of `_.random` without support for returning
		     * floating-point numbers.
		     *
		     * @private
		     * @param {number} lower The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the random number.
		     */
		    function baseRandom(lower, upper) {
		      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
		    }

		    /**
		     * The base implementation of `_.range` and `_.rangeRight` which doesn't
		     * coerce arguments.
		     *
		     * @private
		     * @param {number} start The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} step The value to increment or decrement by.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the range of numbers.
		     */
		    function baseRange(start, end, step, fromRight) {
		      var index = -1,
		          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
		          result = Array(length);

		      while (length--) {
		        result[fromRight ? length : ++index] = start;
		        start += step;
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.repeat` which doesn't coerce arguments.
		     *
		     * @private
		     * @param {string} string The string to repeat.
		     * @param {number} n The number of times to repeat the string.
		     * @returns {string} Returns the repeated string.
		     */
		    function baseRepeat(string, n) {
		      var result = '';
		      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
		        return result;
		      }
		      // Leverage the exponentiation by squaring algorithm for a faster repeat.
		      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
		      do {
		        if (n % 2) {
		          result += string;
		        }
		        n = nativeFloor(n / 2);
		        if (n) {
		          string += string;
		        }
		      } while (n);

		      return result;
		    }

		    /**
		     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     */
		    function baseRest(func, start) {
		      return setToString(overRest(func, start, identity), func + '');
		    }

		    /**
		     * The base implementation of `_.sample`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     */
		    function baseSample(collection) {
		      return arraySample(values(collection));
		    }

		    /**
		     * The base implementation of `_.sampleSize` without param guards.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} n The number of elements to sample.
		     * @returns {Array} Returns the random elements.
		     */
		    function baseSampleSize(collection, n) {
		      var array = values(collection);
		      return shuffleSelf(array, baseClamp(n, 0, array.length));
		    }

		    /**
		     * The base implementation of `_.set`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseSet(object, path, value, customizer) {
		      if (!isObject(object)) {
		        return object;
		      }
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          lastIndex = length - 1,
		          nested = object;

		      while (nested != null && ++index < length) {
		        var key = toKey(path[index]),
		            newValue = value;

		        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
		          return object;
		        }

		        if (index != lastIndex) {
		          var objValue = nested[key];
		          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
		          if (newValue === undefined$1) {
		            newValue = isObject(objValue)
		              ? objValue
		              : (isIndex(path[index + 1]) ? [] : {});
		          }
		        }
		        assignValue(nested, key, newValue);
		        nested = nested[key];
		      }
		      return object;
		    }

		    /**
		     * The base implementation of `setData` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetData = !metaMap ? identity : function(func, data) {
		      metaMap.set(func, data);
		      return func;
		    };

		    /**
		     * The base implementation of `setToString` without support for hot loop shorting.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var baseSetToString = !defineProperty ? identity : function(func, string) {
		      return defineProperty(func, 'toString', {
		        'configurable': true,
		        'enumerable': false,
		        'value': constant(string),
		        'writable': true
		      });
		    };

		    /**
		     * The base implementation of `_.shuffle`.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     */
		    function baseShuffle(collection) {
		      return shuffleSelf(values(collection));
		    }

		    /**
		     * The base implementation of `_.slice` without an iteratee call guard.
		     *
		     * @private
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseSlice(array, start, end) {
		      var index = -1,
		          length = array.length;

		      if (start < 0) {
		        start = -start > length ? 0 : (length + start);
		      }
		      end = end > length ? length : end;
		      if (end < 0) {
		        end += length;
		      }
		      length = start > end ? 0 : ((end - start) >>> 0);
		      start >>>= 0;

		      var result = Array(length);
		      while (++index < length) {
		        result[index] = array[index + start];
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.some` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} predicate The function invoked per iteration.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     */
		    function baseSome(collection, predicate) {
		      var result;

		      baseEach(collection, function(value, index, collection) {
		        result = predicate(value, index, collection);
		        return !result;
		      });
		      return !!result;
		    }

		    /**
		     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
		     * performs a binary search of `array` to determine the index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndex(array, value, retHighest) {
		      var low = 0,
		          high = array == null ? low : array.length;

		      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
		        while (low < high) {
		          var mid = (low + high) >>> 1,
		              computed = array[mid];

		          if (computed !== null && !isSymbol(computed) &&
		              (retHighest ? (computed <= value) : (computed < value))) {
		            low = mid + 1;
		          } else {
		            high = mid;
		          }
		        }
		        return high;
		      }
		      return baseSortedIndexBy(array, value, identity, retHighest);
		    }

		    /**
		     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
		     * which invokes `iteratee` for `value` and each element of `array` to compute
		     * their sort ranking. The iteratee is invoked with one argument; (value).
		     *
		     * @private
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} iteratee The iteratee invoked per element.
		     * @param {boolean} [retHighest] Specify returning the highest qualified index.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     */
		    function baseSortedIndexBy(array, value, iteratee, retHighest) {
		      var low = 0,
		          high = array == null ? 0 : array.length;
		      if (high === 0) {
		        return 0;
		      }

		      value = iteratee(value);
		      var valIsNaN = value !== value,
		          valIsNull = value === null,
		          valIsSymbol = isSymbol(value),
		          valIsUndefined = value === undefined$1;

		      while (low < high) {
		        var mid = nativeFloor((low + high) / 2),
		            computed = iteratee(array[mid]),
		            othIsDefined = computed !== undefined$1,
		            othIsNull = computed === null,
		            othIsReflexive = computed === computed,
		            othIsSymbol = isSymbol(computed);

		        if (valIsNaN) {
		          var setLow = retHighest || othIsReflexive;
		        } else if (valIsUndefined) {
		          setLow = othIsReflexive && (retHighest || othIsDefined);
		        } else if (valIsNull) {
		          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
		        } else if (valIsSymbol) {
		          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
		        } else if (othIsNull || othIsSymbol) {
		          setLow = false;
		        } else {
		          setLow = retHighest ? (computed <= value) : (computed < value);
		        }
		        if (setLow) {
		          low = mid + 1;
		        } else {
		          high = mid;
		        }
		      }
		      return nativeMin(high, MAX_ARRAY_INDEX);
		    }

		    /**
		     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
		     * support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseSortedUniq(array, iteratee) {
		      var index = -1,
		          length = array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        if (!index || !eq(computed, seen)) {
		          var seen = computed;
		          result[resIndex++] = value === 0 ? 0 : value;
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.toNumber` which doesn't ensure correct
		     * conversions of binary, hexadecimal, or octal string values.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     */
		    function baseToNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      return +value;
		    }

		    /**
		     * The base implementation of `_.toString` which doesn't convert nullish
		     * values to empty strings.
		     *
		     * @private
		     * @param {*} value The value to process.
		     * @returns {string} Returns the string.
		     */
		    function baseToString(value) {
		      // Exit early for strings to avoid a performance hit in some environments.
		      if (typeof value == 'string') {
		        return value;
		      }
		      if (isArray(value)) {
		        // Recursively convert values (susceptible to call stack limits).
		        return arrayMap(value, baseToString) + '';
		      }
		      if (isSymbol(value)) {
		        return symbolToString ? symbolToString.call(value) : '';
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     */
		    function baseUniq(array, iteratee, comparator) {
		      var index = -1,
		          includes = arrayIncludes,
		          length = array.length,
		          isCommon = true,
		          result = [],
		          seen = result;

		      if (comparator) {
		        isCommon = false;
		        includes = arrayIncludesWith;
		      }
		      else if (length >= LARGE_ARRAY_SIZE) {
		        var set = iteratee ? null : createSet(array);
		        if (set) {
		          return setToArray(set);
		        }
		        isCommon = false;
		        includes = cacheHas;
		        seen = new SetCache;
		      }
		      else {
		        seen = iteratee ? [] : result;
		      }
		      outer:
		      while (++index < length) {
		        var value = array[index],
		            computed = iteratee ? iteratee(value) : value;

		        value = (comparator || value !== 0) ? value : 0;
		        if (isCommon && computed === computed) {
		          var seenIndex = seen.length;
		          while (seenIndex--) {
		            if (seen[seenIndex] === computed) {
		              continue outer;
		            }
		          }
		          if (iteratee) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		        else if (!includes(seen, computed, comparator)) {
		          if (seen !== result) {
		            seen.push(computed);
		          }
		          result.push(value);
		        }
		      }
		      return result;
		    }

		    /**
		     * The base implementation of `_.unset`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The property path to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     */
		    function baseUnset(object, path) {
		      path = castPath(path, object);
		      object = parent(object, path);
		      return object == null || delete object[toKey(last(path))];
		    }

		    /**
		     * The base implementation of `_.update`.
		     *
		     * @private
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to update.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize path creation.
		     * @returns {Object} Returns `object`.
		     */
		    function baseUpdate(object, path, updater, customizer) {
		      return baseSet(object, path, updater(baseGet(object, path)), customizer);
		    }

		    /**
		     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
		     * without support for iteratee shorthands.
		     *
		     * @private
		     * @param {Array} array The array to query.
		     * @param {Function} predicate The function invoked per iteration.
		     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function baseWhile(array, predicate, isDrop, fromRight) {
		      var length = array.length,
		          index = fromRight ? length : -1;

		      while ((fromRight ? index-- : ++index < length) &&
		        predicate(array[index], index, array)) {}

		      return isDrop
		        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
		        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
		    }

		    /**
		     * The base implementation of `wrapperValue` which returns the result of
		     * performing a sequence of actions on the unwrapped `value`, where each
		     * successive action is supplied the return value of the previous.
		     *
		     * @private
		     * @param {*} value The unwrapped value.
		     * @param {Array} actions Actions to perform to resolve the unwrapped value.
		     * @returns {*} Returns the resolved value.
		     */
		    function baseWrapperValue(value, actions) {
		      var result = value;
		      if (result instanceof LazyWrapper) {
		        result = result.value();
		      }
		      return arrayReduce(actions, function(result, action) {
		        return action.func.apply(action.thisArg, arrayPush([result], action.args));
		      }, result);
		    }

		    /**
		     * The base implementation of methods like `_.xor`, without support for
		     * iteratee shorthands, that accepts an array of arrays to inspect.
		     *
		     * @private
		     * @param {Array} arrays The arrays to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of values.
		     */
		    function baseXor(arrays, iteratee, comparator) {
		      var length = arrays.length;
		      if (length < 2) {
		        return length ? baseUniq(arrays[0]) : [];
		      }
		      var index = -1,
		          result = Array(length);

		      while (++index < length) {
		        var array = arrays[index],
		            othIndex = -1;

		        while (++othIndex < length) {
		          if (othIndex != index) {
		            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
		          }
		        }
		      }
		      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
		    }

		    /**
		     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
		     *
		     * @private
		     * @param {Array} props The property identifiers.
		     * @param {Array} values The property values.
		     * @param {Function} assignFunc The function to assign values.
		     * @returns {Object} Returns the new object.
		     */
		    function baseZipObject(props, values, assignFunc) {
		      var index = -1,
		          length = props.length,
		          valsLength = values.length,
		          result = {};

		      while (++index < length) {
		        var value = index < valsLength ? values[index] : undefined$1;
		        assignFunc(result, props[index], value);
		      }
		      return result;
		    }

		    /**
		     * Casts `value` to an empty array if it's not an array like object.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Array|Object} Returns the cast array-like object.
		     */
		    function castArrayLikeObject(value) {
		      return isArrayLikeObject(value) ? value : [];
		    }

		    /**
		     * Casts `value` to `identity` if it's not a function.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {Function} Returns cast function.
		     */
		    function castFunction(value) {
		      return typeof value == 'function' ? value : identity;
		    }

		    /**
		     * Casts `value` to a path array if it's not one.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {Array} Returns the cast property path array.
		     */
		    function castPath(value, object) {
		      if (isArray(value)) {
		        return value;
		      }
		      return isKey(value, object) ? [value] : stringToPath(toString(value));
		    }

		    /**
		     * A `baseRest` alias which can be replaced with `identity` by module
		     * replacement plugins.
		     *
		     * @private
		     * @type {Function}
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    var castRest = baseRest;

		    /**
		     * Casts `array` to a slice if it's needed.
		     *
		     * @private
		     * @param {Array} array The array to inspect.
		     * @param {number} start The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the cast slice.
		     */
		    function castSlice(array, start, end) {
		      var length = array.length;
		      end = end === undefined$1 ? length : end;
		      return (!start && end >= length) ? array : baseSlice(array, start, end);
		    }

		    /**
		     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
		     *
		     * @private
		     * @param {number|Object} id The timer id or timeout object of the timer to clear.
		     */
		    var clearTimeout = ctxClearTimeout || function(id) {
		      return root.clearTimeout(id);
		    };

		    /**
		     * Creates a clone of  `buffer`.
		     *
		     * @private
		     * @param {Buffer} buffer The buffer to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Buffer} Returns the cloned buffer.
		     */
		    function cloneBuffer(buffer, isDeep) {
		      if (isDeep) {
		        return buffer.slice();
		      }
		      var length = buffer.length,
		          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		      buffer.copy(result);
		      return result;
		    }

		    /**
		     * Creates a clone of `arrayBuffer`.
		     *
		     * @private
		     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		     * @returns {ArrayBuffer} Returns the cloned array buffer.
		     */
		    function cloneArrayBuffer(arrayBuffer) {
		      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		      return result;
		    }

		    /**
		     * Creates a clone of `dataView`.
		     *
		     * @private
		     * @param {Object} dataView The data view to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned data view.
		     */
		    function cloneDataView(dataView, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
		      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		    }

		    /**
		     * Creates a clone of `regexp`.
		     *
		     * @private
		     * @param {Object} regexp The regexp to clone.
		     * @returns {Object} Returns the cloned regexp.
		     */
		    function cloneRegExp(regexp) {
		      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
		      result.lastIndex = regexp.lastIndex;
		      return result;
		    }

		    /**
		     * Creates a clone of the `symbol` object.
		     *
		     * @private
		     * @param {Object} symbol The symbol object to clone.
		     * @returns {Object} Returns the cloned symbol object.
		     */
		    function cloneSymbol(symbol) {
		      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		    }

		    /**
		     * Creates a clone of `typedArray`.
		     *
		     * @private
		     * @param {Object} typedArray The typed array to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the cloned typed array.
		     */
		    function cloneTypedArray(typedArray, isDeep) {
		      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		    }

		    /**
		     * Compares values to sort them in ascending order.
		     *
		     * @private
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {number} Returns the sort order indicator for `value`.
		     */
		    function compareAscending(value, other) {
		      if (value !== other) {
		        var valIsDefined = value !== undefined$1,
		            valIsNull = value === null,
		            valIsReflexive = value === value,
		            valIsSymbol = isSymbol(value);

		        var othIsDefined = other !== undefined$1,
		            othIsNull = other === null,
		            othIsReflexive = other === other,
		            othIsSymbol = isSymbol(other);

		        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
		            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
		            (valIsNull && othIsDefined && othIsReflexive) ||
		            (!valIsDefined && othIsReflexive) ||
		            !valIsReflexive) {
		          return 1;
		        }
		        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
		            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
		            (othIsNull && valIsDefined && valIsReflexive) ||
		            (!othIsDefined && valIsReflexive) ||
		            !othIsReflexive) {
		          return -1;
		        }
		      }
		      return 0;
		    }

		    /**
		     * Used by `_.orderBy` to compare multiple properties of a value to another
		     * and stable sort them.
		     *
		     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
		     * specify an order of "desc" for descending or "asc" for ascending sort order
		     * of corresponding values.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {boolean[]|string[]} orders The order to sort by for each property.
		     * @returns {number} Returns the sort order indicator for `object`.
		     */
		    function compareMultiple(object, other, orders) {
		      var index = -1,
		          objCriteria = object.criteria,
		          othCriteria = other.criteria,
		          length = objCriteria.length,
		          ordersLength = orders.length;

		      while (++index < length) {
		        var result = compareAscending(objCriteria[index], othCriteria[index]);
		        if (result) {
		          if (index >= ordersLength) {
		            return result;
		          }
		          var order = orders[index];
		          return result * (order == 'desc' ? -1 : 1);
		        }
		      }
		      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
		      // that causes it, under certain circumstances, to provide the same value for
		      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
		      // for more details.
		      //
		      // This also ensures a stable sort in V8 and other engines.
		      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
		      return object.index - other.index;
		    }

		    /**
		     * Creates an array that is the composition of partially applied arguments,
		     * placeholders, and provided arguments into a single array of arguments.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to prepend to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgs(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersLength = holders.length,
		          leftIndex = -1,
		          leftLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(leftLength + rangeLength),
		          isUncurried = !isCurried;

		      while (++leftIndex < leftLength) {
		        result[leftIndex] = partials[leftIndex];
		      }
		      while (++argsIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[holders[argsIndex]] = args[argsIndex];
		        }
		      }
		      while (rangeLength--) {
		        result[leftIndex++] = args[argsIndex++];
		      }
		      return result;
		    }

		    /**
		     * This function is like `composeArgs` except that the arguments composition
		     * is tailored for `_.partialRight`.
		     *
		     * @private
		     * @param {Array} args The provided arguments.
		     * @param {Array} partials The arguments to append to those provided.
		     * @param {Array} holders The `partials` placeholder indexes.
		     * @params {boolean} [isCurried] Specify composing for a curried function.
		     * @returns {Array} Returns the new array of composed arguments.
		     */
		    function composeArgsRight(args, partials, holders, isCurried) {
		      var argsIndex = -1,
		          argsLength = args.length,
		          holdersIndex = -1,
		          holdersLength = holders.length,
		          rightIndex = -1,
		          rightLength = partials.length,
		          rangeLength = nativeMax(argsLength - holdersLength, 0),
		          result = Array(rangeLength + rightLength),
		          isUncurried = !isCurried;

		      while (++argsIndex < rangeLength) {
		        result[argsIndex] = args[argsIndex];
		      }
		      var offset = argsIndex;
		      while (++rightIndex < rightLength) {
		        result[offset + rightIndex] = partials[rightIndex];
		      }
		      while (++holdersIndex < holdersLength) {
		        if (isUncurried || argsIndex < argsLength) {
		          result[offset + holders[holdersIndex]] = args[argsIndex++];
		        }
		      }
		      return result;
		    }

		    /**
		     * Copies the values of `source` to `array`.
		     *
		     * @private
		     * @param {Array} source The array to copy values from.
		     * @param {Array} [array=[]] The array to copy values to.
		     * @returns {Array} Returns `array`.
		     */
		    function copyArray(source, array) {
		      var index = -1,
		          length = source.length;

		      array || (array = Array(length));
		      while (++index < length) {
		        array[index] = source[index];
		      }
		      return array;
		    }

		    /**
		     * Copies properties of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy properties from.
		     * @param {Array} props The property identifiers to copy.
		     * @param {Object} [object={}] The object to copy properties to.
		     * @param {Function} [customizer] The function to customize copied values.
		     * @returns {Object} Returns `object`.
		     */
		    function copyObject(source, props, object, customizer) {
		      var isNew = !object;
		      object || (object = {});

		      var index = -1,
		          length = props.length;

		      while (++index < length) {
		        var key = props[index];

		        var newValue = customizer
		          ? customizer(object[key], source[key], key, object, source)
		          : undefined$1;

		        if (newValue === undefined$1) {
		          newValue = source[key];
		        }
		        if (isNew) {
		          baseAssignValue(object, key, newValue);
		        } else {
		          assignValue(object, key, newValue);
		        }
		      }
		      return object;
		    }

		    /**
		     * Copies own symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbols(source, object) {
		      return copyObject(source, getSymbols(source), object);
		    }

		    /**
		     * Copies own and inherited symbols of `source` to `object`.
		     *
		     * @private
		     * @param {Object} source The object to copy symbols from.
		     * @param {Object} [object={}] The object to copy symbols to.
		     * @returns {Object} Returns `object`.
		     */
		    function copySymbolsIn(source, object) {
		      return copyObject(source, getSymbolsIn(source), object);
		    }

		    /**
		     * Creates a function like `_.groupBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} [initializer] The accumulator object initializer.
		     * @returns {Function} Returns the new aggregator function.
		     */
		    function createAggregator(setter, initializer) {
		      return function(collection, iteratee) {
		        var func = isArray(collection) ? arrayAggregator : baseAggregator,
		            accumulator = initializer ? initializer() : {};

		        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
		      };
		    }

		    /**
		     * Creates a function like `_.assign`.
		     *
		     * @private
		     * @param {Function} assigner The function to assign values.
		     * @returns {Function} Returns the new assigner function.
		     */
		    function createAssigner(assigner) {
		      return baseRest(function(object, sources) {
		        var index = -1,
		            length = sources.length,
		            customizer = length > 1 ? sources[length - 1] : undefined$1,
		            guard = length > 2 ? sources[2] : undefined$1;

		        customizer = (assigner.length > 3 && typeof customizer == 'function')
		          ? (length--, customizer)
		          : undefined$1;

		        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		          customizer = length < 3 ? undefined$1 : customizer;
		          length = 1;
		        }
		        object = Object(object);
		        while (++index < length) {
		          var source = sources[index];
		          if (source) {
		            assigner(object, source, index, customizer);
		          }
		        }
		        return object;
		      });
		    }

		    /**
		     * Creates a `baseEach` or `baseEachRight` function.
		     *
		     * @private
		     * @param {Function} eachFunc The function to iterate over a collection.
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseEach(eachFunc, fromRight) {
		      return function(collection, iteratee) {
		        if (collection == null) {
		          return collection;
		        }
		        if (!isArrayLike(collection)) {
		          return eachFunc(collection, iteratee);
		        }
		        var length = collection.length,
		            index = fromRight ? length : -1,
		            iterable = Object(collection);

		        while ((fromRight ? index-- : ++index < length)) {
		          if (iteratee(iterable[index], index, iterable) === false) {
		            break;
		          }
		        }
		        return collection;
		      };
		    }

		    /**
		     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new base function.
		     */
		    function createBaseFor(fromRight) {
		      return function(object, iteratee, keysFunc) {
		        var index = -1,
		            iterable = Object(object),
		            props = keysFunc(object),
		            length = props.length;

		        while (length--) {
		          var key = props[fromRight ? length : ++index];
		          if (iteratee(iterable[key], key, iterable) === false) {
		            break;
		          }
		        }
		        return object;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the optional `this`
		     * binding of `thisArg`.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createBind(func, bitmask, thisArg) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return fn.apply(isBind ? thisArg : this, arguments);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.lowerFirst`.
		     *
		     * @private
		     * @param {string} methodName The name of the `String` case method to use.
		     * @returns {Function} Returns the new case function.
		     */
		    function createCaseFirst(methodName) {
		      return function(string) {
		        string = toString(string);

		        var strSymbols = hasUnicode(string)
		          ? stringToArray(string)
		          : undefined$1;

		        var chr = strSymbols
		          ? strSymbols[0]
		          : string.charAt(0);

		        var trailing = strSymbols
		          ? castSlice(strSymbols, 1).join('')
		          : string.slice(1);

		        return chr[methodName]() + trailing;
		      };
		    }

		    /**
		     * Creates a function like `_.camelCase`.
		     *
		     * @private
		     * @param {Function} callback The function to combine each word.
		     * @returns {Function} Returns the new compounder function.
		     */
		    function createCompounder(callback) {
		      return function(string) {
		        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
		      };
		    }

		    /**
		     * Creates a function that produces an instance of `Ctor` regardless of
		     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
		     *
		     * @private
		     * @param {Function} Ctor The constructor to wrap.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCtor(Ctor) {
		      return function() {
		        // Use a `switch` statement to work with class constructors. See
		        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
		        // for more details.
		        var args = arguments;
		        switch (args.length) {
		          case 0: return new Ctor;
		          case 1: return new Ctor(args[0]);
		          case 2: return new Ctor(args[0], args[1]);
		          case 3: return new Ctor(args[0], args[1], args[2]);
		          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
		          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
		          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
		          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
		        }
		        var thisBinding = baseCreate(Ctor.prototype),
		            result = Ctor.apply(thisBinding, args);

		        // Mimic the constructor's `return` behavior.
		        // See https://es5.github.io/#x13.2.2 for more details.
		        return isObject(result) ? result : thisBinding;
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to enable currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {number} arity The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createCurry(func, bitmask, arity) {
		      var Ctor = createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length,
		            placeholder = getHolder(wrapper);

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
		          ? []
		          : replaceHolders(args, placeholder);

		        length -= holders.length;
		        if (length < arity) {
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
		            args, holders, undefined$1, undefined$1, arity - length);
		        }
		        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
		        return apply(fn, this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.find` or `_.findLast` function.
		     *
		     * @private
		     * @param {Function} findIndexFunc The function to find the collection index.
		     * @returns {Function} Returns the new find function.
		     */
		    function createFind(findIndexFunc) {
		      return function(collection, predicate, fromIndex) {
		        var iterable = Object(collection);
		        if (!isArrayLike(collection)) {
		          var iteratee = getIteratee(predicate, 3);
		          collection = keys(collection);
		          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
		        }
		        var index = findIndexFunc(collection, predicate, fromIndex);
		        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
		      };
		    }

		    /**
		     * Creates a `_.flow` or `_.flowRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new flow function.
		     */
		    function createFlow(fromRight) {
		      return flatRest(function(funcs) {
		        var length = funcs.length,
		            index = length,
		            prereq = LodashWrapper.prototype.thru;

		        if (fromRight) {
		          funcs.reverse();
		        }
		        while (index--) {
		          var func = funcs[index];
		          if (typeof func != 'function') {
		            throw new TypeError(FUNC_ERROR_TEXT);
		          }
		          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
		            var wrapper = new LodashWrapper([], true);
		          }
		        }
		        index = wrapper ? index : length;
		        while (++index < length) {
		          func = funcs[index];

		          var funcName = getFuncName(func),
		              data = funcName == 'wrapper' ? getData(func) : undefined$1;

		          if (data && isLaziable(data[0]) &&
		                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
		                !data[4].length && data[9] == 1
		              ) {
		            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
		          } else {
		            wrapper = (func.length == 1 && isLaziable(func))
		              ? wrapper[funcName]()
		              : wrapper.thru(func);
		          }
		        }
		        return function() {
		          var args = arguments,
		              value = args[0];

		          if (wrapper && args.length == 1 && isArray(value)) {
		            return wrapper.plant(value).value();
		          }
		          var index = 0,
		              result = length ? funcs[index].apply(this, args) : value;

		          while (++index < length) {
		            result = funcs[index].call(this, result);
		          }
		          return result;
		        };
		      });
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with optional `this`
		     * binding of `thisArg`, partial application, and currying.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [partialsRight] The arguments to append to those provided
		     *  to the new function.
		     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
		      var isAry = bitmask & WRAP_ARY_FLAG,
		          isBind = bitmask & WRAP_BIND_FLAG,
		          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
		          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
		          isFlip = bitmask & WRAP_FLIP_FLAG,
		          Ctor = isBindKey ? undefined$1 : createCtor(func);

		      function wrapper() {
		        var length = arguments.length,
		            args = Array(length),
		            index = length;

		        while (index--) {
		          args[index] = arguments[index];
		        }
		        if (isCurried) {
		          var placeholder = getHolder(wrapper),
		              holdersCount = countHolders(args, placeholder);
		        }
		        if (partials) {
		          args = composeArgs(args, partials, holders, isCurried);
		        }
		        if (partialsRight) {
		          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
		        }
		        length -= holdersCount;
		        if (isCurried && length < arity) {
		          var newHolders = replaceHolders(args, placeholder);
		          return createRecurry(
		            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
		            args, newHolders, argPos, ary, arity - length
		          );
		        }
		        var thisBinding = isBind ? thisArg : this,
		            fn = isBindKey ? thisBinding[func] : func;

		        length = args.length;
		        if (argPos) {
		          args = reorder(args, argPos);
		        } else if (isFlip && length > 1) {
		          args.reverse();
		        }
		        if (isAry && ary < length) {
		          args.length = ary;
		        }
		        if (this && this !== root && this instanceof wrapper) {
		          fn = Ctor || createCtor(fn);
		        }
		        return fn.apply(thisBinding, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a function like `_.invertBy`.
		     *
		     * @private
		     * @param {Function} setter The function to set accumulator values.
		     * @param {Function} toIteratee The function to resolve iteratees.
		     * @returns {Function} Returns the new inverter function.
		     */
		    function createInverter(setter, toIteratee) {
		      return function(object, iteratee) {
		        return baseInverter(object, setter, toIteratee(iteratee), {});
		      };
		    }

		    /**
		     * Creates a function that performs a mathematical operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @param {number} [defaultValue] The value used for `undefined` arguments.
		     * @returns {Function} Returns the new mathematical operation function.
		     */
		    function createMathOperation(operator, defaultValue) {
		      return function(value, other) {
		        var result;
		        if (value === undefined$1 && other === undefined$1) {
		          return defaultValue;
		        }
		        if (value !== undefined$1) {
		          result = value;
		        }
		        if (other !== undefined$1) {
		          if (result === undefined$1) {
		            return other;
		          }
		          if (typeof value == 'string' || typeof other == 'string') {
		            value = baseToString(value);
		            other = baseToString(other);
		          } else {
		            value = baseToNumber(value);
		            other = baseToNumber(other);
		          }
		          result = operator(value, other);
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function like `_.over`.
		     *
		     * @private
		     * @param {Function} arrayFunc The function to iterate over iteratees.
		     * @returns {Function} Returns the new over function.
		     */
		    function createOver(arrayFunc) {
		      return flatRest(function(iteratees) {
		        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
		        return baseRest(function(args) {
		          var thisArg = this;
		          return arrayFunc(iteratees, function(iteratee) {
		            return apply(iteratee, thisArg, args);
		          });
		        });
		      });
		    }

		    /**
		     * Creates the padding for `string` based on `length`. The `chars` string
		     * is truncated if the number of characters exceeds `length`.
		     *
		     * @private
		     * @param {number} length The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padding for `string`.
		     */
		    function createPadding(length, chars) {
		      chars = chars === undefined$1 ? ' ' : baseToString(chars);

		      var charsLength = chars.length;
		      if (charsLength < 2) {
		        return charsLength ? baseRepeat(chars, length) : chars;
		      }
		      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
		      return hasUnicode(chars)
		        ? castSlice(stringToArray(result), 0, length).join('')
		        : result.slice(0, length);
		    }

		    /**
		     * Creates a function that wraps `func` to invoke it with the `this` binding
		     * of `thisArg` and `partials` prepended to the arguments it receives.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {Array} partials The arguments to prepend to those provided to
		     *  the new function.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createPartial(func, bitmask, thisArg, partials) {
		      var isBind = bitmask & WRAP_BIND_FLAG,
		          Ctor = createCtor(func);

		      function wrapper() {
		        var argsIndex = -1,
		            argsLength = arguments.length,
		            leftIndex = -1,
		            leftLength = partials.length,
		            args = Array(leftLength + argsLength),
		            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

		        while (++leftIndex < leftLength) {
		          args[leftIndex] = partials[leftIndex];
		        }
		        while (argsLength--) {
		          args[leftIndex++] = arguments[++argsIndex];
		        }
		        return apply(fn, isBind ? thisArg : this, args);
		      }
		      return wrapper;
		    }

		    /**
		     * Creates a `_.range` or `_.rangeRight` function.
		     *
		     * @private
		     * @param {boolean} [fromRight] Specify iterating from right to left.
		     * @returns {Function} Returns the new range function.
		     */
		    function createRange(fromRight) {
		      return function(start, end, step) {
		        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
		          end = step = undefined$1;
		        }
		        // Ensure the sign of `-0` is preserved.
		        start = toFinite(start);
		        if (end === undefined$1) {
		          end = start;
		          start = 0;
		        } else {
		          end = toFinite(end);
		        }
		        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
		        return baseRange(start, end, step, fromRight);
		      };
		    }

		    /**
		     * Creates a function that performs a relational operation on two values.
		     *
		     * @private
		     * @param {Function} operator The function to perform the operation.
		     * @returns {Function} Returns the new relational operation function.
		     */
		    function createRelationalOperation(operator) {
		      return function(value, other) {
		        if (!(typeof value == 'string' && typeof other == 'string')) {
		          value = toNumber(value);
		          other = toNumber(other);
		        }
		        return operator(value, other);
		      };
		    }

		    /**
		     * Creates a function that wraps `func` to continue currying.
		     *
		     * @private
		     * @param {Function} func The function to wrap.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @param {Function} wrapFunc The function to create the `func` wrapper.
		     * @param {*} placeholder The placeholder value.
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to prepend to those provided to
		     *  the new function.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
		      var isCurry = bitmask & WRAP_CURRY_FLAG,
		          newHolders = isCurry ? holders : undefined$1,
		          newHoldersRight = isCurry ? undefined$1 : holders,
		          newPartials = isCurry ? partials : undefined$1,
		          newPartialsRight = isCurry ? undefined$1 : partials;

		      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
		      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

		      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
		        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
		      }
		      var newData = [
		        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
		        newHoldersRight, argPos, ary, arity
		      ];

		      var result = wrapFunc.apply(undefined$1, newData);
		      if (isLaziable(func)) {
		        setData(result, newData);
		      }
		      result.placeholder = placeholder;
		      return setWrapToString(result, func, bitmask);
		    }

		    /**
		     * Creates a function like `_.round`.
		     *
		     * @private
		     * @param {string} methodName The name of the `Math` method to use when rounding.
		     * @returns {Function} Returns the new round function.
		     */
		    function createRound(methodName) {
		      var func = Math[methodName];
		      return function(number, precision) {
		        number = toNumber(number);
		        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
		        if (precision && nativeIsFinite(number)) {
		          // Shift with exponential notation to avoid floating-point issues.
		          // See [MDN](https://mdn.io/round#Examples) for more details.
		          var pair = (toString(number) + 'e').split('e'),
		              value = func(pair[0] + 'e' + (+pair[1] + precision));

		          pair = (toString(value) + 'e').split('e');
		          return +(pair[0] + 'e' + (+pair[1] - precision));
		        }
		        return func(number);
		      };
		    }

		    /**
		     * Creates a set object of `values`.
		     *
		     * @private
		     * @param {Array} values The values to add to the set.
		     * @returns {Object} Returns the new set.
		     */
		    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
		      return new Set(values);
		    };

		    /**
		     * Creates a `_.toPairs` or `_.toPairsIn` function.
		     *
		     * @private
		     * @param {Function} keysFunc The function to get the keys of a given object.
		     * @returns {Function} Returns the new pairs function.
		     */
		    function createToPairs(keysFunc) {
		      return function(object) {
		        var tag = getTag(object);
		        if (tag == mapTag) {
		          return mapToArray(object);
		        }
		        if (tag == setTag) {
		          return setToPairs(object);
		        }
		        return baseToPairs(object, keysFunc(object));
		      };
		    }

		    /**
		     * Creates a function that either curries or invokes `func` with optional
		     * `this` binding and partially applied arguments.
		     *
		     * @private
		     * @param {Function|string} func The function or method name to wrap.
		     * @param {number} bitmask The bitmask flags.
		     *    1 - `_.bind`
		     *    2 - `_.bindKey`
		     *    4 - `_.curry` or `_.curryRight` of a bound function
		     *    8 - `_.curry`
		     *   16 - `_.curryRight`
		     *   32 - `_.partial`
		     *   64 - `_.partialRight`
		     *  128 - `_.rearg`
		     *  256 - `_.ary`
		     *  512 - `_.flip`
		     * @param {*} [thisArg] The `this` binding of `func`.
		     * @param {Array} [partials] The arguments to be partially applied.
		     * @param {Array} [holders] The `partials` placeholder indexes.
		     * @param {Array} [argPos] The argument positions of the new function.
		     * @param {number} [ary] The arity cap of `func`.
		     * @param {number} [arity] The arity of `func`.
		     * @returns {Function} Returns the new wrapped function.
		     */
		    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
		      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
		      if (!isBindKey && typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var length = partials ? partials.length : 0;
		      if (!length) {
		        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
		        partials = holders = undefined$1;
		      }
		      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
		      arity = arity === undefined$1 ? arity : toInteger(arity);
		      length -= holders ? holders.length : 0;

		      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
		        var partialsRight = partials,
		            holdersRight = holders;

		        partials = holders = undefined$1;
		      }
		      var data = isBindKey ? undefined$1 : getData(func);

		      var newData = [
		        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
		        argPos, ary, arity
		      ];

		      if (data) {
		        mergeData(newData, data);
		      }
		      func = newData[0];
		      bitmask = newData[1];
		      thisArg = newData[2];
		      partials = newData[3];
		      holders = newData[4];
		      arity = newData[9] = newData[9] === undefined$1
		        ? (isBindKey ? 0 : func.length)
		        : nativeMax(newData[9] - length, 0);

		      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
		        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
		      }
		      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
		        var result = createBind(func, bitmask, thisArg);
		      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
		        result = createCurry(func, bitmask, arity);
		      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
		        result = createPartial(func, bitmask, thisArg, partials);
		      } else {
		        result = createHybrid.apply(undefined$1, newData);
		      }
		      var setter = data ? baseSetData : setData;
		      return setWrapToString(setter(result, newData), func, bitmask);
		    }

		    /**
		     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
		     * of source objects to the destination object for all destination properties
		     * that resolve to `undefined`.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to assign.
		     * @param {Object} object The parent object of `objValue`.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsAssignIn(objValue, srcValue, key, object) {
		      if (objValue === undefined$1 ||
		          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		        return srcValue;
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
		     * objects into destination objects that are passed thru.
		     *
		     * @private
		     * @param {*} objValue The destination value.
		     * @param {*} srcValue The source value.
		     * @param {string} key The key of the property to merge.
		     * @param {Object} object The parent object of `objValue`.
		     * @param {Object} source The parent object of `srcValue`.
		     * @param {Object} [stack] Tracks traversed source values and their merged
		     *  counterparts.
		     * @returns {*} Returns the value to assign.
		     */
		    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
		      if (isObject(objValue) && isObject(srcValue)) {
		        // Recursively merge objects and arrays (susceptible to call stack limits).
		        stack.set(srcValue, objValue);
		        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
		        stack['delete'](srcValue);
		      }
		      return objValue;
		    }

		    /**
		     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
		     * objects.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @param {string} key The key of the property to inspect.
		     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
		     */
		    function customOmitClone(value) {
		      return isPlainObject(value) ? undefined$1 : value;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for arrays with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Array} array The array to compare.
		     * @param {Array} other The other array to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `array` and `other` objects.
		     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		     */
		    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          arrLength = array.length,
		          othLength = other.length;

		      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		        return false;
		      }
		      // Check that cyclic values are equal.
		      var arrStacked = stack.get(array);
		      var othStacked = stack.get(other);
		      if (arrStacked && othStacked) {
		        return arrStacked == other && othStacked == array;
		      }
		      var index = -1,
		          result = true,
		          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

		      stack.set(array, other);
		      stack.set(other, array);

		      // Ignore non-index properties.
		      while (++index < arrLength) {
		        var arrValue = array[index],
		            othValue = other[index];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, arrValue, index, other, array, stack)
		            : customizer(arrValue, othValue, index, array, other, stack);
		        }
		        if (compared !== undefined$1) {
		          if (compared) {
		            continue;
		          }
		          result = false;
		          break;
		        }
		        // Recursively compare arrays (susceptible to call stack limits).
		        if (seen) {
		          if (!arraySome(other, function(othValue, othIndex) {
		                if (!cacheHas(seen, othIndex) &&
		                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		                  return seen.push(othIndex);
		                }
		              })) {
		            result = false;
		            break;
		          }
		        } else if (!(
		              arrValue === othValue ||
		                equalFunc(arrValue, othValue, bitmask, customizer, stack)
		            )) {
		          result = false;
		          break;
		        }
		      }
		      stack['delete'](array);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for comparing objects of
		     * the same `toStringTag`.
		     *
		     * **Note:** This function only supports comparing values with tags of
		     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {string} tag The `toStringTag` of the objects to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
		      switch (tag) {
		        case dataViewTag:
		          if ((object.byteLength != other.byteLength) ||
		              (object.byteOffset != other.byteOffset)) {
		            return false;
		          }
		          object = object.buffer;
		          other = other.buffer;

		        case arrayBufferTag:
		          if ((object.byteLength != other.byteLength) ||
		              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		            return false;
		          }
		          return true;

		        case boolTag:
		        case dateTag:
		        case numberTag:
		          // Coerce booleans to `1` or `0` and dates to milliseconds.
		          // Invalid dates are coerced to `NaN`.
		          return eq(+object, +other);

		        case errorTag:
		          return object.name == other.name && object.message == other.message;

		        case regexpTag:
		        case stringTag:
		          // Coerce regexes to strings and treat strings, primitives and objects,
		          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		          // for more details.
		          return object == (other + '');

		        case mapTag:
		          var convert = mapToArray;

		        case setTag:
		          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
		          convert || (convert = setToArray);

		          if (object.size != other.size && !isPartial) {
		            return false;
		          }
		          // Assume cyclic values are equal.
		          var stacked = stack.get(object);
		          if (stacked) {
		            return stacked == other;
		          }
		          bitmask |= COMPARE_UNORDERED_FLAG;

		          // Recursively compare objects (susceptible to call stack limits).
		          stack.set(object, other);
		          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
		          stack['delete'](object);
		          return result;

		        case symbolTag:
		          if (symbolValueOf) {
		            return symbolValueOf.call(object) == symbolValueOf.call(other);
		          }
		      }
		      return false;
		    }

		    /**
		     * A specialized version of `baseIsEqualDeep` for objects with support for
		     * partial deep comparisons.
		     *
		     * @private
		     * @param {Object} object The object to compare.
		     * @param {Object} other The other object to compare.
		     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		     * @param {Function} customizer The function to customize comparisons.
		     * @param {Function} equalFunc The function to determine equivalents of values.
		     * @param {Object} stack Tracks traversed `object` and `other` objects.
		     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		     */
		    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		          objProps = getAllKeys(object),
		          objLength = objProps.length,
		          othProps = getAllKeys(other),
		          othLength = othProps.length;

		      if (objLength != othLength && !isPartial) {
		        return false;
		      }
		      var index = objLength;
		      while (index--) {
		        var key = objProps[index];
		        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		          return false;
		        }
		      }
		      // Check that cyclic values are equal.
		      var objStacked = stack.get(object);
		      var othStacked = stack.get(other);
		      if (objStacked && othStacked) {
		        return objStacked == other && othStacked == object;
		      }
		      var result = true;
		      stack.set(object, other);
		      stack.set(other, object);

		      var skipCtor = isPartial;
		      while (++index < objLength) {
		        key = objProps[index];
		        var objValue = object[key],
		            othValue = other[key];

		        if (customizer) {
		          var compared = isPartial
		            ? customizer(othValue, objValue, key, other, object, stack)
		            : customizer(objValue, othValue, key, object, other, stack);
		        }
		        // Recursively compare objects (susceptible to call stack limits).
		        if (!(compared === undefined$1
		              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
		              : compared
		            )) {
		          result = false;
		          break;
		        }
		        skipCtor || (skipCtor = key == 'constructor');
		      }
		      if (result && !skipCtor) {
		        var objCtor = object.constructor,
		            othCtor = other.constructor;

		        // Non `Object` object instances with different constructors are not equal.
		        if (objCtor != othCtor &&
		            ('constructor' in object && 'constructor' in other) &&
		            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
		              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		          result = false;
		        }
		      }
		      stack['delete'](object);
		      stack['delete'](other);
		      return result;
		    }

		    /**
		     * A specialized version of `baseRest` which flattens the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @returns {Function} Returns the new function.
		     */
		    function flatRest(func) {
		      return setToString(overRest(func, undefined$1, flatten), func + '');
		    }

		    /**
		     * Creates an array of own enumerable property names and symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeys(object) {
		      return baseGetAllKeys(object, keys, getSymbols);
		    }

		    /**
		     * Creates an array of own and inherited enumerable property names and
		     * symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names and symbols.
		     */
		    function getAllKeysIn(object) {
		      return baseGetAllKeys(object, keysIn, getSymbolsIn);
		    }

		    /**
		     * Gets metadata for `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {*} Returns the metadata for `func`.
		     */
		    var getData = !metaMap ? noop : function(func) {
		      return metaMap.get(func);
		    };

		    /**
		     * Gets the name of `func`.
		     *
		     * @private
		     * @param {Function} func The function to query.
		     * @returns {string} Returns the function name.
		     */
		    function getFuncName(func) {
		      var result = (func.name + ''),
		          array = realNames[result],
		          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

		      while (length--) {
		        var data = array[length],
		            otherFunc = data.func;
		        if (otherFunc == null || otherFunc == func) {
		          return data.name;
		        }
		      }
		      return result;
		    }

		    /**
		     * Gets the argument placeholder value for `func`.
		     *
		     * @private
		     * @param {Function} func The function to inspect.
		     * @returns {*} Returns the placeholder value.
		     */
		    function getHolder(func) {
		      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
		      return object.placeholder;
		    }

		    /**
		     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
		     * this function returns the custom method, otherwise it returns `baseIteratee`.
		     * If arguments are provided, the chosen function is invoked with them and
		     * its result is returned.
		     *
		     * @private
		     * @param {*} [value] The value to convert to an iteratee.
		     * @param {number} [arity] The arity of the created iteratee.
		     * @returns {Function} Returns the chosen function or its result.
		     */
		    function getIteratee() {
		      var result = lodash.iteratee || iteratee;
		      result = result === iteratee ? baseIteratee : result;
		      return arguments.length ? result(arguments[0], arguments[1]) : result;
		    }

		    /**
		     * Gets the data for `map`.
		     *
		     * @private
		     * @param {Object} map The map to query.
		     * @param {string} key The reference key.
		     * @returns {*} Returns the map data.
		     */
		    function getMapData(map, key) {
		      var data = map.__data__;
		      return isKeyable(key)
		        ? data[typeof key == 'string' ? 'string' : 'hash']
		        : data.map;
		    }

		    /**
		     * Gets the property names, values, and compare flags of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the match data of `object`.
		     */
		    function getMatchData(object) {
		      var result = keys(object),
		          length = result.length;

		      while (length--) {
		        var key = result[length],
		            value = object[key];

		        result[length] = [key, value, isStrictComparable(value)];
		      }
		      return result;
		    }

		    /**
		     * Gets the native function at `key` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the method to get.
		     * @returns {*} Returns the function if it's native, else `undefined`.
		     */
		    function getNative(object, key) {
		      var value = getValue(object, key);
		      return baseIsNative(value) ? value : undefined$1;
		    }

		    /**
		     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the raw `toStringTag`.
		     */
		    function getRawTag(value) {
		      var isOwn = hasOwnProperty.call(value, symToStringTag),
		          tag = value[symToStringTag];

		      try {
		        value[symToStringTag] = undefined$1;
		        var unmasked = true;
		      } catch (e) {}

		      var result = nativeObjectToString.call(value);
		      if (unmasked) {
		        if (isOwn) {
		          value[symToStringTag] = tag;
		        } else {
		          delete value[symToStringTag];
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates an array of the own enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
		      if (object == null) {
		        return [];
		      }
		      object = Object(object);
		      return arrayFilter(nativeGetSymbols(object), function(symbol) {
		        return propertyIsEnumerable.call(object, symbol);
		      });
		    };

		    /**
		     * Creates an array of the own and inherited enumerable symbols of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of symbols.
		     */
		    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
		      var result = [];
		      while (object) {
		        arrayPush(result, getSymbols(object));
		        object = getPrototype(object);
		      }
		      return result;
		    };

		    /**
		     * Gets the `toStringTag` of `value`.
		     *
		     * @private
		     * @param {*} value The value to query.
		     * @returns {string} Returns the `toStringTag`.
		     */
		    var getTag = baseGetTag;

		    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
		        (Map && getTag(new Map) != mapTag) ||
		        (Promise && getTag(Promise.resolve()) != promiseTag) ||
		        (Set && getTag(new Set) != setTag) ||
		        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
		      getTag = function(value) {
		        var result = baseGetTag(value),
		            Ctor = result == objectTag ? value.constructor : undefined$1,
		            ctorString = Ctor ? toSource(Ctor) : '';

		        if (ctorString) {
		          switch (ctorString) {
		            case dataViewCtorString: return dataViewTag;
		            case mapCtorString: return mapTag;
		            case promiseCtorString: return promiseTag;
		            case setCtorString: return setTag;
		            case weakMapCtorString: return weakMapTag;
		          }
		        }
		        return result;
		      };
		    }

		    /**
		     * Gets the view, applying any `transforms` to the `start` and `end` positions.
		     *
		     * @private
		     * @param {number} start The start of the view.
		     * @param {number} end The end of the view.
		     * @param {Array} transforms The transformations to apply to the view.
		     * @returns {Object} Returns an object containing the `start` and `end`
		     *  positions of the view.
		     */
		    function getView(start, end, transforms) {
		      var index = -1,
		          length = transforms.length;

		      while (++index < length) {
		        var data = transforms[index],
		            size = data.size;

		        switch (data.type) {
		          case 'drop':      start += size; break;
		          case 'dropRight': end -= size; break;
		          case 'take':      end = nativeMin(end, start + size); break;
		          case 'takeRight': start = nativeMax(start, end - size); break;
		        }
		      }
		      return { 'start': start, 'end': end };
		    }

		    /**
		     * Extracts wrapper details from the `source` body comment.
		     *
		     * @private
		     * @param {string} source The source to inspect.
		     * @returns {Array} Returns the wrapper details.
		     */
		    function getWrapDetails(source) {
		      var match = source.match(reWrapDetails);
		      return match ? match[1].split(reSplitDetails) : [];
		    }

		    /**
		     * Checks if `path` exists on `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @param {Function} hasFunc The function to check properties.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     */
		    function hasPath(object, path, hasFunc) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length,
		          result = false;

		      while (++index < length) {
		        var key = toKey(path[index]);
		        if (!(result = object != null && hasFunc(object, key))) {
		          break;
		        }
		        object = object[key];
		      }
		      if (result || ++index != length) {
		        return result;
		      }
		      length = object == null ? 0 : object.length;
		      return !!length && isLength(length) && isIndex(key, length) &&
		        (isArray(object) || isArguments(object));
		    }

		    /**
		     * Initializes an array clone.
		     *
		     * @private
		     * @param {Array} array The array to clone.
		     * @returns {Array} Returns the initialized clone.
		     */
		    function initCloneArray(array) {
		      var length = array.length,
		          result = new array.constructor(length);

		      // Add properties assigned by `RegExp#exec`.
		      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
		        result.index = array.index;
		        result.input = array.input;
		      }
		      return result;
		    }

		    /**
		     * Initializes an object clone.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneObject(object) {
		      return (typeof object.constructor == 'function' && !isPrototype(object))
		        ? baseCreate(getPrototype(object))
		        : {};
		    }

		    /**
		     * Initializes an object clone based on its `toStringTag`.
		     *
		     * **Note:** This function only supports cloning values with tags of
		     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
		     *
		     * @private
		     * @param {Object} object The object to clone.
		     * @param {string} tag The `toStringTag` of the object to clone.
		     * @param {boolean} [isDeep] Specify a deep clone.
		     * @returns {Object} Returns the initialized clone.
		     */
		    function initCloneByTag(object, tag, isDeep) {
		      var Ctor = object.constructor;
		      switch (tag) {
		        case arrayBufferTag:
		          return cloneArrayBuffer(object);

		        case boolTag:
		        case dateTag:
		          return new Ctor(+object);

		        case dataViewTag:
		          return cloneDataView(object, isDeep);

		        case float32Tag: case float64Tag:
		        case int8Tag: case int16Tag: case int32Tag:
		        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
		          return cloneTypedArray(object, isDeep);

		        case mapTag:
		          return new Ctor;

		        case numberTag:
		        case stringTag:
		          return new Ctor(object);

		        case regexpTag:
		          return cloneRegExp(object);

		        case setTag:
		          return new Ctor;

		        case symbolTag:
		          return cloneSymbol(object);
		      }
		    }

		    /**
		     * Inserts wrapper `details` in a comment at the top of the `source` body.
		     *
		     * @private
		     * @param {string} source The source to modify.
		     * @returns {Array} details The details to insert.
		     * @returns {string} Returns the modified source.
		     */
		    function insertWrapDetails(source, details) {
		      var length = details.length;
		      if (!length) {
		        return source;
		      }
		      var lastIndex = length - 1;
		      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
		      details = details.join(length > 2 ? ', ' : ' ');
		      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
		    }

		    /**
		     * Checks if `value` is a flattenable `arguments` object or array.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
		     */
		    function isFlattenable(value) {
		      return isArray(value) || isArguments(value) ||
		        !!(spreadableSymbol && value && value[spreadableSymbol]);
		    }

		    /**
		     * Checks if `value` is a valid array-like index.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		     */
		    function isIndex(value, length) {
		      var type = typeof value;
		      length = length == null ? MAX_SAFE_INTEGER : length;

		      return !!length &&
		        (type == 'number' ||
		          (type != 'symbol' && reIsUint.test(value))) &&
		            (value > -1 && value % 1 == 0 && value < length);
		    }

		    /**
		     * Checks if the given arguments are from an iteratee call.
		     *
		     * @private
		     * @param {*} value The potential iteratee value argument.
		     * @param {*} index The potential iteratee index or key argument.
		     * @param {*} object The potential iteratee object argument.
		     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		     *  else `false`.
		     */
		    function isIterateeCall(value, index, object) {
		      if (!isObject(object)) {
		        return false;
		      }
		      var type = typeof index;
		      if (type == 'number'
		            ? (isArrayLike(object) && isIndex(index, object.length))
		            : (type == 'string' && index in object)
		          ) {
		        return eq(object[index], value);
		      }
		      return false;
		    }

		    /**
		     * Checks if `value` is a property name and not a property path.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @param {Object} [object] The object to query keys on.
		     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
		     */
		    function isKey(value, object) {
		      if (isArray(value)) {
		        return false;
		      }
		      var type = typeof value;
		      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
		          value == null || isSymbol(value)) {
		        return true;
		      }
		      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
		        (object != null && value in Object(object));
		    }

		    /**
		     * Checks if `value` is suitable for use as unique object key.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		     */
		    function isKeyable(value) {
		      var type = typeof value;
		      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		        ? (value !== '__proto__')
		        : (value === null);
		    }

		    /**
		     * Checks if `func` has a lazy counterpart.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
		     *  else `false`.
		     */
		    function isLaziable(func) {
		      var funcName = getFuncName(func),
		          other = lodash[funcName];

		      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
		        return false;
		      }
		      if (func === other) {
		        return true;
		      }
		      var data = getData(other);
		      return !!data && func === data[0];
		    }

		    /**
		     * Checks if `func` has its source masked.
		     *
		     * @private
		     * @param {Function} func The function to check.
		     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		     */
		    function isMasked(func) {
		      return !!maskSrcKey && (maskSrcKey in func);
		    }

		    /**
		     * Checks if `func` is capable of being masked.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
		     */
		    var isMaskable = coreJsData ? isFunction : stubFalse;

		    /**
		     * Checks if `value` is likely a prototype object.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		     */
		    function isPrototype(value) {
		      var Ctor = value && value.constructor,
		          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		      return value === proto;
		    }

		    /**
		     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` if suitable for strict
		     *  equality comparisons, else `false`.
		     */
		    function isStrictComparable(value) {
		      return value === value && !isObject(value);
		    }

		    /**
		     * A specialized version of `matchesProperty` for source values suitable
		     * for strict equality comparisons, i.e. `===`.
		     *
		     * @private
		     * @param {string} key The key of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     */
		    function matchesStrictComparable(key, srcValue) {
		      return function(object) {
		        if (object == null) {
		          return false;
		        }
		        return object[key] === srcValue &&
		          (srcValue !== undefined$1 || (key in Object(object)));
		      };
		    }

		    /**
		     * A specialized version of `_.memoize` which clears the memoized function's
		     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
		     *
		     * @private
		     * @param {Function} func The function to have its output memoized.
		     * @returns {Function} Returns the new memoized function.
		     */
		    function memoizeCapped(func) {
		      var result = memoize(func, function(key) {
		        if (cache.size === MAX_MEMOIZE_SIZE) {
		          cache.clear();
		        }
		        return key;
		      });

		      var cache = result.cache;
		      return result;
		    }

		    /**
		     * Merges the function metadata of `source` into `data`.
		     *
		     * Merging metadata reduces the number of wrappers used to invoke a function.
		     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
		     * may be applied regardless of execution order. Methods like `_.ary` and
		     * `_.rearg` modify function arguments, making the order in which they are
		     * executed important, preventing the merging of metadata. However, we make
		     * an exception for a safe combined case where curried functions have `_.ary`
		     * and or `_.rearg` applied.
		     *
		     * @private
		     * @param {Array} data The destination metadata.
		     * @param {Array} source The source metadata.
		     * @returns {Array} Returns `data`.
		     */
		    function mergeData(data, source) {
		      var bitmask = data[1],
		          srcBitmask = source[1],
		          newBitmask = bitmask | srcBitmask,
		          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

		      var isCombo =
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
		        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
		        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

		      // Exit early if metadata can't be merged.
		      if (!(isCommon || isCombo)) {
		        return data;
		      }
		      // Use source `thisArg` if available.
		      if (srcBitmask & WRAP_BIND_FLAG) {
		        data[2] = source[2];
		        // Set when currying a bound function.
		        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
		      }
		      // Compose partial arguments.
		      var value = source[3];
		      if (value) {
		        var partials = data[3];
		        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
		        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
		      }
		      // Compose partial right arguments.
		      value = source[5];
		      if (value) {
		        partials = data[5];
		        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
		        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
		      }
		      // Use source `argPos` if available.
		      value = source[7];
		      if (value) {
		        data[7] = value;
		      }
		      // Use source `ary` if it's smaller.
		      if (srcBitmask & WRAP_ARY_FLAG) {
		        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
		      }
		      // Use source `arity` if one is not provided.
		      if (data[9] == null) {
		        data[9] = source[9];
		      }
		      // Use source `func` and merge bitmasks.
		      data[0] = source[0];
		      data[1] = newBitmask;

		      return data;
		    }

		    /**
		     * This function is like
		     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * except that it includes inherited enumerable properties.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     */
		    function nativeKeysIn(object) {
		      var result = [];
		      if (object != null) {
		        for (var key in Object(object)) {
		          result.push(key);
		        }
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a string using `Object.prototype.toString`.
		     *
		     * @private
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     */
		    function objectToString(value) {
		      return nativeObjectToString.call(value);
		    }

		    /**
		     * A specialized version of `baseRest` which transforms the rest array.
		     *
		     * @private
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @param {Function} transform The rest array transform.
		     * @returns {Function} Returns the new function.
		     */
		    function overRest(func, start, transform) {
		      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
		      return function() {
		        var args = arguments,
		            index = -1,
		            length = nativeMax(args.length - start, 0),
		            array = Array(length);

		        while (++index < length) {
		          array[index] = args[start + index];
		        }
		        index = -1;
		        var otherArgs = Array(start + 1);
		        while (++index < start) {
		          otherArgs[index] = args[index];
		        }
		        otherArgs[start] = transform(array);
		        return apply(func, this, otherArgs);
		      };
		    }

		    /**
		     * Gets the parent value at `path` of `object`.
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {Array} path The path to get the parent value of.
		     * @returns {*} Returns the parent value.
		     */
		    function parent(object, path) {
		      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
		    }

		    /**
		     * Reorder `array` according to the specified indexes where the element at
		     * the first index is assigned as the first element, the element at
		     * the second index is assigned as the second element, and so on.
		     *
		     * @private
		     * @param {Array} array The array to reorder.
		     * @param {Array} indexes The arranged array indexes.
		     * @returns {Array} Returns `array`.
		     */
		    function reorder(array, indexes) {
		      var arrLength = array.length,
		          length = nativeMin(indexes.length, arrLength),
		          oldArray = copyArray(array);

		      while (length--) {
		        var index = indexes[length];
		        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
		      }
		      return array;
		    }

		    /**
		     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
		     *
		     * @private
		     * @param {Object} object The object to query.
		     * @param {string} key The key of the property to get.
		     * @returns {*} Returns the property value.
		     */
		    function safeGet(object, key) {
		      if (key === 'constructor' && typeof object[key] === 'function') {
		        return;
		      }

		      if (key == '__proto__') {
		        return;
		      }

		      return object[key];
		    }

		    /**
		     * Sets metadata for `func`.
		     *
		     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
		     * period of time, it will trip its breaker and transition to an identity
		     * function to avoid garbage collection pauses in V8. See
		     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
		     * for more details.
		     *
		     * @private
		     * @param {Function} func The function to associate metadata with.
		     * @param {*} data The metadata.
		     * @returns {Function} Returns `func`.
		     */
		    var setData = shortOut(baseSetData);

		    /**
		     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
		     *
		     * @private
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @returns {number|Object} Returns the timer id or timeout object.
		     */
		    var setTimeout = ctxSetTimeout || function(func, wait) {
		      return root.setTimeout(func, wait);
		    };

		    /**
		     * Sets the `toString` method of `func` to return `string`.
		     *
		     * @private
		     * @param {Function} func The function to modify.
		     * @param {Function} string The `toString` result.
		     * @returns {Function} Returns `func`.
		     */
		    var setToString = shortOut(baseSetToString);

		    /**
		     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
		     * with wrapper details in a comment at the top of the source body.
		     *
		     * @private
		     * @param {Function} wrapper The function to modify.
		     * @param {Function} reference The reference function.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Function} Returns `wrapper`.
		     */
		    function setWrapToString(wrapper, reference, bitmask) {
		      var source = (reference + '');
		      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
		    }

		    /**
		     * Creates a function that'll short out and invoke `identity` instead
		     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		     * milliseconds.
		     *
		     * @private
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new shortable function.
		     */
		    function shortOut(func) {
		      var count = 0,
		          lastCalled = 0;

		      return function() {
		        var stamp = nativeNow(),
		            remaining = HOT_SPAN - (stamp - lastCalled);

		        lastCalled = stamp;
		        if (remaining > 0) {
		          if (++count >= HOT_COUNT) {
		            return arguments[0];
		          }
		        } else {
		          count = 0;
		        }
		        return func.apply(undefined$1, arguments);
		      };
		    }

		    /**
		     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
		     *
		     * @private
		     * @param {Array} array The array to shuffle.
		     * @param {number} [size=array.length] The size of `array`.
		     * @returns {Array} Returns `array`.
		     */
		    function shuffleSelf(array, size) {
		      var index = -1,
		          length = array.length,
		          lastIndex = length - 1;

		      size = size === undefined$1 ? length : size;
		      while (++index < size) {
		        var rand = baseRandom(index, lastIndex),
		            value = array[rand];

		        array[rand] = array[index];
		        array[index] = value;
		      }
		      array.length = size;
		      return array;
		    }

		    /**
		     * Converts `string` to a property path array.
		     *
		     * @private
		     * @param {string} string The string to convert.
		     * @returns {Array} Returns the property path array.
		     */
		    var stringToPath = memoizeCapped(function(string) {
		      var result = [];
		      if (string.charCodeAt(0) === 46 /* . */) {
		        result.push('');
		      }
		      string.replace(rePropName, function(match, number, quote, subString) {
		        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
		      });
		      return result;
		    });

		    /**
		     * Converts `value` to a string key if it's not a string or symbol.
		     *
		     * @private
		     * @param {*} value The value to inspect.
		     * @returns {string|symbol} Returns the key.
		     */
		    function toKey(value) {
		      if (typeof value == 'string' || isSymbol(value)) {
		        return value;
		      }
		      var result = (value + '');
		      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
		    }

		    /**
		     * Converts `func` to its source code.
		     *
		     * @private
		     * @param {Function} func The function to convert.
		     * @returns {string} Returns the source code.
		     */
		    function toSource(func) {
		      if (func != null) {
		        try {
		          return funcToString.call(func);
		        } catch (e) {}
		        try {
		          return (func + '');
		        } catch (e) {}
		      }
		      return '';
		    }

		    /**
		     * Updates wrapper `details` based on `bitmask` flags.
		     *
		     * @private
		     * @returns {Array} details The details to modify.
		     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
		     * @returns {Array} Returns `details`.
		     */
		    function updateWrapDetails(details, bitmask) {
		      arrayEach(wrapFlags, function(pair) {
		        var value = '_.' + pair[0];
		        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
		          details.push(value);
		        }
		      });
		      return details.sort();
		    }

		    /**
		     * Creates a clone of `wrapper`.
		     *
		     * @private
		     * @param {Object} wrapper The wrapper to clone.
		     * @returns {Object} Returns the cloned wrapper.
		     */
		    function wrapperClone(wrapper) {
		      if (wrapper instanceof LazyWrapper) {
		        return wrapper.clone();
		      }
		      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
		      result.__actions__ = copyArray(wrapper.__actions__);
		      result.__index__  = wrapper.__index__;
		      result.__values__ = wrapper.__values__;
		      return result;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an array of elements split into groups the length of `size`.
		     * If `array` can't be split evenly, the final chunk will be the remaining
		     * elements.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to process.
		     * @param {number} [size=1] The length of each chunk
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the new array of chunks.
		     * @example
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 2);
		     * // => [['a', 'b'], ['c', 'd']]
		     *
		     * _.chunk(['a', 'b', 'c', 'd'], 3);
		     * // => [['a', 'b', 'c'], ['d']]
		     */
		    function chunk(array, size, guard) {
		      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
		        size = 1;
		      } else {
		        size = nativeMax(toInteger(size), 0);
		      }
		      var length = array == null ? 0 : array.length;
		      if (!length || size < 1) {
		        return [];
		      }
		      var index = 0,
		          resIndex = 0,
		          result = Array(nativeCeil(length / size));

		      while (index < length) {
		        result[resIndex++] = baseSlice(array, index, (index += size));
		      }
		      return result;
		    }

		    /**
		     * Creates an array with all falsey values removed. The values `false`, `null`,
		     * `0`, `""`, `undefined`, and `NaN` are falsey.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to compact.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.compact([0, 1, false, 2, '', 3]);
		     * // => [1, 2, 3]
		     */
		    function compact(array) {
		      var index = -1,
		          length = array == null ? 0 : array.length,
		          resIndex = 0,
		          result = [];

		      while (++index < length) {
		        var value = array[index];
		        if (value) {
		          result[resIndex++] = value;
		        }
		      }
		      return result;
		    }

		    /**
		     * Creates a new array concatenating `array` with any additional arrays
		     * and/or values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to concatenate.
		     * @param {...*} [values] The values to concatenate.
		     * @returns {Array} Returns the new concatenated array.
		     * @example
		     *
		     * var array = [1];
		     * var other = _.concat(array, 2, [3], [[4]]);
		     *
		     * console.log(other);
		     * // => [1, 2, 3, [4]]
		     *
		     * console.log(array);
		     * // => [1]
		     */
		    function concat() {
		      var length = arguments.length;
		      if (!length) {
		        return [];
		      }
		      var args = Array(length - 1),
		          array = arguments[0],
		          index = length;

		      while (index--) {
		        args[index - 1] = arguments[index];
		      }
		      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
		    }

		    /**
		     * Creates an array of `array` values not included in the other given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * **Note:** Unlike `_.pullAll`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.without, _.xor
		     * @example
		     *
		     * _.difference([2, 1], [2, 3]);
		     * // => [1]
		     */
		    var difference = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `iteratee` which
		     * is invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var differenceBy = baseRest(function(array, values) {
		      var iteratee = last(values);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.difference` except that it accepts `comparator`
		     * which is invoked to compare elements of `array` to `values`. The order and
		     * references of result values are determined by the first array. The comparator
		     * is invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...Array} [values] The values to exclude.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     *
		     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }]
		     */
		    var differenceWith = baseRest(function(array, values) {
		      var comparator = last(values);
		      if (isArrayLikeObject(comparator)) {
		        comparator = undefined$1;
		      }
		      return isArrayLikeObject(array)
		        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.drop([1, 2, 3]);
		     * // => [2, 3]
		     *
		     * _.drop([1, 2, 3], 2);
		     * // => [3]
		     *
		     * _.drop([1, 2, 3], 5);
		     * // => []
		     *
		     * _.drop([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function drop(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements dropped from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to drop.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.dropRight([1, 2, 3]);
		     * // => [1, 2]
		     *
		     * _.dropRight([1, 2, 3], 2);
		     * // => [1]
		     *
		     * _.dropRight([1, 2, 3], 5);
		     * // => []
		     *
		     * _.dropRight([1, 2, 3], 0);
		     * // => [1, 2, 3]
		     */
		    function dropRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the end.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.dropRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropRightWhile(users, ['active', false]);
		     * // => objects for ['barney']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropRightWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` excluding elements dropped from the beginning.
		     * Elements are dropped until `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.dropWhile(users, function(o) { return !o.active; });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.dropWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.dropWhile(users, ['active', false]);
		     * // => objects for ['pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.dropWhile(users, 'active');
		     * // => objects for ['barney', 'fred', 'pebbles']
		     */
		    function dropWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), true)
		        : [];
		    }

		    /**
		     * Fills elements of `array` with `value` from `start` up to, but not
		     * including, `end`.
		     *
		     * **Note:** This method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Array
		     * @param {Array} array The array to fill.
		     * @param {*} value The value to fill `array` with.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.fill(array, 'a');
		     * console.log(array);
		     * // => ['a', 'a', 'a']
		     *
		     * _.fill(Array(3), 2);
		     * // => [2, 2, 2]
		     *
		     * _.fill([4, 6, 8, 10], '*', 1, 3);
		     * // => [4, '*', '*', 10]
		     */
		    function fill(array, value, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
		        start = 0;
		        end = length;
		      }
		      return baseFill(array, value, start, end);
		    }

		    /**
		     * This method is like `_.find` except that it returns the index of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.findIndex(users, function(o) { return o.user == 'barney'; });
		     * // => 0
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findIndex(users, { 'user': 'fred', 'active': false });
		     * // => 1
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findIndex(users, ['active', false]);
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findIndex(users, 'active');
		     * // => 2
		     */
		    function findIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index);
		    }

		    /**
		     * This method is like `_.findIndex` except that it iterates over elements
		     * of `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the found element, else `-1`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
		     * // => 2
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
		     * // => 0
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastIndex(users, ['active', false]);
		     * // => 2
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastIndex(users, 'active');
		     * // => 0
		     */
		    function findLastIndex(array, predicate, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length - 1;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = fromIndex < 0
		          ? nativeMax(length + index, 0)
		          : nativeMin(index, length - 1);
		      }
		      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
		    }

		    /**
		     * Flattens `array` a single level deep.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flatten([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, [3, [4]], 5]
		     */
		    function flatten(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, 1) : [];
		    }

		    /**
		     * Recursively flattens `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * _.flattenDeep([1, [2, [3, [4]], 5]]);
		     * // => [1, 2, 3, 4, 5]
		     */
		    function flattenDeep(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseFlatten(array, INFINITY) : [];
		    }

		    /**
		     * Recursively flatten `array` up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Array
		     * @param {Array} array The array to flatten.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * var array = [1, [2, [3, [4]], 5]];
		     *
		     * _.flattenDepth(array, 1);
		     * // => [1, 2, [3, [4]], 5]
		     *
		     * _.flattenDepth(array, 2);
		     * // => [1, 2, 3, [4], 5]
		     */
		    function flattenDepth(array, depth) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(array, depth);
		    }

		    /**
		     * The inverse of `_.toPairs`; this method returns an object composed
		     * from key-value `pairs`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} pairs The key-value pairs.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.fromPairs([['a', 1], ['b', 2]]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function fromPairs(pairs) {
		      var index = -1,
		          length = pairs == null ? 0 : pairs.length,
		          result = {};

		      while (++index < length) {
		        var pair = pairs[index];
		        result[pair[0]] = pair[1];
		      }
		      return result;
		    }

		    /**
		     * Gets the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias first
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the first element of `array`.
		     * @example
		     *
		     * _.head([1, 2, 3]);
		     * // => 1
		     *
		     * _.head([]);
		     * // => undefined
		     */
		    function head(array) {
		      return (array && array.length) ? array[0] : undefined$1;
		    }

		    /**
		     * Gets the index at which the first occurrence of `value` is found in `array`
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. If `fromIndex` is negative, it's used as the
		     * offset from the end of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.indexOf([1, 2, 1, 2], 2);
		     * // => 1
		     *
		     * // Search from the `fromIndex`.
		     * _.indexOf([1, 2, 1, 2], 2, 2);
		     * // => 3
		     */
		    function indexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = fromIndex == null ? 0 : toInteger(fromIndex);
		      if (index < 0) {
		        index = nativeMax(length + index, 0);
		      }
		      return baseIndexOf(array, value, index);
		    }

		    /**
		     * Gets all but the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.initial([1, 2, 3]);
		     * // => [1, 2]
		     */
		    function initial(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 0, -1) : [];
		    }

		    /**
		     * Creates an array of unique values that are included in all given arrays
		     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons. The order and references of result values are
		     * determined by the first array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersection([2, 1], [2, 3]);
		     * // => [2]
		     */
		    var intersection = baseRest(function(arrays) {
		      var mapped = arrayMap(arrays, castArrayLikeObject);
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped)
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `iteratee`
		     * which is invoked for each element of each `arrays` to generate the criterion
		     * by which they're compared. The order and references of result values are
		     * determined by the first array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [2.1]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }]
		     */
		    var intersectionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      if (iteratee === last(mapped)) {
		        iteratee = undefined$1;
		      } else {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, getIteratee(iteratee, 2))
		        : [];
		    });

		    /**
		     * This method is like `_.intersection` except that it accepts `comparator`
		     * which is invoked to compare elements of `arrays`. The order and references
		     * of result values are determined by the first array. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of intersecting values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.intersectionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }]
		     */
		    var intersectionWith = baseRest(function(arrays) {
		      var comparator = last(arrays),
		          mapped = arrayMap(arrays, castArrayLikeObject);

		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      if (comparator) {
		        mapped.pop();
		      }
		      return (mapped.length && mapped[0] === arrays[0])
		        ? baseIntersection(mapped, undefined$1, comparator)
		        : [];
		    });

		    /**
		     * Converts all elements in `array` into a string separated by `separator`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to convert.
		     * @param {string} [separator=','] The element separator.
		     * @returns {string} Returns the joined string.
		     * @example
		     *
		     * _.join(['a', 'b', 'c'], '~');
		     * // => 'a~b~c'
		     */
		    function join(array, separator) {
		      return array == null ? '' : nativeJoin.call(array, separator);
		    }

		    /**
		     * Gets the last element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {*} Returns the last element of `array`.
		     * @example
		     *
		     * _.last([1, 2, 3]);
		     * // => 3
		     */
		    function last(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? array[length - 1] : undefined$1;
		    }

		    /**
		     * This method is like `_.indexOf` except that it iterates over elements of
		     * `array` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=array.length-1] The index to search from.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.lastIndexOf([1, 2, 1, 2], 2);
		     * // => 3
		     *
		     * // Search from the `fromIndex`.
		     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
		     * // => 1
		     */
		    function lastIndexOf(array, value, fromIndex) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return -1;
		      }
		      var index = length;
		      if (fromIndex !== undefined$1) {
		        index = toInteger(fromIndex);
		        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
		      }
		      return value === value
		        ? strictLastIndexOf(array, value, index)
		        : baseFindIndex(array, baseIsNaN, index, true);
		    }

		    /**
		     * Gets the element at index `n` of `array`. If `n` is negative, the nth
		     * element from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.11.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=0] The index of the element to return.
		     * @returns {*} Returns the nth element of `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     *
		     * _.nth(array, 1);
		     * // => 'b'
		     *
		     * _.nth(array, -2);
		     * // => 'c';
		     */
		    function nth(array, n) {
		      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
		    }

		    /**
		     * Removes all given values from `array` using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
		     * to remove elements from an array by predicate.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...*} [values] The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pull(array, 'a', 'c');
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    var pull = baseRest(pullAll);

		    /**
		     * This method is like `_.pull` except that it accepts an array of values to remove.
		     *
		     * **Note:** Unlike `_.difference`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
		     *
		     * _.pullAll(array, ['a', 'c']);
		     * console.log(array);
		     * // => ['b', 'b']
		     */
		    function pullAll(array, values) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values)
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `iteratee` which is
		     * invoked for each element of `array` and `values` to generate the criterion
		     * by which they're compared. The iteratee is invoked with one argument: (value).
		     *
		     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
		     *
		     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
		     * console.log(array);
		     * // => [{ 'x': 2 }]
		     */
		    function pullAllBy(array, values, iteratee) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, getIteratee(iteratee, 2))
		        : array;
		    }

		    /**
		     * This method is like `_.pullAll` except that it accepts `comparator` which
		     * is invoked to compare elements of `array` to `values`. The comparator is
		     * invoked with two arguments: (arrVal, othVal).
		     *
		     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Array} values The values to remove.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
		     *
		     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
		     * console.log(array);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
		     */
		    function pullAllWith(array, values, comparator) {
		      return (array && array.length && values && values.length)
		        ? basePullAll(array, values, undefined$1, comparator)
		        : array;
		    }

		    /**
		     * Removes elements from `array` corresponding to `indexes` and returns an
		     * array of removed elements.
		     *
		     * **Note:** Unlike `_.at`, this method mutates `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = ['a', 'b', 'c', 'd'];
		     * var pulled = _.pullAt(array, [1, 3]);
		     *
		     * console.log(array);
		     * // => ['a', 'c']
		     *
		     * console.log(pulled);
		     * // => ['b', 'd']
		     */
		    var pullAt = flatRest(function(array, indexes) {
		      var length = array == null ? 0 : array.length,
		          result = baseAt(array, indexes);

		      basePullAt(array, arrayMap(indexes, function(index) {
		        return isIndex(index, length) ? +index : index;
		      }).sort(compareAscending));

		      return result;
		    });

		    /**
		     * Removes all elements from `array` that `predicate` returns truthy for
		     * and returns an array of the removed elements. The predicate is invoked
		     * with three arguments: (value, index, array).
		     *
		     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
		     * to pull elements from an array by value.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new array of removed elements.
		     * @example
		     *
		     * var array = [1, 2, 3, 4];
		     * var evens = _.remove(array, function(n) {
		     *   return n % 2 == 0;
		     * });
		     *
		     * console.log(array);
		     * // => [1, 3]
		     *
		     * console.log(evens);
		     * // => [2, 4]
		     */
		    function remove(array, predicate) {
		      var result = [];
		      if (!(array && array.length)) {
		        return result;
		      }
		      var index = -1,
		          indexes = [],
		          length = array.length;

		      predicate = getIteratee(predicate, 3);
		      while (++index < length) {
		        var value = array[index];
		        if (predicate(value, index, array)) {
		          result.push(value);
		          indexes.push(index);
		        }
		      }
		      basePullAt(array, indexes);
		      return result;
		    }

		    /**
		     * Reverses `array` so that the first element becomes the last, the second
		     * element becomes the second to last, and so on.
		     *
		     * **Note:** This method mutates `array` and is based on
		     * [`Array#reverse`](https://mdn.io/Array/reverse).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to modify.
		     * @returns {Array} Returns `array`.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _.reverse(array);
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function reverse(array) {
		      return array == null ? array : nativeReverse.call(array);
		    }

		    /**
		     * Creates a slice of `array` from `start` up to, but not including, `end`.
		     *
		     * **Note:** This method is used instead of
		     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
		     * returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to slice.
		     * @param {number} [start=0] The start position.
		     * @param {number} [end=array.length] The end position.
		     * @returns {Array} Returns the slice of `array`.
		     */
		    function slice(array, start, end) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
		        start = 0;
		        end = length;
		      }
		      else {
		        start = start == null ? 0 : toInteger(start);
		        end = end === undefined$1 ? length : toInteger(end);
		      }
		      return baseSlice(array, start, end);
		    }

		    /**
		     * Uses a binary search to determine the lowest index at which `value`
		     * should be inserted into `array` in order to maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedIndex([30, 50], 40);
		     * // => 1
		     */
		    function sortedIndex(array, value) {
		      return baseSortedIndex(array, value);
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 0
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 0
		     */
		    function sortedIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
		    }

		    /**
		     * This method is like `_.indexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 1
		     */
		    function sortedIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value);
		        if (index < length && eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.sortedIndex` except that it returns the highest
		     * index at which `value` should be inserted into `array` in order to
		     * maintain its sort order.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
		     * // => 4
		     */
		    function sortedLastIndex(array, value) {
		      return baseSortedIndex(array, value, true);
		    }

		    /**
		     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
		     * which is invoked for `value` and each element of `array` to compute their
		     * sort ranking. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The sorted array to inspect.
		     * @param {*} value The value to evaluate.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the index at which `value` should be inserted
		     *  into `array`.
		     * @example
		     *
		     * var objects = [{ 'x': 4 }, { 'x': 5 }];
		     *
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
		     * // => 1
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
		     * // => 1
		     */
		    function sortedLastIndexBy(array, value, iteratee) {
		      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
		    }

		    /**
		     * This method is like `_.lastIndexOf` except that it performs a binary
		     * search on a sorted `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {*} value The value to search for.
		     * @returns {number} Returns the index of the matched value, else `-1`.
		     * @example
		     *
		     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
		     * // => 3
		     */
		    function sortedLastIndexOf(array, value) {
		      var length = array == null ? 0 : array.length;
		      if (length) {
		        var index = baseSortedIndex(array, value, true) - 1;
		        if (eq(array[index], value)) {
		          return index;
		        }
		      }
		      return -1;
		    }

		    /**
		     * This method is like `_.uniq` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniq([1, 1, 2]);
		     * // => [1, 2]
		     */
		    function sortedUniq(array) {
		      return (array && array.length)
		        ? baseSortedUniq(array)
		        : [];
		    }

		    /**
		     * This method is like `_.uniqBy` except that it's designed and optimized
		     * for sorted arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
		     * // => [1.1, 2.3]
		     */
		    function sortedUniqBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSortedUniq(array, getIteratee(iteratee, 2))
		        : [];
		    }

		    /**
		     * Gets all but the first element of `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.tail([1, 2, 3]);
		     * // => [2, 3]
		     */
		    function tail(array) {
		      var length = array == null ? 0 : array.length;
		      return length ? baseSlice(array, 1, length) : [];
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the beginning.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.take([1, 2, 3]);
		     * // => [1]
		     *
		     * _.take([1, 2, 3], 2);
		     * // => [1, 2]
		     *
		     * _.take([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.take([1, 2, 3], 0);
		     * // => []
		     */
		    function take(array, n, guard) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      return baseSlice(array, 0, n < 0 ? 0 : n);
		    }

		    /**
		     * Creates a slice of `array` with `n` elements taken from the end.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {number} [n=1] The number of elements to take.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * _.takeRight([1, 2, 3]);
		     * // => [3]
		     *
		     * _.takeRight([1, 2, 3], 2);
		     * // => [2, 3]
		     *
		     * _.takeRight([1, 2, 3], 5);
		     * // => [1, 2, 3]
		     *
		     * _.takeRight([1, 2, 3], 0);
		     * // => []
		     */
		    function takeRight(array, n, guard) {
		      var length = array == null ? 0 : array.length;
		      if (!length) {
		        return [];
		      }
		      n = (guard || n === undefined$1) ? 1 : toInteger(n);
		      n = length - n;
		      return baseSlice(array, n < 0 ? 0 : n, length);
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the end. Elements are
		     * taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': true },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': false }
		     * ];
		     *
		     * _.takeRightWhile(users, function(o) { return !o.active; });
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
		     * // => objects for ['pebbles']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeRightWhile(users, ['active', false]);
		     * // => objects for ['fred', 'pebbles']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeRightWhile(users, 'active');
		     * // => []
		     */
		    function takeRightWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3), false, true)
		        : [];
		    }

		    /**
		     * Creates a slice of `array` with elements taken from the beginning. Elements
		     * are taken until `predicate` returns falsey. The predicate is invoked with
		     * three arguments: (value, index, array).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Array
		     * @param {Array} array The array to query.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the slice of `array`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'active': false },
		     *   { 'user': 'fred',    'active': false },
		     *   { 'user': 'pebbles', 'active': true }
		     * ];
		     *
		     * _.takeWhile(users, function(o) { return !o.active; });
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.takeWhile(users, { 'user': 'barney', 'active': false });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.takeWhile(users, ['active', false]);
		     * // => objects for ['barney', 'fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.takeWhile(users, 'active');
		     * // => []
		     */
		    function takeWhile(array, predicate) {
		      return (array && array.length)
		        ? baseWhile(array, getIteratee(predicate, 3))
		        : [];
		    }

		    /**
		     * Creates an array of unique values, in order, from all given arrays using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.union([2], [1, 2]);
		     * // => [2, 1]
		     */
		    var union = baseRest(function(arrays) {
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which uniqueness is computed. Result values are chosen from the first
		     * array in which the value occurs. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    var unionBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.union` except that it accepts `comparator` which
		     * is invoked to compare elements of `arrays`. Result values are chosen from
		     * the first array in which the value occurs. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of combined values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.unionWith(objects, others, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var unionWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
		    });

		    /**
		     * Creates a duplicate-free version of an array, using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons, in which only the first occurrence of each element
		     * is kept. The order of result values is determined by the order they occur
		     * in the array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniq([2, 1, 2]);
		     * // => [2, 1]
		     */
		    function uniq(array) {
		      return (array && array.length) ? baseUniq(array) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * uniqueness is computed. The order of result values is determined by the
		     * order they occur in the array. The iteratee is invoked with one argument:
		     * (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
		     * // => [2.1, 1.2]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 1 }, { 'x': 2 }]
		     */
		    function uniqBy(array, iteratee) {
		      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
		    }

		    /**
		     * This method is like `_.uniq` except that it accepts `comparator` which
		     * is invoked to compare elements of `array`. The order of result values is
		     * determined by the order they occur in the array.The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new duplicate free array.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.uniqWith(objects, _.isEqual);
		     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
		     */
		    function uniqWith(array, comparator) {
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
		    }

		    /**
		     * This method is like `_.zip` except that it accepts an array of grouped
		     * elements and creates an array regrouping the elements to their pre-zip
		     * configuration.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.2.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     *
		     * _.unzip(zipped);
		     * // => [['a', 'b'], [1, 2], [true, false]]
		     */
		    function unzip(array) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var length = 0;
		      array = arrayFilter(array, function(group) {
		        if (isArrayLikeObject(group)) {
		          length = nativeMax(group.length, length);
		          return true;
		        }
		      });
		      return baseTimes(length, function(index) {
		        return arrayMap(array, baseProperty(index));
		      });
		    }

		    /**
		     * This method is like `_.unzip` except that it accepts `iteratee` to specify
		     * how regrouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {Array} array The array of grouped elements to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  regrouped values.
		     * @returns {Array} Returns the new array of regrouped elements.
		     * @example
		     *
		     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
		     * // => [[1, 10, 100], [2, 20, 200]]
		     *
		     * _.unzipWith(zipped, _.add);
		     * // => [3, 30, 300]
		     */
		    function unzipWith(array, iteratee) {
		      if (!(array && array.length)) {
		        return [];
		      }
		      var result = unzip(array);
		      if (iteratee == null) {
		        return result;
		      }
		      return arrayMap(result, function(group) {
		        return apply(iteratee, undefined$1, group);
		      });
		    }

		    /**
		     * Creates an array excluding all given values using
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * for equality comparisons.
		     *
		     * **Note:** Unlike `_.pull`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {Array} array The array to inspect.
		     * @param {...*} [values] The values to exclude.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.xor
		     * @example
		     *
		     * _.without([2, 1, 2, 3], 1, 2);
		     * // => [3]
		     */
		    var without = baseRest(function(array, values) {
		      return isArrayLikeObject(array)
		        ? baseDifference(array, values)
		        : [];
		    });

		    /**
		     * Creates an array of unique values that is the
		     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
		     * of the given arrays. The order of result values is determined by the order
		     * they occur in the arrays.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @returns {Array} Returns the new array of filtered values.
		     * @see _.difference, _.without
		     * @example
		     *
		     * _.xor([2, 1], [2, 3]);
		     * // => [1, 3]
		     */
		    var xor = baseRest(function(arrays) {
		      return baseXor(arrayFilter(arrays, isArrayLikeObject));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `iteratee` which is
		     * invoked for each element of each `arrays` to generate the criterion by
		     * which by which they're compared. The order of result values is determined
		     * by the order they occur in the arrays. The iteratee is invoked with one
		     * argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
		     * // => [1.2, 3.4]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
		     * // => [{ 'x': 2 }]
		     */
		    var xorBy = baseRest(function(arrays) {
		      var iteratee = last(arrays);
		      if (isArrayLikeObject(iteratee)) {
		        iteratee = undefined$1;
		      }
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
		    });

		    /**
		     * This method is like `_.xor` except that it accepts `comparator` which is
		     * invoked to compare elements of `arrays`. The order of result values is
		     * determined by the order they occur in the arrays. The comparator is invoked
		     * with two arguments: (arrVal, othVal).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to inspect.
		     * @param {Function} [comparator] The comparator invoked per element.
		     * @returns {Array} Returns the new array of filtered values.
		     * @example
		     *
		     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
		     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
		     *
		     * _.xorWith(objects, others, _.isEqual);
		     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
		     */
		    var xorWith = baseRest(function(arrays) {
		      var comparator = last(arrays);
		      comparator = typeof comparator == 'function' ? comparator : undefined$1;
		      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
		    });

		    /**
		     * Creates an array of grouped elements, the first of which contains the
		     * first elements of the given arrays, the second of which contains the
		     * second elements of the given arrays, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zip(['a', 'b'], [1, 2], [true, false]);
		     * // => [['a', 1, true], ['b', 2, false]]
		     */
		    var zip = baseRest(unzip);

		    /**
		     * This method is like `_.fromPairs` except that it accepts two arrays,
		     * one of property identifiers and one of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.4.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObject(['a', 'b'], [1, 2]);
		     * // => { 'a': 1, 'b': 2 }
		     */
		    function zipObject(props, values) {
		      return baseZipObject(props || [], values || [], assignValue);
		    }

		    /**
		     * This method is like `_.zipObject` except that it supports property paths.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Array
		     * @param {Array} [props=[]] The property identifiers.
		     * @param {Array} [values=[]] The property values.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
		     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
		     */
		    function zipObjectDeep(props, values) {
		      return baseZipObject(props || [], values || [], baseSet);
		    }

		    /**
		     * This method is like `_.zip` except that it accepts `iteratee` to specify
		     * how grouped values should be combined. The iteratee is invoked with the
		     * elements of each group: (...group).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Array
		     * @param {...Array} [arrays] The arrays to process.
		     * @param {Function} [iteratee=_.identity] The function to combine
		     *  grouped values.
		     * @returns {Array} Returns the new array of grouped elements.
		     * @example
		     *
		     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
		     *   return a + b + c;
		     * });
		     * // => [111, 222]
		     */
		    var zipWith = baseRest(function(arrays) {
		      var length = arrays.length,
		          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

		      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
		      return unzipWith(arrays, iteratee);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
		     * chain sequences enabled. The result of such sequences must be unwrapped
		     * with `_#value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Seq
		     * @param {*} value The value to wrap.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36 },
		     *   { 'user': 'fred',    'age': 40 },
		     *   { 'user': 'pebbles', 'age': 1 }
		     * ];
		     *
		     * var youngest = _
		     *   .chain(users)
		     *   .sortBy('age')
		     *   .map(function(o) {
		     *     return o.user + ' is ' + o.age;
		     *   })
		     *   .head()
		     *   .value();
		     * // => 'pebbles is 1'
		     */
		    function chain(value) {
		      var result = lodash(value);
		      result.__chain__ = true;
		      return result;
		    }

		    /**
		     * This method invokes `interceptor` and returns `value`. The interceptor
		     * is invoked with one argument; (value). The purpose of this method is to
		     * "tap into" a method chain sequence in order to modify intermediate results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * _([1, 2, 3])
		     *  .tap(function(array) {
		     *    // Mutate input array.
		     *    array.pop();
		     *  })
		     *  .reverse()
		     *  .value();
		     * // => [2, 1]
		     */
		    function tap(value, interceptor) {
		      interceptor(value);
		      return value;
		    }

		    /**
		     * This method is like `_.tap` except that it returns the result of `interceptor`.
		     * The purpose of this method is to "pass thru" values replacing intermediate
		     * results in a method chain sequence.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Seq
		     * @param {*} value The value to provide to `interceptor`.
		     * @param {Function} interceptor The function to invoke.
		     * @returns {*} Returns the result of `interceptor`.
		     * @example
		     *
		     * _('  abc  ')
		     *  .chain()
		     *  .trim()
		     *  .thru(function(value) {
		     *    return [value];
		     *  })
		     *  .value();
		     * // => ['abc']
		     */
		    function thru(value, interceptor) {
		      return interceptor(value);
		    }

		    /**
		     * This method is the wrapper version of `_.at`.
		     *
		     * @name at
		     * @memberOf _
		     * @since 1.0.0
		     * @category Seq
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _(object).at(['a[0].b.c', 'a[1]']).value();
		     * // => [3, 4]
		     */
		    var wrapperAt = flatRest(function(paths) {
		      var length = paths.length,
		          start = length ? paths[0] : 0,
		          value = this.__wrapped__,
		          interceptor = function(object) { return baseAt(object, paths); };

		      if (length > 1 || this.__actions__.length ||
		          !(value instanceof LazyWrapper) || !isIndex(start)) {
		        return this.thru(interceptor);
		      }
		      value = value.slice(start, +start + (length ? 1 : 0));
		      value.__actions__.push({
		        'func': thru,
		        'args': [interceptor],
		        'thisArg': undefined$1
		      });
		      return new LodashWrapper(value, this.__chain__).thru(function(array) {
		        if (length && !array.length) {
		          array.push(undefined$1);
		        }
		        return array;
		      });
		    });

		    /**
		     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
		     *
		     * @name chain
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 40 }
		     * ];
		     *
		     * // A sequence without explicit chaining.
		     * _(users).head();
		     * // => { 'user': 'barney', 'age': 36 }
		     *
		     * // A sequence with explicit chaining.
		     * _(users)
		     *   .chain()
		     *   .head()
		     *   .pick('user')
		     *   .value();
		     * // => { 'user': 'barney' }
		     */
		    function wrapperChain() {
		      return chain(this);
		    }

		    /**
		     * Executes the chain sequence and returns the wrapped result.
		     *
		     * @name commit
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2];
		     * var wrapped = _(array).push(3);
		     *
		     * console.log(array);
		     * // => [1, 2]
		     *
		     * wrapped = wrapped.commit();
		     * console.log(array);
		     * // => [1, 2, 3]
		     *
		     * wrapped.last();
		     * // => 3
		     *
		     * console.log(array);
		     * // => [1, 2, 3]
		     */
		    function wrapperCommit() {
		      return new LodashWrapper(this.value(), this.__chain__);
		    }

		    /**
		     * Gets the next value on a wrapped object following the
		     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
		     *
		     * @name next
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the next iterator value.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 1 }
		     *
		     * wrapped.next();
		     * // => { 'done': false, 'value': 2 }
		     *
		     * wrapped.next();
		     * // => { 'done': true, 'value': undefined }
		     */
		    function wrapperNext() {
		      if (this.__values__ === undefined$1) {
		        this.__values__ = toArray(this.value());
		      }
		      var done = this.__index__ >= this.__values__.length,
		          value = done ? undefined$1 : this.__values__[this.__index__++];

		      return { 'done': done, 'value': value };
		    }

		    /**
		     * Enables the wrapper to be iterable.
		     *
		     * @name Symbol.iterator
		     * @memberOf _
		     * @since 4.0.0
		     * @category Seq
		     * @returns {Object} Returns the wrapper object.
		     * @example
		     *
		     * var wrapped = _([1, 2]);
		     *
		     * wrapped[Symbol.iterator]() === wrapped;
		     * // => true
		     *
		     * Array.from(wrapped);
		     * // => [1, 2]
		     */
		    function wrapperToIterator() {
		      return this;
		    }

		    /**
		     * Creates a clone of the chain sequence planting `value` as the wrapped value.
		     *
		     * @name plant
		     * @memberOf _
		     * @since 3.2.0
		     * @category Seq
		     * @param {*} value The value to plant.
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var wrapped = _([1, 2]).map(square);
		     * var other = wrapped.plant([3, 4]);
		     *
		     * other.value();
		     * // => [9, 16]
		     *
		     * wrapped.value();
		     * // => [1, 4]
		     */
		    function wrapperPlant(value) {
		      var result,
		          parent = this;

		      while (parent instanceof baseLodash) {
		        var clone = wrapperClone(parent);
		        clone.__index__ = 0;
		        clone.__values__ = undefined$1;
		        if (result) {
		          previous.__wrapped__ = clone;
		        } else {
		          result = clone;
		        }
		        var previous = clone;
		        parent = parent.__wrapped__;
		      }
		      previous.__wrapped__ = value;
		      return result;
		    }

		    /**
		     * This method is the wrapper version of `_.reverse`.
		     *
		     * **Note:** This method mutates the wrapped array.
		     *
		     * @name reverse
		     * @memberOf _
		     * @since 0.1.0
		     * @category Seq
		     * @returns {Object} Returns the new `lodash` wrapper instance.
		     * @example
		     *
		     * var array = [1, 2, 3];
		     *
		     * _(array).reverse().value()
		     * // => [3, 2, 1]
		     *
		     * console.log(array);
		     * // => [3, 2, 1]
		     */
		    function wrapperReverse() {
		      var value = this.__wrapped__;
		      if (value instanceof LazyWrapper) {
		        var wrapped = value;
		        if (this.__actions__.length) {
		          wrapped = new LazyWrapper(this);
		        }
		        wrapped = wrapped.reverse();
		        wrapped.__actions__.push({
		          'func': thru,
		          'args': [reverse],
		          'thisArg': undefined$1
		        });
		        return new LodashWrapper(wrapped, this.__chain__);
		      }
		      return this.thru(reverse);
		    }

		    /**
		     * Executes the chain sequence to resolve the unwrapped value.
		     *
		     * @name value
		     * @memberOf _
		     * @since 0.1.0
		     * @alias toJSON, valueOf
		     * @category Seq
		     * @returns {*} Returns the resolved unwrapped value.
		     * @example
		     *
		     * _([1, 2, 3]).value();
		     * // => [1, 2, 3]
		     */
		    function wrapperValue() {
		      return baseWrapperValue(this.__wrapped__, this.__actions__);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the number of times the key was returned by `iteratee`. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.countBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': 1, '6': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.countBy(['one', 'two', 'three'], 'length');
		     * // => { '3': 2, '5': 1 }
		     */
		    var countBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        ++result[key];
		      } else {
		        baseAssignValue(result, key, 1);
		      }
		    });

		    /**
		     * Checks if `predicate` returns truthy for **all** elements of `collection`.
		     * Iteration is stopped once `predicate` returns falsey. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * **Note:** This method returns `true` for
		     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
		     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
		     * elements of empty collections.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if all elements pass the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.every([true, 1, null, 'yes'], Boolean);
		     * // => false
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.every(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.every(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.every(users, 'active');
		     * // => false
		     */
		    function every(collection, predicate, guard) {
		      var func = isArray(collection) ? arrayEvery : baseEvery;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning an array of all elements
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * **Note:** Unlike `_.remove`, this method returns a new array.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.reject
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * _.filter(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, { 'age': 36, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.filter(users, 'active');
		     * // => objects for ['barney']
		     *
		     * // Combining several predicates using `_.overEvery` or `_.overSome`.
		     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
		     * // => objects for ['fred', 'barney']
		     */
		    function filter(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Iterates over elements of `collection`, returning the first element
		     * `predicate` returns truthy for. The predicate is invoked with three
		     * arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': true },
		     *   { 'user': 'fred',    'age': 40, 'active': false },
		     *   { 'user': 'pebbles', 'age': 1,  'active': true }
		     * ];
		     *
		     * _.find(users, function(o) { return o.age < 40; });
		     * // => object for 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.find(users, { 'age': 1, 'active': true });
		     * // => object for 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.find(users, ['active', false]);
		     * // => object for 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.find(users, 'active');
		     * // => object for 'barney'
		     */
		    var find = createFind(findIndex);

		    /**
		     * This method is like `_.find` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param {number} [fromIndex=collection.length-1] The index to search from.
		     * @returns {*} Returns the matched element, else `undefined`.
		     * @example
		     *
		     * _.findLast([1, 2, 3, 4], function(n) {
		     *   return n % 2 == 1;
		     * });
		     * // => 3
		     */
		    var findLast = createFind(findLastIndex);

		    /**
		     * Creates a flattened array of values by running each element in `collection`
		     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
		     * with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [n, n];
		     * }
		     *
		     * _.flatMap([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMap(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), 1);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDeep([1, 2], duplicate);
		     * // => [1, 1, 2, 2]
		     */
		    function flatMapDeep(collection, iteratee) {
		      return baseFlatten(map(collection, iteratee), INFINITY);
		    }

		    /**
		     * This method is like `_.flatMap` except that it recursively flattens the
		     * mapped results up to `depth` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {number} [depth=1] The maximum recursion depth.
		     * @returns {Array} Returns the new flattened array.
		     * @example
		     *
		     * function duplicate(n) {
		     *   return [[[n, n]]];
		     * }
		     *
		     * _.flatMapDepth([1, 2], duplicate, 2);
		     * // => [[1, 1], [2, 2]]
		     */
		    function flatMapDepth(collection, iteratee, depth) {
		      depth = depth === undefined$1 ? 1 : toInteger(depth);
		      return baseFlatten(map(collection, iteratee), depth);
		    }

		    /**
		     * Iterates over elements of `collection` and invokes `iteratee` for each element.
		     * The iteratee is invoked with three arguments: (value, index|key, collection).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * **Note:** As with other "Collections" methods, objects with a "length"
		     * property are iterated like arrays. To avoid this behavior use `_.forIn`
		     * or `_.forOwn` for object iteration.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @alias each
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEachRight
		     * @example
		     *
		     * _.forEach([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `1` then `2`.
		     *
		     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forEach(collection, iteratee) {
		      var func = isArray(collection) ? arrayEach : baseEach;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forEach` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @alias eachRight
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array|Object} Returns `collection`.
		     * @see _.forEach
		     * @example
		     *
		     * _.forEachRight([1, 2], function(value) {
		     *   console.log(value);
		     * });
		     * // => Logs `2` then `1`.
		     */
		    function forEachRight(collection, iteratee) {
		      var func = isArray(collection) ? arrayEachRight : baseEachRight;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The order of grouped values
		     * is determined by the order they occur in `collection`. The corresponding
		     * value of each key is an array of elements responsible for generating the
		     * key. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
		     * // => { '4': [4.2], '6': [6.1, 6.3] }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.groupBy(['one', 'two', 'three'], 'length');
		     * // => { '3': ['one', 'two'], '5': ['three'] }
		     */
		    var groupBy = createAggregator(function(result, value, key) {
		      if (hasOwnProperty.call(result, key)) {
		        result[key].push(value);
		      } else {
		        baseAssignValue(result, key, [value]);
		      }
		    });

		    /**
		     * Checks if `value` is in `collection`. If `collection` is a string, it's
		     * checked for a substring of `value`, otherwise
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * is used for equality comparisons. If `fromIndex` is negative, it's used as
		     * the offset from the end of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @param {*} value The value to search for.
		     * @param {number} [fromIndex=0] The index to search from.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {boolean} Returns `true` if `value` is found, else `false`.
		     * @example
		     *
		     * _.includes([1, 2, 3], 1);
		     * // => true
		     *
		     * _.includes([1, 2, 3], 1, 2);
		     * // => false
		     *
		     * _.includes({ 'a': 1, 'b': 2 }, 1);
		     * // => true
		     *
		     * _.includes('abcd', 'bc');
		     * // => true
		     */
		    function includes(collection, value, fromIndex, guard) {
		      collection = isArrayLike(collection) ? collection : values(collection);
		      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

		      var length = collection.length;
		      if (fromIndex < 0) {
		        fromIndex = nativeMax(length + fromIndex, 0);
		      }
		      return isString(collection)
		        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
		        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
		    }

		    /**
		     * Invokes the method at `path` of each element in `collection`, returning
		     * an array of the results of each invoked method. Any additional arguments
		     * are provided to each invoked method. If `path` is a function, it's invoked
		     * for, and `this` bound to, each element in `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array|Function|string} path The path of the method to invoke or
		     *  the function invoked per iteration.
		     * @param {...*} [args] The arguments to invoke each method with.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
		     * // => [[1, 5, 7], [1, 2, 3]]
		     *
		     * _.invokeMap([123, 456], String.prototype.split, '');
		     * // => [['1', '2', '3'], ['4', '5', '6']]
		     */
		    var invokeMap = baseRest(function(collection, path, args) {
		      var index = -1,
		          isFunc = typeof path == 'function',
		          result = isArrayLike(collection) ? Array(collection.length) : [];

		      baseEach(collection, function(value) {
		        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
		      });
		      return result;
		    });

		    /**
		     * Creates an object composed of keys generated from the results of running
		     * each element of `collection` thru `iteratee`. The corresponding value of
		     * each key is the last element responsible for generating the key. The
		     * iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
		     * @returns {Object} Returns the composed aggregate object.
		     * @example
		     *
		     * var array = [
		     *   { 'dir': 'left', 'code': 97 },
		     *   { 'dir': 'right', 'code': 100 }
		     * ];
		     *
		     * _.keyBy(array, function(o) {
		     *   return String.fromCharCode(o.code);
		     * });
		     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
		     *
		     * _.keyBy(array, 'dir');
		     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
		     */
		    var keyBy = createAggregator(function(result, value, key) {
		      baseAssignValue(result, key, value);
		    });

		    /**
		     * Creates an array of values by running each element in `collection` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
		     *
		     * The guarded methods are:
		     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
		     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
		     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
		     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new mapped array.
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * _.map([4, 8], square);
		     * // => [16, 64]
		     *
		     * _.map({ 'a': 4, 'b': 8 }, square);
		     * // => [16, 64] (iteration order is not guaranteed)
		     *
		     * var users = [
		     *   { 'user': 'barney' },
		     *   { 'user': 'fred' }
		     * ];
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, 'user');
		     * // => ['barney', 'fred']
		     */
		    function map(collection, iteratee) {
		      var func = isArray(collection) ? arrayMap : baseMap;
		      return func(collection, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.sortBy` except that it allows specifying the sort
		     * orders of the iteratees to sort by. If `orders` is unspecified, all values
		     * are sorted in ascending order. Otherwise, specify an order of "desc" for
		     * descending or "asc" for ascending sort order of corresponding values.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @param {string[]} [orders] The sort orders of `iteratees`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 34 },
		     *   { 'user': 'fred',   'age': 40 },
		     *   { 'user': 'barney', 'age': 36 }
		     * ];
		     *
		     * // Sort by `user` in ascending order and by `age` in descending order.
		     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
		     */
		    function orderBy(collection, iteratees, orders, guard) {
		      if (collection == null) {
		        return [];
		      }
		      if (!isArray(iteratees)) {
		        iteratees = iteratees == null ? [] : [iteratees];
		      }
		      orders = guard ? undefined$1 : orders;
		      if (!isArray(orders)) {
		        orders = orders == null ? [] : [orders];
		      }
		      return baseOrderBy(collection, iteratees, orders);
		    }

		    /**
		     * Creates an array of elements split into two groups, the first of which
		     * contains elements `predicate` returns truthy for, the second of which
		     * contains elements `predicate` returns falsey for. The predicate is
		     * invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of grouped elements.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney',  'age': 36, 'active': false },
		     *   { 'user': 'fred',    'age': 40, 'active': true },
		     *   { 'user': 'pebbles', 'age': 1,  'active': false }
		     * ];
		     *
		     * _.partition(users, function(o) { return o.active; });
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.partition(users, { 'age': 1, 'active': false });
		     * // => objects for [['pebbles'], ['barney', 'fred']]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.partition(users, ['active', false]);
		     * // => objects for [['barney', 'pebbles'], ['fred']]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.partition(users, 'active');
		     * // => objects for [['fred'], ['barney', 'pebbles']]
		     */
		    var partition = createAggregator(function(result, value, key) {
		      result[key ? 0 : 1].push(value);
		    }, function() { return [[], []]; });

		    /**
		     * Reduces `collection` to a value which is the accumulated result of running
		     * each element in `collection` thru `iteratee`, where each successive
		     * invocation is supplied the return value of the previous. If `accumulator`
		     * is not given, the first element of `collection` is used as the initial
		     * value. The iteratee is invoked with four arguments:
		     * (accumulator, value, index|key, collection).
		     *
		     * Many lodash methods are guarded to work as iteratees for methods like
		     * `_.reduce`, `_.reduceRight`, and `_.transform`.
		     *
		     * The guarded methods are:
		     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
		     * and `sortBy`
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduceRight
		     * @example
		     *
		     * _.reduce([1, 2], function(sum, n) {
		     *   return sum + n;
		     * }, 0);
		     * // => 3
		     *
		     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     *   return result;
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
		     */
		    function reduce(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduce : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
		    }

		    /**
		     * This method is like `_.reduce` except that it iterates over elements of
		     * `collection` from right to left.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The initial value.
		     * @returns {*} Returns the accumulated value.
		     * @see _.reduce
		     * @example
		     *
		     * var array = [[0, 1], [2, 3], [4, 5]];
		     *
		     * _.reduceRight(array, function(flattened, other) {
		     *   return flattened.concat(other);
		     * }, []);
		     * // => [4, 5, 2, 3, 0, 1]
		     */
		    function reduceRight(collection, iteratee, accumulator) {
		      var func = isArray(collection) ? arrayReduceRight : baseReduce,
		          initAccum = arguments.length < 3;

		      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
		    }

		    /**
		     * The opposite of `_.filter`; this method returns the elements of `collection`
		     * that `predicate` does **not** return truthy for.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the new filtered array.
		     * @see _.filter
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': false },
		     *   { 'user': 'fred',   'age': 40, 'active': true }
		     * ];
		     *
		     * _.reject(users, function(o) { return !o.active; });
		     * // => objects for ['fred']
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.reject(users, { 'age': 40, 'active': true });
		     * // => objects for ['barney']
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.reject(users, ['active', false]);
		     * // => objects for ['fred']
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.reject(users, 'active');
		     * // => objects for ['barney']
		     */
		    function reject(collection, predicate) {
		      var func = isArray(collection) ? arrayFilter : baseFilter;
		      return func(collection, negate(getIteratee(predicate, 3)));
		    }

		    /**
		     * Gets a random element from `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @returns {*} Returns the random element.
		     * @example
		     *
		     * _.sample([1, 2, 3, 4]);
		     * // => 2
		     */
		    function sample(collection) {
		      var func = isArray(collection) ? arraySample : baseSample;
		      return func(collection);
		    }

		    /**
		     * Gets `n` random elements at unique keys from `collection` up to the
		     * size of `collection`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to sample.
		     * @param {number} [n=1] The number of elements to sample.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the random elements.
		     * @example
		     *
		     * _.sampleSize([1, 2, 3], 2);
		     * // => [3, 1]
		     *
		     * _.sampleSize([1, 2, 3], 4);
		     * // => [2, 3, 1]
		     */
		    function sampleSize(collection, n, guard) {
		      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
		      return func(collection, n);
		    }

		    /**
		     * Creates an array of shuffled values, using a version of the
		     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to shuffle.
		     * @returns {Array} Returns the new shuffled array.
		     * @example
		     *
		     * _.shuffle([1, 2, 3, 4]);
		     * // => [4, 1, 3, 2]
		     */
		    function shuffle(collection) {
		      var func = isArray(collection) ? arrayShuffle : baseShuffle;
		      return func(collection);
		    }

		    /**
		     * Gets the size of `collection` by returning its length for array-like
		     * values or the number of own enumerable string keyed properties for objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object|string} collection The collection to inspect.
		     * @returns {number} Returns the collection size.
		     * @example
		     *
		     * _.size([1, 2, 3]);
		     * // => 3
		     *
		     * _.size({ 'a': 1, 'b': 2 });
		     * // => 2
		     *
		     * _.size('pebbles');
		     * // => 7
		     */
		    function size(collection) {
		      if (collection == null) {
		        return 0;
		      }
		      if (isArrayLike(collection)) {
		        return isString(collection) ? stringSize(collection) : collection.length;
		      }
		      var tag = getTag(collection);
		      if (tag == mapTag || tag == setTag) {
		        return collection.size;
		      }
		      return baseKeys(collection).length;
		    }

		    /**
		     * Checks if `predicate` returns truthy for **any** element of `collection`.
		     * Iteration is stopped once `predicate` returns truthy. The predicate is
		     * invoked with three arguments: (value, index|key, collection).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {boolean} Returns `true` if any element passes the predicate check,
		     *  else `false`.
		     * @example
		     *
		     * _.some([null, 0, 'yes', false], Boolean);
		     * // => true
		     *
		     * var users = [
		     *   { 'user': 'barney', 'active': true },
		     *   { 'user': 'fred',   'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.some(users, { 'user': 'barney', 'active': false });
		     * // => false
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.some(users, ['active', false]);
		     * // => true
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.some(users, 'active');
		     * // => true
		     */
		    function some(collection, predicate, guard) {
		      var func = isArray(collection) ? arraySome : baseSome;
		      if (guard && isIterateeCall(collection, predicate, guard)) {
		        predicate = undefined$1;
		      }
		      return func(collection, getIteratee(predicate, 3));
		    }

		    /**
		     * Creates an array of elements, sorted in ascending order by the results of
		     * running each element in a collection thru each iteratee. This method
		     * performs a stable sort, that is, it preserves the original sort order of
		     * equal elements. The iteratees are invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Collection
		     * @param {Array|Object} collection The collection to iterate over.
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to sort by.
		     * @returns {Array} Returns the new sorted array.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'fred',   'age': 48 },
		     *   { 'user': 'barney', 'age': 36 },
		     *   { 'user': 'fred',   'age': 30 },
		     *   { 'user': 'barney', 'age': 34 }
		     * ];
		     *
		     * _.sortBy(users, [function(o) { return o.user; }]);
		     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
		     *
		     * _.sortBy(users, ['user', 'age']);
		     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
		     */
		    var sortBy = baseRest(function(collection, iteratees) {
		      if (collection == null) {
		        return [];
		      }
		      var length = iteratees.length;
		      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
		        iteratees = [];
		      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
		        iteratees = [iteratees[0]];
		      }
		      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
		    });

		    /*------------------------------------------------------------------------*/

		    /**
		     * Gets the timestamp of the number of milliseconds that have elapsed since
		     * the Unix epoch (1 January 1970 00:00:00 UTC).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Date
		     * @returns {number} Returns the timestamp.
		     * @example
		     *
		     * _.defer(function(stamp) {
		     *   console.log(_.now() - stamp);
		     * }, _.now());
		     * // => Logs the number of milliseconds it took for the deferred invocation.
		     */
		    var now = ctxNow || function() {
		      return root.Date.now();
		    };

		    /*------------------------------------------------------------------------*/

		    /**
		     * The opposite of `_.before`; this method creates a function that invokes
		     * `func` once it's called `n` or more times.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {number} n The number of calls before `func` is invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var saves = ['profile', 'settings'];
		     *
		     * var done = _.after(saves.length, function() {
		     *   console.log('done saving!');
		     * });
		     *
		     * _.forEach(saves, function(type) {
		     *   asyncSave({ 'type': type, 'complete': done });
		     * });
		     * // => Logs 'done saving!' after the two async saves have completed.
		     */
		    function after(n, func) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n < 1) {
		          return func.apply(this, arguments);
		        }
		      };
		    }

		    /**
		     * Creates a function that invokes `func`, with up to `n` arguments,
		     * ignoring any additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @param {number} [n=func.length] The arity cap.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
		     * // => [6, 8, 10]
		     */
		    function ary(func, n, guard) {
		      n = guard ? undefined$1 : n;
		      n = (func && n == null) ? func.length : n;
		      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
		    }

		    /**
		     * Creates a function that invokes `func`, with the `this` binding and arguments
		     * of the created function, while it's called less than `n` times. Subsequent
		     * calls to the created function return the result of the last `func` invocation.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {number} n The number of calls at which `func` is no longer invoked.
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * jQuery(element).on('click', _.before(5, addContactToList));
		     * // => Allows adding up to 4 contacts to the list.
		     */
		    function before(n, func) {
		      var result;
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      n = toInteger(n);
		      return function() {
		        if (--n > 0) {
		          result = func.apply(this, arguments);
		        }
		        if (n <= 1) {
		          func = undefined$1;
		        }
		        return result;
		      };
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of `thisArg`
		     * and `partials` prepended to the arguments it receives.
		     *
		     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
		     * property of bound functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to bind.
		     * @param {*} thisArg The `this` binding of `func`.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * function greet(greeting, punctuation) {
		     *   return greeting + ' ' + this.user + punctuation;
		     * }
		     *
		     * var object = { 'user': 'fred' };
		     *
		     * var bound = _.bind(greet, object, 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bind(greet, object, _, '!');
		     * bound('hi');
		     * // => 'hi fred!'
		     */
		    var bind = baseRest(function(func, thisArg, partials) {
		      var bitmask = WRAP_BIND_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bind));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(func, bitmask, thisArg, partials, holders);
		    });

		    /**
		     * Creates a function that invokes the method at `object[key]` with `partials`
		     * prepended to the arguments it receives.
		     *
		     * This method differs from `_.bind` by allowing bound functions to reference
		     * methods that may be redefined or don't yet exist. See
		     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
		     * for more details.
		     *
		     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Function
		     * @param {Object} object The object to invoke the method on.
		     * @param {string} key The key of the method.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new bound function.
		     * @example
		     *
		     * var object = {
		     *   'user': 'fred',
		     *   'greet': function(greeting, punctuation) {
		     *     return greeting + ' ' + this.user + punctuation;
		     *   }
		     * };
		     *
		     * var bound = _.bindKey(object, 'greet', 'hi');
		     * bound('!');
		     * // => 'hi fred!'
		     *
		     * object.greet = function(greeting, punctuation) {
		     *   return greeting + 'ya ' + this.user + punctuation;
		     * };
		     *
		     * bound('!');
		     * // => 'hiya fred!'
		     *
		     * // Bound with placeholders.
		     * var bound = _.bindKey(object, 'greet', _, '!');
		     * bound('hi');
		     * // => 'hiya fred!'
		     */
		    var bindKey = baseRest(function(object, key, partials) {
		      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
		      if (partials.length) {
		        var holders = replaceHolders(partials, getHolder(bindKey));
		        bitmask |= WRAP_PARTIAL_FLAG;
		      }
		      return createWrap(key, bitmask, object, partials, holders);
		    });

		    /**
		     * Creates a function that accepts arguments of `func` and either invokes
		     * `func` returning its result, if at least `arity` number of arguments have
		     * been provided, or returns a function that accepts the remaining `func`
		     * arguments, and so on. The arity of `func` may be specified if `func.length`
		     * is not sufficient.
		     *
		     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
		     * may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curry(abc);
		     *
		     * curried(1)(2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2)(3);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(1)(_, 3)(2);
		     * // => [1, 2, 3]
		     */
		    function curry(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curry.placeholder;
		      return result;
		    }

		    /**
		     * This method is like `_.curry` except that arguments are applied to `func`
		     * in the manner of `_.partialRight` instead of `_.partial`.
		     *
		     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for provided arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of curried functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to curry.
		     * @param {number} [arity=func.length] The arity of `func`.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the new curried function.
		     * @example
		     *
		     * var abc = function(a, b, c) {
		     *   return [a, b, c];
		     * };
		     *
		     * var curried = _.curryRight(abc);
		     *
		     * curried(3)(2)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(2, 3)(1);
		     * // => [1, 2, 3]
		     *
		     * curried(1, 2, 3);
		     * // => [1, 2, 3]
		     *
		     * // Curried with placeholders.
		     * curried(3)(1, _)(2);
		     * // => [1, 2, 3]
		     */
		    function curryRight(func, arity, guard) {
		      arity = guard ? undefined$1 : arity;
		      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
		      result.placeholder = curryRight.placeholder;
		      return result;
		    }

		    /**
		     * Creates a debounced function that delays invoking `func` until after `wait`
		     * milliseconds have elapsed since the last time the debounced function was
		     * invoked. The debounced function comes with a `cancel` method to cancel
		     * delayed `func` invocations and a `flush` method to immediately invoke them.
		     * Provide `options` to indicate whether `func` should be invoked on the
		     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
		     * with the last arguments provided to the debounced function. Subsequent
		     * calls to the debounced function return the result of the last `func`
		     * invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the debounced function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.debounce` and `_.throttle`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to debounce.
		     * @param {number} [wait=0] The number of milliseconds to delay.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=false]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {number} [options.maxWait]
		     *  The maximum time `func` is allowed to be delayed before it's invoked.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new debounced function.
		     * @example
		     *
		     * // Avoid costly calculations while the window size is in flux.
		     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
		     *
		     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
		     * jQuery(element).on('click', _.debounce(sendMail, 300, {
		     *   'leading': true,
		     *   'trailing': false
		     * }));
		     *
		     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
		     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
		     * var source = new EventSource('/stream');
		     * jQuery(source).on('message', debounced);
		     *
		     * // Cancel the trailing debounced invocation.
		     * jQuery(window).on('popstate', debounced.cancel);
		     */
		    function debounce(func, wait, options) {
		      var lastArgs,
		          lastThis,
		          maxWait,
		          result,
		          timerId,
		          lastCallTime,
		          lastInvokeTime = 0,
		          leading = false,
		          maxing = false,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      wait = toNumber(wait) || 0;
		      if (isObject(options)) {
		        leading = !!options.leading;
		        maxing = 'maxWait' in options;
		        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }

		      function invokeFunc(time) {
		        var args = lastArgs,
		            thisArg = lastThis;

		        lastArgs = lastThis = undefined$1;
		        lastInvokeTime = time;
		        result = func.apply(thisArg, args);
		        return result;
		      }

		      function leadingEdge(time) {
		        // Reset any `maxWait` timer.
		        lastInvokeTime = time;
		        // Start the timer for the trailing edge.
		        timerId = setTimeout(timerExpired, wait);
		        // Invoke the leading edge.
		        return leading ? invokeFunc(time) : result;
		      }

		      function remainingWait(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime,
		            timeWaiting = wait - timeSinceLastCall;

		        return maxing
		          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
		          : timeWaiting;
		      }

		      function shouldInvoke(time) {
		        var timeSinceLastCall = time - lastCallTime,
		            timeSinceLastInvoke = time - lastInvokeTime;

		        // Either this is the first call, activity has stopped and we're at the
		        // trailing edge, the system time has gone backwards and we're treating
		        // it as the trailing edge, or we've hit the `maxWait` limit.
		        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
		          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
		      }

		      function timerExpired() {
		        var time = now();
		        if (shouldInvoke(time)) {
		          return trailingEdge(time);
		        }
		        // Restart the timer.
		        timerId = setTimeout(timerExpired, remainingWait(time));
		      }

		      function trailingEdge(time) {
		        timerId = undefined$1;

		        // Only invoke if we have `lastArgs` which means `func` has been
		        // debounced at least once.
		        if (trailing && lastArgs) {
		          return invokeFunc(time);
		        }
		        lastArgs = lastThis = undefined$1;
		        return result;
		      }

		      function cancel() {
		        if (timerId !== undefined$1) {
		          clearTimeout(timerId);
		        }
		        lastInvokeTime = 0;
		        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
		      }

		      function flush() {
		        return timerId === undefined$1 ? result : trailingEdge(now());
		      }

		      function debounced() {
		        var time = now(),
		            isInvoking = shouldInvoke(time);

		        lastArgs = arguments;
		        lastThis = this;
		        lastCallTime = time;

		        if (isInvoking) {
		          if (timerId === undefined$1) {
		            return leadingEdge(lastCallTime);
		          }
		          if (maxing) {
		            // Handle invocations in a tight loop.
		            clearTimeout(timerId);
		            timerId = setTimeout(timerExpired, wait);
		            return invokeFunc(lastCallTime);
		          }
		        }
		        if (timerId === undefined$1) {
		          timerId = setTimeout(timerExpired, wait);
		        }
		        return result;
		      }
		      debounced.cancel = cancel;
		      debounced.flush = flush;
		      return debounced;
		    }

		    /**
		     * Defers invoking the `func` until the current call stack has cleared. Any
		     * additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to defer.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.defer(function(text) {
		     *   console.log(text);
		     * }, 'deferred');
		     * // => Logs 'deferred' after one millisecond.
		     */
		    var defer = baseRest(function(func, args) {
		      return baseDelay(func, 1, args);
		    });

		    /**
		     * Invokes `func` after `wait` milliseconds. Any additional arguments are
		     * provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to delay.
		     * @param {number} wait The number of milliseconds to delay invocation.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {number} Returns the timer id.
		     * @example
		     *
		     * _.delay(function(text) {
		     *   console.log(text);
		     * }, 1000, 'later');
		     * // => Logs 'later' after one second.
		     */
		    var delay = baseRest(function(func, wait, args) {
		      return baseDelay(func, toNumber(wait) || 0, args);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments reversed.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to flip arguments for.
		     * @returns {Function} Returns the new flipped function.
		     * @example
		     *
		     * var flipped = _.flip(function() {
		     *   return _.toArray(arguments);
		     * });
		     *
		     * flipped('a', 'b', 'c', 'd');
		     * // => ['d', 'c', 'b', 'a']
		     */
		    function flip(func) {
		      return createWrap(func, WRAP_FLIP_FLAG);
		    }

		    /**
		     * Creates a function that memoizes the result of `func`. If `resolver` is
		     * provided, it determines the cache key for storing the result based on the
		     * arguments provided to the memoized function. By default, the first argument
		     * provided to the memoized function is used as the map cache key. The `func`
		     * is invoked with the `this` binding of the memoized function.
		     *
		     * **Note:** The cache is exposed as the `cache` property on the memoized
		     * function. Its creation may be customized by replacing the `_.memoize.Cache`
		     * constructor with one whose instances implement the
		     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
		     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to have its output memoized.
		     * @param {Function} [resolver] The function to resolve the cache key.
		     * @returns {Function} Returns the new memoized function.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     * var other = { 'c': 3, 'd': 4 };
		     *
		     * var values = _.memoize(_.values);
		     * values(object);
		     * // => [1, 2]
		     *
		     * values(other);
		     * // => [3, 4]
		     *
		     * object.a = 2;
		     * values(object);
		     * // => [1, 2]
		     *
		     * // Modify the result cache.
		     * values.cache.set(object, ['a', 'b']);
		     * values(object);
		     * // => ['a', 'b']
		     *
		     * // Replace `_.memoize.Cache`.
		     * _.memoize.Cache = WeakMap;
		     */
		    function memoize(func, resolver) {
		      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      var memoized = function() {
		        var args = arguments,
		            key = resolver ? resolver.apply(this, args) : args[0],
		            cache = memoized.cache;

		        if (cache.has(key)) {
		          return cache.get(key);
		        }
		        var result = func.apply(this, args);
		        memoized.cache = cache.set(key, result) || cache;
		        return result;
		      };
		      memoized.cache = new (memoize.Cache || MapCache);
		      return memoized;
		    }

		    // Expose `MapCache`.
		    memoize.Cache = MapCache;

		    /**
		     * Creates a function that negates the result of the predicate `func`. The
		     * `func` predicate is invoked with the `this` binding and arguments of the
		     * created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} predicate The predicate to negate.
		     * @returns {Function} Returns the new negated function.
		     * @example
		     *
		     * function isEven(n) {
		     *   return n % 2 == 0;
		     * }
		     *
		     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
		     * // => [1, 3, 5]
		     */
		    function negate(predicate) {
		      if (typeof predicate != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      return function() {
		        var args = arguments;
		        switch (args.length) {
		          case 0: return !predicate.call(this);
		          case 1: return !predicate.call(this, args[0]);
		          case 2: return !predicate.call(this, args[0], args[1]);
		          case 3: return !predicate.call(this, args[0], args[1], args[2]);
		        }
		        return !predicate.apply(this, args);
		      };
		    }

		    /**
		     * Creates a function that is restricted to invoking `func` once. Repeat calls
		     * to the function return the value of the first invocation. The `func` is
		     * invoked with the `this` binding and arguments of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to restrict.
		     * @returns {Function} Returns the new restricted function.
		     * @example
		     *
		     * var initialize = _.once(createApplication);
		     * initialize();
		     * initialize();
		     * // => `createApplication` is invoked once
		     */
		    function once(func) {
		      return before(2, func);
		    }

		    /**
		     * Creates a function that invokes `func` with its arguments transformed.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Function
		     * @param {Function} func The function to wrap.
		     * @param {...(Function|Function[])} [transforms=[_.identity]]
		     *  The argument transforms.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * function doubled(n) {
		     *   return n * 2;
		     * }
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var func = _.overArgs(function(x, y) {
		     *   return [x, y];
		     * }, [square, doubled]);
		     *
		     * func(9, 3);
		     * // => [81, 6]
		     *
		     * func(10, 5);
		     * // => [100, 10]
		     */
		    var overArgs = castRest(function(func, transforms) {
		      transforms = (transforms.length == 1 && isArray(transforms[0]))
		        ? arrayMap(transforms[0], baseUnary(getIteratee()))
		        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

		      var funcsLength = transforms.length;
		      return baseRest(function(args) {
		        var index = -1,
		            length = nativeMin(args.length, funcsLength);

		        while (++index < length) {
		          args[index] = transforms[index].call(this, args[index]);
		        }
		        return apply(func, this, args);
		      });
		    });

		    /**
		     * Creates a function that invokes `func` with `partials` prepended to the
		     * arguments it receives. This method is like `_.bind` except it does **not**
		     * alter the `this` binding.
		     *
		     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.2.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var sayHelloTo = _.partial(greet, 'hello');
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     *
		     * // Partially applied with placeholders.
		     * var greetFred = _.partial(greet, _, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     */
		    var partial = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partial));
		      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * This method is like `_.partial` except that partially applied arguments
		     * are appended to the arguments it receives.
		     *
		     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
		     * builds, may be used as a placeholder for partially applied arguments.
		     *
		     * **Note:** This method doesn't set the "length" property of partially
		     * applied functions.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Function
		     * @param {Function} func The function to partially apply arguments to.
		     * @param {...*} [partials] The arguments to be partially applied.
		     * @returns {Function} Returns the new partially applied function.
		     * @example
		     *
		     * function greet(greeting, name) {
		     *   return greeting + ' ' + name;
		     * }
		     *
		     * var greetFred = _.partialRight(greet, 'fred');
		     * greetFred('hi');
		     * // => 'hi fred'
		     *
		     * // Partially applied with placeholders.
		     * var sayHelloTo = _.partialRight(greet, 'hello', _);
		     * sayHelloTo('fred');
		     * // => 'hello fred'
		     */
		    var partialRight = baseRest(function(func, partials) {
		      var holders = replaceHolders(partials, getHolder(partialRight));
		      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
		    });

		    /**
		     * Creates a function that invokes `func` with arguments arranged according
		     * to the specified `indexes` where the argument value at the first index is
		     * provided as the first argument, the argument value at the second index is
		     * provided as the second argument, and so on.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Function
		     * @param {Function} func The function to rearrange arguments for.
		     * @param {...(number|number[])} indexes The arranged argument indexes.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var rearged = _.rearg(function(a, b, c) {
		     *   return [a, b, c];
		     * }, [2, 0, 1]);
		     *
		     * rearged('b', 'c', 'a')
		     * // => ['a', 'b', 'c']
		     */
		    var rearg = flatRest(function(func, indexes) {
		      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
		    });

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * created function and arguments from `start` and beyond provided as
		     * an array.
		     *
		     * **Note:** This method is based on the
		     * [rest parameter](https://mdn.io/rest_parameters).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to apply a rest parameter to.
		     * @param {number} [start=func.length-1] The start position of the rest parameter.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.rest(function(what, names) {
		     *   return what + ' ' + _.initial(names).join(', ') +
		     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
		     * });
		     *
		     * say('hello', 'fred', 'barney', 'pebbles');
		     * // => 'hello fred, barney, & pebbles'
		     */
		    function rest(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start === undefined$1 ? start : toInteger(start);
		      return baseRest(func, start);
		    }

		    /**
		     * Creates a function that invokes `func` with the `this` binding of the
		     * create function and an array of arguments much like
		     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
		     *
		     * **Note:** This method is based on the
		     * [spread operator](https://mdn.io/spread_operator).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Function
		     * @param {Function} func The function to spread arguments over.
		     * @param {number} [start=0] The start position of the spread.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var say = _.spread(function(who, what) {
		     *   return who + ' says ' + what;
		     * });
		     *
		     * say(['fred', 'hello']);
		     * // => 'fred says hello'
		     *
		     * var numbers = Promise.all([
		     *   Promise.resolve(40),
		     *   Promise.resolve(36)
		     * ]);
		     *
		     * numbers.then(_.spread(function(x, y) {
		     *   return x + y;
		     * }));
		     * // => a Promise of 76
		     */
		    function spread(func, start) {
		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      start = start == null ? 0 : nativeMax(toInteger(start), 0);
		      return baseRest(function(args) {
		        var array = args[start],
		            otherArgs = castSlice(args, 0, start);

		        if (array) {
		          arrayPush(otherArgs, array);
		        }
		        return apply(func, this, otherArgs);
		      });
		    }

		    /**
		     * Creates a throttled function that only invokes `func` at most once per
		     * every `wait` milliseconds. The throttled function comes with a `cancel`
		     * method to cancel delayed `func` invocations and a `flush` method to
		     * immediately invoke them. Provide `options` to indicate whether `func`
		     * should be invoked on the leading and/or trailing edge of the `wait`
		     * timeout. The `func` is invoked with the last arguments provided to the
		     * throttled function. Subsequent calls to the throttled function return the
		     * result of the last `func` invocation.
		     *
		     * **Note:** If `leading` and `trailing` options are `true`, `func` is
		     * invoked on the trailing edge of the timeout only if the throttled function
		     * is invoked more than once during the `wait` timeout.
		     *
		     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
		     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
		     *
		     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
		     * for details over the differences between `_.throttle` and `_.debounce`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {Function} func The function to throttle.
		     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.leading=true]
		     *  Specify invoking on the leading edge of the timeout.
		     * @param {boolean} [options.trailing=true]
		     *  Specify invoking on the trailing edge of the timeout.
		     * @returns {Function} Returns the new throttled function.
		     * @example
		     *
		     * // Avoid excessively updating the position while scrolling.
		     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
		     *
		     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
		     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
		     * jQuery(element).on('click', throttled);
		     *
		     * // Cancel the trailing throttled invocation.
		     * jQuery(window).on('popstate', throttled.cancel);
		     */
		    function throttle(func, wait, options) {
		      var leading = true,
		          trailing = true;

		      if (typeof func != 'function') {
		        throw new TypeError(FUNC_ERROR_TEXT);
		      }
		      if (isObject(options)) {
		        leading = 'leading' in options ? !!options.leading : leading;
		        trailing = 'trailing' in options ? !!options.trailing : trailing;
		      }
		      return debounce(func, wait, {
		        'leading': leading,
		        'maxWait': wait,
		        'trailing': trailing
		      });
		    }

		    /**
		     * Creates a function that accepts up to one argument, ignoring any
		     * additional arguments.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Function
		     * @param {Function} func The function to cap arguments for.
		     * @returns {Function} Returns the new capped function.
		     * @example
		     *
		     * _.map(['6', '8', '10'], _.unary(parseInt));
		     * // => [6, 8, 10]
		     */
		    function unary(func) {
		      return ary(func, 1);
		    }

		    /**
		     * Creates a function that provides `value` to `wrapper` as its first
		     * argument. Any additional arguments provided to the function are appended
		     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
		     * binding of the created function.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Function
		     * @param {*} value The value to wrap.
		     * @param {Function} [wrapper=identity] The wrapper function.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var p = _.wrap(_.escape, function(func, text) {
		     *   return '<p>' + func(text) + '</p>';
		     * });
		     *
		     * p('fred, barney, & pebbles');
		     * // => '<p>fred, barney, &amp; pebbles</p>'
		     */
		    function wrap(value, wrapper) {
		      return partial(castFunction(wrapper), value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Casts `value` as an array if it's not one.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.4.0
		     * @category Lang
		     * @param {*} value The value to inspect.
		     * @returns {Array} Returns the cast array.
		     * @example
		     *
		     * _.castArray(1);
		     * // => [1]
		     *
		     * _.castArray({ 'a': 1 });
		     * // => [{ 'a': 1 }]
		     *
		     * _.castArray('abc');
		     * // => ['abc']
		     *
		     * _.castArray(null);
		     * // => [null]
		     *
		     * _.castArray(undefined);
		     * // => [undefined]
		     *
		     * _.castArray();
		     * // => []
		     *
		     * var array = [1, 2, 3];
		     * console.log(_.castArray(array) === array);
		     * // => true
		     */
		    function castArray() {
		      if (!arguments.length) {
		        return [];
		      }
		      var value = arguments[0];
		      return isArray(value) ? value : [value];
		    }

		    /**
		     * Creates a shallow clone of `value`.
		     *
		     * **Note:** This method is loosely based on the
		     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
		     * and supports cloning arrays, array buffers, booleans, date objects, maps,
		     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
		     * arrays. The own enumerable properties of `arguments` objects are cloned
		     * as plain objects. An empty object is returned for uncloneable values such
		     * as error objects, functions, DOM nodes, and WeakMaps.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeep
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var shallow = _.clone(objects);
		     * console.log(shallow[0] === objects[0]);
		     * // => true
		     */
		    function clone(value) {
		      return baseClone(value, CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.clone` except that it accepts `customizer` which
		     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
		     * cloning is handled by the method instead. The `customizer` is invoked with
		     * up to four arguments; (value [, index|key, object, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the cloned value.
		     * @see _.cloneDeepWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(false);
		     *   }
		     * }
		     *
		     * var el = _.cloneWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 0
		     */
		    function cloneWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * This method is like `_.clone` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.clone
		     * @example
		     *
		     * var objects = [{ 'a': 1 }, { 'b': 2 }];
		     *
		     * var deep = _.cloneDeep(objects);
		     * console.log(deep[0] === objects[0]);
		     * // => false
		     */
		    function cloneDeep(value) {
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
		    }

		    /**
		     * This method is like `_.cloneWith` except that it recursively clones `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to recursively clone.
		     * @param {Function} [customizer] The function to customize cloning.
		     * @returns {*} Returns the deep cloned value.
		     * @see _.cloneWith
		     * @example
		     *
		     * function customizer(value) {
		     *   if (_.isElement(value)) {
		     *     return value.cloneNode(true);
		     *   }
		     * }
		     *
		     * var el = _.cloneDeepWith(document.body, customizer);
		     *
		     * console.log(el === document.body);
		     * // => false
		     * console.log(el.nodeName);
		     * // => 'BODY'
		     * console.log(el.childNodes.length);
		     * // => 20
		     */
		    function cloneDeepWith(value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
		    }

		    /**
		     * Checks if `object` conforms to `source` by invoking the predicate
		     * properties of `source` with the corresponding property values of `object`.
		     *
		     * **Note:** This method is equivalent to `_.conforms` when `source` is
		     * partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
		     * // => true
		     *
		     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
		     * // => false
		     */
		    function conformsTo(object, source) {
		      return source == null || baseConformsTo(object, source, keys(source));
		    }

		    /**
		     * Performs a
		     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		     * comparison between two values to determine if they are equivalent.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.eq(object, object);
		     * // => true
		     *
		     * _.eq(object, other);
		     * // => false
		     *
		     * _.eq('a', 'a');
		     * // => true
		     *
		     * _.eq('a', Object('a'));
		     * // => false
		     *
		     * _.eq(NaN, NaN);
		     * // => true
		     */
		    function eq(value, other) {
		      return value === other || (value !== value && other !== other);
		    }

		    /**
		     * Checks if `value` is greater than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than `other`,
		     *  else `false`.
		     * @see _.lt
		     * @example
		     *
		     * _.gt(3, 1);
		     * // => true
		     *
		     * _.gt(3, 3);
		     * // => false
		     *
		     * _.gt(1, 3);
		     * // => false
		     */
		    var gt = createRelationalOperation(baseGt);

		    /**
		     * Checks if `value` is greater than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is greater than or equal to
		     *  `other`, else `false`.
		     * @see _.lte
		     * @example
		     *
		     * _.gte(3, 1);
		     * // => true
		     *
		     * _.gte(3, 3);
		     * // => true
		     *
		     * _.gte(1, 3);
		     * // => false
		     */
		    var gte = createRelationalOperation(function(value, other) {
		      return value >= other;
		    });

		    /**
		     * Checks if `value` is likely an `arguments` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArguments(function() { return arguments; }());
		     * // => true
		     *
		     * _.isArguments([1, 2, 3]);
		     * // => false
		     */
		    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		        !propertyIsEnumerable.call(value, 'callee');
		    };

		    /**
		     * Checks if `value` is classified as an `Array` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		     * @example
		     *
		     * _.isArray([1, 2, 3]);
		     * // => true
		     *
		     * _.isArray(document.body.children);
		     * // => false
		     *
		     * _.isArray('abc');
		     * // => false
		     *
		     * _.isArray(_.noop);
		     * // => false
		     */
		    var isArray = Array.isArray;

		    /**
		     * Checks if `value` is classified as an `ArrayBuffer` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
		     * @example
		     *
		     * _.isArrayBuffer(new ArrayBuffer(2));
		     * // => true
		     *
		     * _.isArrayBuffer(new Array(2));
		     * // => false
		     */
		    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

		    /**
		     * Checks if `value` is array-like. A value is considered array-like if it's
		     * not a function and has a `value.length` that's an integer greater than or
		     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		     * @example
		     *
		     * _.isArrayLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLike(document.body.children);
		     * // => true
		     *
		     * _.isArrayLike('abc');
		     * // => true
		     *
		     * _.isArrayLike(_.noop);
		     * // => false
		     */
		    function isArrayLike(value) {
		      return value != null && isLength(value.length) && !isFunction(value);
		    }

		    /**
		     * This method is like `_.isArrayLike` except that it also checks if `value`
		     * is an object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an array-like object,
		     *  else `false`.
		     * @example
		     *
		     * _.isArrayLikeObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isArrayLikeObject(document.body.children);
		     * // => true
		     *
		     * _.isArrayLikeObject('abc');
		     * // => false
		     *
		     * _.isArrayLikeObject(_.noop);
		     * // => false
		     */
		    function isArrayLikeObject(value) {
		      return isObjectLike(value) && isArrayLike(value);
		    }

		    /**
		     * Checks if `value` is classified as a boolean primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
		     * @example
		     *
		     * _.isBoolean(false);
		     * // => true
		     *
		     * _.isBoolean(null);
		     * // => false
		     */
		    function isBoolean(value) {
		      return value === true || value === false ||
		        (isObjectLike(value) && baseGetTag(value) == boolTag);
		    }

		    /**
		     * Checks if `value` is a buffer.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		     * @example
		     *
		     * _.isBuffer(new Buffer(2));
		     * // => true
		     *
		     * _.isBuffer(new Uint8Array(2));
		     * // => false
		     */
		    var isBuffer = nativeIsBuffer || stubFalse;

		    /**
		     * Checks if `value` is classified as a `Date` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
		     * @example
		     *
		     * _.isDate(new Date);
		     * // => true
		     *
		     * _.isDate('Mon April 23 2012');
		     * // => false
		     */
		    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

		    /**
		     * Checks if `value` is likely a DOM element.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
		     * @example
		     *
		     * _.isElement(document.body);
		     * // => true
		     *
		     * _.isElement('<body>');
		     * // => false
		     */
		    function isElement(value) {
		      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
		    }

		    /**
		     * Checks if `value` is an empty object, collection, map, or set.
		     *
		     * Objects are considered empty if they have no own enumerable string keyed
		     * properties.
		     *
		     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
		     * jQuery-like collections are considered empty if they have a `length` of `0`.
		     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
		     * @example
		     *
		     * _.isEmpty(null);
		     * // => true
		     *
		     * _.isEmpty(true);
		     * // => true
		     *
		     * _.isEmpty(1);
		     * // => true
		     *
		     * _.isEmpty([1, 2, 3]);
		     * // => false
		     *
		     * _.isEmpty({ 'a': 1 });
		     * // => false
		     */
		    function isEmpty(value) {
		      if (value == null) {
		        return true;
		      }
		      if (isArrayLike(value) &&
		          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
		            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
		        return !value.length;
		      }
		      var tag = getTag(value);
		      if (tag == mapTag || tag == setTag) {
		        return !value.size;
		      }
		      if (isPrototype(value)) {
		        return !baseKeys(value).length;
		      }
		      for (var key in value) {
		        if (hasOwnProperty.call(value, key)) {
		          return false;
		        }
		      }
		      return true;
		    }

		    /**
		     * Performs a deep comparison between two values to determine if they are
		     * equivalent.
		     *
		     * **Note:** This method supports comparing arrays, array buffers, booleans,
		     * date objects, error objects, maps, numbers, `Object` objects, regexes,
		     * sets, strings, symbols, and typed arrays. `Object` objects are compared
		     * by their own, not inherited, enumerable properties. Functions and DOM
		     * nodes are compared by strict equality, i.e. `===`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     * var other = { 'a': 1 };
		     *
		     * _.isEqual(object, other);
		     * // => true
		     *
		     * object === other;
		     * // => false
		     */
		    function isEqual(value, other) {
		      return baseIsEqual(value, other);
		    }

		    /**
		     * This method is like `_.isEqual` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with up to
		     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, othValue) {
		     *   if (isGreeting(objValue) && isGreeting(othValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var array = ['hello', 'goodbye'];
		     * var other = ['hi', 'goodbye'];
		     *
		     * _.isEqualWith(array, other, customizer);
		     * // => true
		     */
		    function isEqualWith(value, other, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      var result = customizer ? customizer(value, other) : undefined$1;
		      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
		    }

		    /**
		     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
		     * `SyntaxError`, `TypeError`, or `URIError` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
		     * @example
		     *
		     * _.isError(new Error);
		     * // => true
		     *
		     * _.isError(Error);
		     * // => false
		     */
		    function isError(value) {
		      if (!isObjectLike(value)) {
		        return false;
		      }
		      var tag = baseGetTag(value);
		      return tag == errorTag || tag == domExcTag ||
		        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
		    }

		    /**
		     * Checks if `value` is a finite primitive number.
		     *
		     * **Note:** This method is based on
		     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
		     * @example
		     *
		     * _.isFinite(3);
		     * // => true
		     *
		     * _.isFinite(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isFinite(Infinity);
		     * // => false
		     *
		     * _.isFinite('3');
		     * // => false
		     */
		    function isFinite(value) {
		      return typeof value == 'number' && nativeIsFinite(value);
		    }

		    /**
		     * Checks if `value` is classified as a `Function` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		     * @example
		     *
		     * _.isFunction(_);
		     * // => true
		     *
		     * _.isFunction(/abc/);
		     * // => false
		     */
		    function isFunction(value) {
		      if (!isObject(value)) {
		        return false;
		      }
		      // The use of `Object#toString` avoids issues with the `typeof` operator
		      // in Safari 9 which returns 'object' for typed arrays and other constructors.
		      var tag = baseGetTag(value);
		      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		    }

		    /**
		     * Checks if `value` is an integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
		     * @example
		     *
		     * _.isInteger(3);
		     * // => true
		     *
		     * _.isInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isInteger(Infinity);
		     * // => false
		     *
		     * _.isInteger('3');
		     * // => false
		     */
		    function isInteger(value) {
		      return typeof value == 'number' && value == toInteger(value);
		    }

		    /**
		     * Checks if `value` is a valid array-like length.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		     * @example
		     *
		     * _.isLength(3);
		     * // => true
		     *
		     * _.isLength(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isLength(Infinity);
		     * // => false
		     *
		     * _.isLength('3');
		     * // => false
		     */
		    function isLength(value) {
		      return typeof value == 'number' &&
		        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is the
		     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		     * @example
		     *
		     * _.isObject({});
		     * // => true
		     *
		     * _.isObject([1, 2, 3]);
		     * // => true
		     *
		     * _.isObject(_.noop);
		     * // => true
		     *
		     * _.isObject(null);
		     * // => false
		     */
		    function isObject(value) {
		      var type = typeof value;
		      return value != null && (type == 'object' || type == 'function');
		    }

		    /**
		     * Checks if `value` is object-like. A value is object-like if it's not `null`
		     * and has a `typeof` result of "object".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		     * @example
		     *
		     * _.isObjectLike({});
		     * // => true
		     *
		     * _.isObjectLike([1, 2, 3]);
		     * // => true
		     *
		     * _.isObjectLike(_.noop);
		     * // => false
		     *
		     * _.isObjectLike(null);
		     * // => false
		     */
		    function isObjectLike(value) {
		      return value != null && typeof value == 'object';
		    }

		    /**
		     * Checks if `value` is classified as a `Map` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
		     * @example
		     *
		     * _.isMap(new Map);
		     * // => true
		     *
		     * _.isMap(new WeakMap);
		     * // => false
		     */
		    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

		    /**
		     * Performs a partial deep comparison between `object` and `source` to
		     * determine if `object` contains equivalent property values.
		     *
		     * **Note:** This method is equivalent to `_.matches` when `source` is
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2 };
		     *
		     * _.isMatch(object, { 'b': 2 });
		     * // => true
		     *
		     * _.isMatch(object, { 'b': 1 });
		     * // => false
		     */
		    function isMatch(object, source) {
		      return object === source || baseIsMatch(object, source, getMatchData(source));
		    }

		    /**
		     * This method is like `_.isMatch` except that it accepts `customizer` which
		     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
		     * are handled by the method instead. The `customizer` is invoked with five
		     * arguments: (objValue, srcValue, index|key, object, source).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {Object} object The object to inspect.
		     * @param {Object} source The object of property values to match.
		     * @param {Function} [customizer] The function to customize comparisons.
		     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
		     * @example
		     *
		     * function isGreeting(value) {
		     *   return /^h(?:i|ello)$/.test(value);
		     * }
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
		     *     return true;
		     *   }
		     * }
		     *
		     * var object = { 'greeting': 'hello' };
		     * var source = { 'greeting': 'hi' };
		     *
		     * _.isMatchWith(object, source, customizer);
		     * // => true
		     */
		    function isMatchWith(object, source, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return baseIsMatch(object, source, getMatchData(source), customizer);
		    }

		    /**
		     * Checks if `value` is `NaN`.
		     *
		     * **Note:** This method is based on
		     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
		     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
		     * `undefined` and other non-number values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
		     * @example
		     *
		     * _.isNaN(NaN);
		     * // => true
		     *
		     * _.isNaN(new Number(NaN));
		     * // => true
		     *
		     * isNaN(undefined);
		     * // => true
		     *
		     * _.isNaN(undefined);
		     * // => false
		     */
		    function isNaN(value) {
		      // An `NaN` primitive is the only value that is not equal to itself.
		      // Perform the `toStringTag` check first to avoid errors with some
		      // ActiveX objects in IE.
		      return isNumber(value) && value != +value;
		    }

		    /**
		     * Checks if `value` is a pristine native function.
		     *
		     * **Note:** This method can't reliably detect native functions in the presence
		     * of the core-js package because core-js circumvents this kind of detection.
		     * Despite multiple requests, the core-js maintainer has made it clear: any
		     * attempt to fix the detection will be obstructed. As a result, we're left
		     * with little choice but to throw an error. Unfortunately, this also affects
		     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
		     * which rely on core-js.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a native function,
		     *  else `false`.
		     * @example
		     *
		     * _.isNative(Array.prototype.push);
		     * // => true
		     *
		     * _.isNative(_);
		     * // => false
		     */
		    function isNative(value) {
		      if (isMaskable(value)) {
		        throw new Error(CORE_ERROR_TEXT);
		      }
		      return baseIsNative(value);
		    }

		    /**
		     * Checks if `value` is `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
		     * @example
		     *
		     * _.isNull(null);
		     * // => true
		     *
		     * _.isNull(void 0);
		     * // => false
		     */
		    function isNull(value) {
		      return value === null;
		    }

		    /**
		     * Checks if `value` is `null` or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
		     * @example
		     *
		     * _.isNil(null);
		     * // => true
		     *
		     * _.isNil(void 0);
		     * // => true
		     *
		     * _.isNil(NaN);
		     * // => false
		     */
		    function isNil(value) {
		      return value == null;
		    }

		    /**
		     * Checks if `value` is classified as a `Number` primitive or object.
		     *
		     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
		     * classified as numbers, use the `_.isFinite` method.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
		     * @example
		     *
		     * _.isNumber(3);
		     * // => true
		     *
		     * _.isNumber(Number.MIN_VALUE);
		     * // => true
		     *
		     * _.isNumber(Infinity);
		     * // => true
		     *
		     * _.isNumber('3');
		     * // => false
		     */
		    function isNumber(value) {
		      return typeof value == 'number' ||
		        (isObjectLike(value) && baseGetTag(value) == numberTag);
		    }

		    /**
		     * Checks if `value` is a plain object, that is, an object created by the
		     * `Object` constructor or one with a `[[Prototype]]` of `null`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.8.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * _.isPlainObject(new Foo);
		     * // => false
		     *
		     * _.isPlainObject([1, 2, 3]);
		     * // => false
		     *
		     * _.isPlainObject({ 'x': 0, 'y': 0 });
		     * // => true
		     *
		     * _.isPlainObject(Object.create(null));
		     * // => true
		     */
		    function isPlainObject(value) {
		      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
		        return false;
		      }
		      var proto = getPrototype(value);
		      if (proto === null) {
		        return true;
		      }
		      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
		      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
		        funcToString.call(Ctor) == objectCtorString;
		    }

		    /**
		     * Checks if `value` is classified as a `RegExp` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.1.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
		     * @example
		     *
		     * _.isRegExp(/abc/);
		     * // => true
		     *
		     * _.isRegExp('/abc/');
		     * // => false
		     */
		    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

		    /**
		     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
		     * double precision number which isn't the result of a rounded unsafe integer.
		     *
		     * **Note:** This method is based on
		     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
		     * @example
		     *
		     * _.isSafeInteger(3);
		     * // => true
		     *
		     * _.isSafeInteger(Number.MIN_VALUE);
		     * // => false
		     *
		     * _.isSafeInteger(Infinity);
		     * // => false
		     *
		     * _.isSafeInteger('3');
		     * // => false
		     */
		    function isSafeInteger(value) {
		      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
		    }

		    /**
		     * Checks if `value` is classified as a `Set` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
		     * @example
		     *
		     * _.isSet(new Set);
		     * // => true
		     *
		     * _.isSet(new WeakSet);
		     * // => false
		     */
		    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

		    /**
		     * Checks if `value` is classified as a `String` primitive or object.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
		     * @example
		     *
		     * _.isString('abc');
		     * // => true
		     *
		     * _.isString(1);
		     * // => false
		     */
		    function isString(value) {
		      return typeof value == 'string' ||
		        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
		    }

		    /**
		     * Checks if `value` is classified as a `Symbol` primitive or object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
		     * @example
		     *
		     * _.isSymbol(Symbol.iterator);
		     * // => true
		     *
		     * _.isSymbol('abc');
		     * // => false
		     */
		    function isSymbol(value) {
		      return typeof value == 'symbol' ||
		        (isObjectLike(value) && baseGetTag(value) == symbolTag);
		    }

		    /**
		     * Checks if `value` is classified as a typed array.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		     * @example
		     *
		     * _.isTypedArray(new Uint8Array);
		     * // => true
		     *
		     * _.isTypedArray([]);
		     * // => false
		     */
		    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		    /**
		     * Checks if `value` is `undefined`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
		     * @example
		     *
		     * _.isUndefined(void 0);
		     * // => true
		     *
		     * _.isUndefined(null);
		     * // => false
		     */
		    function isUndefined(value) {
		      return value === undefined$1;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakMap` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
		     * @example
		     *
		     * _.isWeakMap(new WeakMap);
		     * // => true
		     *
		     * _.isWeakMap(new Map);
		     * // => false
		     */
		    function isWeakMap(value) {
		      return isObjectLike(value) && getTag(value) == weakMapTag;
		    }

		    /**
		     * Checks if `value` is classified as a `WeakSet` object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.3.0
		     * @category Lang
		     * @param {*} value The value to check.
		     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
		     * @example
		     *
		     * _.isWeakSet(new WeakSet);
		     * // => true
		     *
		     * _.isWeakSet(new Set);
		     * // => false
		     */
		    function isWeakSet(value) {
		      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
		    }

		    /**
		     * Checks if `value` is less than `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than `other`,
		     *  else `false`.
		     * @see _.gt
		     * @example
		     *
		     * _.lt(1, 3);
		     * // => true
		     *
		     * _.lt(3, 3);
		     * // => false
		     *
		     * _.lt(3, 1);
		     * // => false
		     */
		    var lt = createRelationalOperation(baseLt);

		    /**
		     * Checks if `value` is less than or equal to `other`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.9.0
		     * @category Lang
		     * @param {*} value The value to compare.
		     * @param {*} other The other value to compare.
		     * @returns {boolean} Returns `true` if `value` is less than or equal to
		     *  `other`, else `false`.
		     * @see _.gte
		     * @example
		     *
		     * _.lte(1, 3);
		     * // => true
		     *
		     * _.lte(3, 3);
		     * // => true
		     *
		     * _.lte(3, 1);
		     * // => false
		     */
		    var lte = createRelationalOperation(function(value, other) {
		      return value <= other;
		    });

		    /**
		     * Converts `value` to an array.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the converted array.
		     * @example
		     *
		     * _.toArray({ 'a': 1, 'b': 2 });
		     * // => [1, 2]
		     *
		     * _.toArray('abc');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toArray(1);
		     * // => []
		     *
		     * _.toArray(null);
		     * // => []
		     */
		    function toArray(value) {
		      if (!value) {
		        return [];
		      }
		      if (isArrayLike(value)) {
		        return isString(value) ? stringToArray(value) : copyArray(value);
		      }
		      if (symIterator && value[symIterator]) {
		        return iteratorToArray(value[symIterator]());
		      }
		      var tag = getTag(value),
		          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

		      return func(value);
		    }

		    /**
		     * Converts `value` to a finite number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.12.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted number.
		     * @example
		     *
		     * _.toFinite(3.2);
		     * // => 3.2
		     *
		     * _.toFinite(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toFinite(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toFinite('3.2');
		     * // => 3.2
		     */
		    function toFinite(value) {
		      if (!value) {
		        return value === 0 ? value : 0;
		      }
		      value = toNumber(value);
		      if (value === INFINITY || value === -INFINITY) {
		        var sign = (value < 0 ? -1 : 1);
		        return sign * MAX_INTEGER;
		      }
		      return value === value ? value : 0;
		    }

		    /**
		     * Converts `value` to an integer.
		     *
		     * **Note:** This method is loosely based on
		     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toInteger(3.2);
		     * // => 3
		     *
		     * _.toInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toInteger(Infinity);
		     * // => 1.7976931348623157e+308
		     *
		     * _.toInteger('3.2');
		     * // => 3
		     */
		    function toInteger(value) {
		      var result = toFinite(value),
		          remainder = result % 1;

		      return result === result ? (remainder ? result - remainder : result) : 0;
		    }

		    /**
		     * Converts `value` to an integer suitable for use as the length of an
		     * array-like object.
		     *
		     * **Note:** This method is based on
		     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toLength(3.2);
		     * // => 3
		     *
		     * _.toLength(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toLength(Infinity);
		     * // => 4294967295
		     *
		     * _.toLength('3.2');
		     * // => 3
		     */
		    function toLength(value) {
		      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
		    }

		    /**
		     * Converts `value` to a number.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to process.
		     * @returns {number} Returns the number.
		     * @example
		     *
		     * _.toNumber(3.2);
		     * // => 3.2
		     *
		     * _.toNumber(Number.MIN_VALUE);
		     * // => 5e-324
		     *
		     * _.toNumber(Infinity);
		     * // => Infinity
		     *
		     * _.toNumber('3.2');
		     * // => 3.2
		     */
		    function toNumber(value) {
		      if (typeof value == 'number') {
		        return value;
		      }
		      if (isSymbol(value)) {
		        return NAN;
		      }
		      if (isObject(value)) {
		        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
		        value = isObject(other) ? (other + '') : other;
		      }
		      if (typeof value != 'string') {
		        return value === 0 ? value : +value;
		      }
		      value = baseTrim(value);
		      var isBinary = reIsBinary.test(value);
		      return (isBinary || reIsOctal.test(value))
		        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
		        : (reIsBadHex.test(value) ? NAN : +value);
		    }

		    /**
		     * Converts `value` to a plain object flattening inherited enumerable string
		     * keyed properties of `value` to own properties of the plain object.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {Object} Returns the converted plain object.
		     * @example
		     *
		     * function Foo() {
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.assign({ 'a': 1 }, new Foo);
		     * // => { 'a': 1, 'b': 2 }
		     *
		     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		     * // => { 'a': 1, 'b': 2, 'c': 3 }
		     */
		    function toPlainObject(value) {
		      return copyObject(value, keysIn(value));
		    }

		    /**
		     * Converts `value` to a safe integer. A safe integer can be compared and
		     * represented correctly.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.toSafeInteger(3.2);
		     * // => 3
		     *
		     * _.toSafeInteger(Number.MIN_VALUE);
		     * // => 0
		     *
		     * _.toSafeInteger(Infinity);
		     * // => 9007199254740991
		     *
		     * _.toSafeInteger('3.2');
		     * // => 3
		     */
		    function toSafeInteger(value) {
		      return value
		        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
		        : (value === 0 ? value : 0);
		    }

		    /**
		     * Converts `value` to a string. An empty string is returned for `null`
		     * and `undefined` values. The sign of `-0` is preserved.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Lang
		     * @param {*} value The value to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.toString(null);
		     * // => ''
		     *
		     * _.toString(-0);
		     * // => '-0'
		     *
		     * _.toString([1, 2, 3]);
		     * // => '1,2,3'
		     */
		    function toString(value) {
		      return value == null ? '' : baseToString(value);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Assigns own enumerable string keyed properties of source objects to the
		     * destination object. Source objects are applied from left to right.
		     * Subsequent sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object` and is loosely based on
		     * [`Object.assign`](https://mdn.io/Object/assign).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assignIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assign({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var assign = createAssigner(function(object, source) {
		      if (isPrototype(source) || isArrayLike(source)) {
		        copyObject(source, keys(source), object);
		        return;
		      }
		      for (var key in source) {
		        if (hasOwnProperty.call(source, key)) {
		          assignValue(object, key, source[key]);
		        }
		      }
		    });

		    /**
		     * This method is like `_.assign` except that it iterates over own and
		     * inherited source properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extend
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.assign
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     * }
		     *
		     * function Bar() {
		     *   this.c = 3;
		     * }
		     *
		     * Foo.prototype.b = 2;
		     * Bar.prototype.d = 4;
		     *
		     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
		     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
		     */
		    var assignIn = createAssigner(function(object, source) {
		      copyObject(source, keysIn(source), object);
		    });

		    /**
		     * This method is like `_.assignIn` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias extendWith
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignInWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keysIn(source), object, customizer);
		    });

		    /**
		     * This method is like `_.assign` except that it accepts `customizer`
		     * which is invoked to produce the assigned values. If `customizer` returns
		     * `undefined`, assignment is handled by the method instead. The `customizer`
		     * is invoked with five arguments: (objValue, srcValue, key, object, source).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @see _.assignInWith
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   return _.isUndefined(objValue) ? srcValue : objValue;
		     * }
		     *
		     * var defaults = _.partialRight(_.assignWith, customizer);
		     *
		     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
		      copyObject(source, keys(source), object, customizer);
		    });

		    /**
		     * Creates an array of values corresponding to `paths` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Array} Returns the picked values.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
		     *
		     * _.at(object, ['a[0].b.c', 'a[1]']);
		     * // => [3, 4]
		     */
		    var at = flatRest(baseAt);

		    /**
		     * Creates an object that inherits from the `prototype` object. If a
		     * `properties` object is given, its own enumerable string keyed properties
		     * are assigned to the created object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Object
		     * @param {Object} prototype The object to inherit from.
		     * @param {Object} [properties] The properties to assign to the object.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * function Shape() {
		     *   this.x = 0;
		     *   this.y = 0;
		     * }
		     *
		     * function Circle() {
		     *   Shape.call(this);
		     * }
		     *
		     * Circle.prototype = _.create(Shape.prototype, {
		     *   'constructor': Circle
		     * });
		     *
		     * var circle = new Circle;
		     * circle instanceof Circle;
		     * // => true
		     *
		     * circle instanceof Shape;
		     * // => true
		     */
		    function create(prototype, properties) {
		      var result = baseCreate(prototype);
		      return properties == null ? result : baseAssign(result, properties);
		    }

		    /**
		     * Assigns own and inherited enumerable string keyed properties of source
		     * objects to the destination object for all destination properties that
		     * resolve to `undefined`. Source objects are applied from left to right.
		     * Once a property is set, additional values of the same property are ignored.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaultsDeep
		     * @example
		     *
		     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
		     * // => { 'a': 1, 'b': 2 }
		     */
		    var defaults = baseRest(function(object, sources) {
		      object = Object(object);

		      var index = -1;
		      var length = sources.length;
		      var guard = length > 2 ? sources[2] : undefined$1;

		      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		        length = 1;
		      }

		      while (++index < length) {
		        var source = sources[index];
		        var props = keysIn(source);
		        var propsIndex = -1;
		        var propsLength = props.length;

		        while (++propsIndex < propsLength) {
		          var key = props[propsIndex];
		          var value = object[key];

		          if (value === undefined$1 ||
		              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
		            object[key] = source[key];
		          }
		        }
		      }

		      return object;
		    });

		    /**
		     * This method is like `_.defaults` except that it recursively assigns
		     * default properties.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @see _.defaults
		     * @example
		     *
		     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
		     * // => { 'a': { 'b': 2, 'c': 3 } }
		     */
		    var defaultsDeep = baseRest(function(args) {
		      args.push(undefined$1, customDefaultsMerge);
		      return apply(mergeWith, undefined$1, args);
		    });

		    /**
		     * This method is like `_.find` except that it returns the key of the first
		     * element `predicate` returns truthy for instead of the element itself.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findKey(users, function(o) { return o.age < 40; });
		     * // => 'barney' (iteration order is not guaranteed)
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findKey(users, { 'age': 1, 'active': true });
		     * // => 'pebbles'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findKey(users, 'active');
		     * // => 'barney'
		     */
		    function findKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
		    }

		    /**
		     * This method is like `_.findKey` except that it iterates over elements of
		     * a collection in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @param {Function} [predicate=_.identity] The function invoked per iteration.
		     * @returns {string|undefined} Returns the key of the matched element,
		     *  else `undefined`.
		     * @example
		     *
		     * var users = {
		     *   'barney':  { 'age': 36, 'active': true },
		     *   'fred':    { 'age': 40, 'active': false },
		     *   'pebbles': { 'age': 1,  'active': true }
		     * };
		     *
		     * _.findLastKey(users, function(o) { return o.age < 40; });
		     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.findLastKey(users, { 'age': 36, 'active': true });
		     * // => 'barney'
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.findLastKey(users, ['active', false]);
		     * // => 'fred'
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.findLastKey(users, 'active');
		     * // => 'pebbles'
		     */
		    function findLastKey(object, predicate) {
		      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
		    }

		    /**
		     * Iterates over own and inherited enumerable string keyed properties of an
		     * object and invokes `iteratee` for each property. The iteratee is invoked
		     * with three arguments: (value, key, object). Iteratee functions may exit
		     * iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forInRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forIn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
		     */
		    function forIn(object, iteratee) {
		      return object == null
		        ? object
		        : baseFor(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * This method is like `_.forIn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forInRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
		     */
		    function forInRight(object, iteratee) {
		      return object == null
		        ? object
		        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
		    }

		    /**
		     * Iterates over own enumerable string keyed properties of an object and
		     * invokes `iteratee` for each property. The iteratee is invoked with three
		     * arguments: (value, key, object). Iteratee functions may exit iteration
		     * early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwnRight
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwn(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
		     */
		    function forOwn(object, iteratee) {
		      return object && baseForOwn(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * This method is like `_.forOwn` except that it iterates over properties of
		     * `object` in the opposite order.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.0.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns `object`.
		     * @see _.forOwn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.forOwnRight(new Foo, function(value, key) {
		     *   console.log(key);
		     * });
		     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
		     */
		    function forOwnRight(object, iteratee) {
		      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
		    }

		    /**
		     * Creates an array of function property names from own enumerable properties
		     * of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functionsIn
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functions(new Foo);
		     * // => ['a', 'b']
		     */
		    function functions(object) {
		      return object == null ? [] : baseFunctions(object, keys(object));
		    }

		    /**
		     * Creates an array of function property names from own and inherited
		     * enumerable properties of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to inspect.
		     * @returns {Array} Returns the function names.
		     * @see _.functions
		     * @example
		     *
		     * function Foo() {
		     *   this.a = _.constant('a');
		     *   this.b = _.constant('b');
		     * }
		     *
		     * Foo.prototype.c = _.constant('c');
		     *
		     * _.functionsIn(new Foo);
		     * // => ['a', 'b', 'c']
		     */
		    function functionsIn(object) {
		      return object == null ? [] : baseFunctions(object, keysIn(object));
		    }

		    /**
		     * Gets the value at `path` of `object`. If the resolved value is
		     * `undefined`, the `defaultValue` is returned in its place.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.get(object, 'a[0].b.c');
		     * // => 3
		     *
		     * _.get(object, ['a', '0', 'b', 'c']);
		     * // => 3
		     *
		     * _.get(object, 'a.b.c', 'default');
		     * // => 'default'
		     */
		    function get(object, path, defaultValue) {
		      var result = object == null ? undefined$1 : baseGet(object, path);
		      return result === undefined$1 ? defaultValue : result;
		    }

		    /**
		     * Checks if `path` is a direct property of `object`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = { 'a': { 'b': 2 } };
		     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.has(object, 'a');
		     * // => true
		     *
		     * _.has(object, 'a.b');
		     * // => true
		     *
		     * _.has(object, ['a', 'b']);
		     * // => true
		     *
		     * _.has(other, 'a');
		     * // => false
		     */
		    function has(object, path) {
		      return object != null && hasPath(object, path, baseHas);
		    }

		    /**
		     * Checks if `path` is a direct or inherited property of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path to check.
		     * @returns {boolean} Returns `true` if `path` exists, else `false`.
		     * @example
		     *
		     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
		     *
		     * _.hasIn(object, 'a');
		     * // => true
		     *
		     * _.hasIn(object, 'a.b');
		     * // => true
		     *
		     * _.hasIn(object, ['a', 'b']);
		     * // => true
		     *
		     * _.hasIn(object, 'b');
		     * // => false
		     */
		    function hasIn(object, path) {
		      return object != null && hasPath(object, path, baseHasIn);
		    }

		    /**
		     * Creates an object composed of the inverted keys and values of `object`.
		     * If `object` contains duplicate values, subsequent values overwrite
		     * property assignments of previous values.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invert(object);
		     * // => { '1': 'c', '2': 'b' }
		     */
		    var invert = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      result[value] = key;
		    }, constant(identity));

		    /**
		     * This method is like `_.invert` except that the inverted object is generated
		     * from the results of running each element of `object` thru `iteratee`. The
		     * corresponding inverted value of each inverted key is an array of keys
		     * responsible for generating the inverted value. The iteratee is invoked
		     * with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.1.0
		     * @category Object
		     * @param {Object} object The object to invert.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {Object} Returns the new inverted object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': 2, 'c': 1 };
		     *
		     * _.invertBy(object);
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     *
		     * _.invertBy(object, function(value) {
		     *   return 'group' + value;
		     * });
		     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
		     */
		    var invertBy = createInverter(function(result, value, key) {
		      if (value != null &&
		          typeof value.toString != 'function') {
		        value = nativeObjectToString.call(value);
		      }

		      if (hasOwnProperty.call(result, value)) {
		        result[value].push(key);
		      } else {
		        result[value] = [key];
		      }
		    }, getIteratee);

		    /**
		     * Invokes the method at `path` of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {*} Returns the result of the invoked method.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
		     *
		     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
		     * // => [2, 3]
		     */
		    var invoke = baseRest(baseInvoke);

		    /**
		     * Creates an array of the own enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects. See the
		     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		     * for more details.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keys(new Foo);
		     * // => ['a', 'b'] (iteration order is not guaranteed)
		     *
		     * _.keys('hi');
		     * // => ['0', '1']
		     */
		    function keys(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		    }

		    /**
		     * Creates an array of the own and inherited enumerable property names of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property names.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.keysIn(new Foo);
		     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		     */
		    function keysIn(object) {
		      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		    }

		    /**
		     * The opposite of `_.mapValues`; this method creates an object with the
		     * same values as `object` and keys generated by running each own enumerable
		     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
		     * with three arguments: (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.8.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapValues
		     * @example
		     *
		     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
		     *   return key + value;
		     * });
		     * // => { 'a1': 1, 'b2': 2 }
		     */
		    function mapKeys(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, iteratee(value, key, object), value);
		      });
		      return result;
		    }

		    /**
		     * Creates an object with the same keys as `object` and values generated
		     * by running each own enumerable string keyed property of `object` thru
		     * `iteratee`. The iteratee is invoked with three arguments:
		     * (value, key, object).
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Object} Returns the new mapped object.
		     * @see _.mapKeys
		     * @example
		     *
		     * var users = {
		     *   'fred':    { 'user': 'fred',    'age': 40 },
		     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
		     * };
		     *
		     * _.mapValues(users, function(o) { return o.age; });
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.mapValues(users, 'age');
		     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
		     */
		    function mapValues(object, iteratee) {
		      var result = {};
		      iteratee = getIteratee(iteratee, 3);

		      baseForOwn(object, function(value, key, object) {
		        baseAssignValue(result, key, iteratee(value, key, object));
		      });
		      return result;
		    }

		    /**
		     * This method is like `_.assign` except that it recursively merges own and
		     * inherited enumerable string keyed properties of source objects into the
		     * destination object. Source properties that resolve to `undefined` are
		     * skipped if a destination value exists. Array and plain object properties
		     * are merged recursively. Other objects and value types are overridden by
		     * assignment. Source objects are applied from left to right. Subsequent
		     * sources overwrite property assignments of previous sources.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.5.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} [sources] The source objects.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {
		     *   'a': [{ 'b': 2 }, { 'd': 4 }]
		     * };
		     *
		     * var other = {
		     *   'a': [{ 'c': 3 }, { 'e': 5 }]
		     * };
		     *
		     * _.merge(object, other);
		     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		     */
		    var merge = createAssigner(function(object, source, srcIndex) {
		      baseMerge(object, source, srcIndex);
		    });

		    /**
		     * This method is like `_.merge` except that it accepts `customizer` which
		     * is invoked to produce the merged values of the destination and source
		     * properties. If `customizer` returns `undefined`, merging is handled by the
		     * method instead. The `customizer` is invoked with six arguments:
		     * (objValue, srcValue, key, object, source, stack).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The destination object.
		     * @param {...Object} sources The source objects.
		     * @param {Function} customizer The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * function customizer(objValue, srcValue) {
		     *   if (_.isArray(objValue)) {
		     *     return objValue.concat(srcValue);
		     *   }
		     * }
		     *
		     * var object = { 'a': [1], 'b': [2] };
		     * var other = { 'a': [3], 'b': [4] };
		     *
		     * _.mergeWith(object, other, customizer);
		     * // => { 'a': [1, 3], 'b': [2, 4] }
		     */
		    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
		      baseMerge(object, source, srcIndex, customizer);
		    });

		    /**
		     * The opposite of `_.pick`; this method creates an object composed of the
		     * own and inherited enumerable property paths of `object` that are not omitted.
		     *
		     * **Note:** This method is considerably slower than `_.pick`.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to omit.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omit(object, ['a', 'c']);
		     * // => { 'b': '2' }
		     */
		    var omit = flatRest(function(object, paths) {
		      var result = {};
		      if (object == null) {
		        return result;
		      }
		      var isDeep = false;
		      paths = arrayMap(paths, function(path) {
		        path = castPath(path, object);
		        isDeep || (isDeep = path.length > 1);
		        return path;
		      });
		      copyObject(object, getAllKeysIn(object), result);
		      if (isDeep) {
		        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
		      }
		      var length = paths.length;
		      while (length--) {
		        baseUnset(result, paths[length]);
		      }
		      return result;
		    });

		    /**
		     * The opposite of `_.pickBy`; this method creates an object composed of
		     * the own and inherited enumerable string keyed properties of `object` that
		     * `predicate` doesn't return truthy for. The predicate is invoked with two
		     * arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.omitBy(object, _.isNumber);
		     * // => { 'b': '2' }
		     */
		    function omitBy(object, predicate) {
		      return pickBy(object, negate(getIteratee(predicate)));
		    }

		    /**
		     * Creates an object composed of the picked `object` properties.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {...(string|string[])} [paths] The property paths to pick.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pick(object, ['a', 'c']);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    var pick = flatRest(function(object, paths) {
		      return object == null ? {} : basePick(object, paths);
		    });

		    /**
		     * Creates an object composed of the `object` properties `predicate` returns
		     * truthy for. The predicate is invoked with two arguments: (value, key).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The source object.
		     * @param {Function} [predicate=_.identity] The function invoked per property.
		     * @returns {Object} Returns the new object.
		     * @example
		     *
		     * var object = { 'a': 1, 'b': '2', 'c': 3 };
		     *
		     * _.pickBy(object, _.isNumber);
		     * // => { 'a': 1, 'c': 3 }
		     */
		    function pickBy(object, predicate) {
		      if (object == null) {
		        return {};
		      }
		      var props = arrayMap(getAllKeysIn(object), function(prop) {
		        return [prop];
		      });
		      predicate = getIteratee(predicate);
		      return basePickBy(object, props, function(value, path) {
		        return predicate(value, path[0]);
		      });
		    }

		    /**
		     * This method is like `_.get` except that if the resolved value is a
		     * function it's invoked with the `this` binding of its parent object and
		     * its result is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @param {Array|string} path The path of the property to resolve.
		     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
		     *
		     * _.result(object, 'a[0].b.c1');
		     * // => 3
		     *
		     * _.result(object, 'a[0].b.c2');
		     * // => 4
		     *
		     * _.result(object, 'a[0].b.c3', 'default');
		     * // => 'default'
		     *
		     * _.result(object, 'a[0].b.c3', _.constant('default'));
		     * // => 'default'
		     */
		    function result(object, path, defaultValue) {
		      path = castPath(path, object);

		      var index = -1,
		          length = path.length;

		      // Ensure the loop is entered when path is empty.
		      if (!length) {
		        length = 1;
		        object = undefined$1;
		      }
		      while (++index < length) {
		        var value = object == null ? undefined$1 : object[toKey(path[index])];
		        if (value === undefined$1) {
		          index = length;
		          value = defaultValue;
		        }
		        object = isFunction(value) ? value.call(object) : value;
		      }
		      return object;
		    }

		    /**
		     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
		     * it's created. Arrays are created for missing index properties while objects
		     * are created for all other missing properties. Use `_.setWith` to customize
		     * `path` creation.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.set(object, 'a[0].b.c', 4);
		     * console.log(object.a[0].b.c);
		     * // => 4
		     *
		     * _.set(object, ['x', '0', 'y', 'z'], 5);
		     * console.log(object.x[0].y.z);
		     * // => 5
		     */
		    function set(object, path, value) {
		      return object == null ? object : baseSet(object, path, value);
		    }

		    /**
		     * This method is like `_.set` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {*} value The value to set.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.setWith(object, '[0][1]', 'a', Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function setWith(object, path, value, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseSet(object, path, value, customizer);
		    }

		    /**
		     * Creates an array of own enumerable string keyed-value pairs for `object`
		     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
		     * entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entries
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairs(new Foo);
		     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
		     */
		    var toPairs = createToPairs(keys);

		    /**
		     * Creates an array of own and inherited enumerable string keyed-value pairs
		     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
		     * or set, its entries are returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @alias entriesIn
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the key-value pairs.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.toPairsIn(new Foo);
		     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
		     */
		    var toPairsIn = createToPairs(keysIn);

		    /**
		     * An alternative to `_.reduce`; this method transforms `object` to a new
		     * `accumulator` object which is the result of running each of its own
		     * enumerable string keyed properties thru `iteratee`, with each invocation
		     * potentially mutating the `accumulator` object. If `accumulator` is not
		     * provided, a new object with the same `[[Prototype]]` will be used. The
		     * iteratee is invoked with four arguments: (accumulator, value, key, object).
		     * Iteratee functions may exit iteration early by explicitly returning `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.3.0
		     * @category Object
		     * @param {Object} object The object to iterate over.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @param {*} [accumulator] The custom accumulator value.
		     * @returns {*} Returns the accumulated value.
		     * @example
		     *
		     * _.transform([2, 3, 4], function(result, n) {
		     *   result.push(n *= n);
		     *   return n % 2 == 0;
		     * }, []);
		     * // => [4, 9]
		     *
		     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
		     *   (result[value] || (result[value] = [])).push(key);
		     * }, {});
		     * // => { '1': ['a', 'c'], '2': ['b'] }
		     */
		    function transform(object, iteratee, accumulator) {
		      var isArr = isArray(object),
		          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

		      iteratee = getIteratee(iteratee, 4);
		      if (accumulator == null) {
		        var Ctor = object && object.constructor;
		        if (isArrLike) {
		          accumulator = isArr ? new Ctor : [];
		        }
		        else if (isObject(object)) {
		          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
		        }
		        else {
		          accumulator = {};
		        }
		      }
		      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
		        return iteratee(accumulator, value, index, object);
		      });
		      return accumulator;
		    }

		    /**
		     * Removes the property at `path` of `object`.
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to unset.
		     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
		     * _.unset(object, 'a[0].b.c');
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     *
		     * _.unset(object, ['a', '0', 'b', 'c']);
		     * // => true
		     *
		     * console.log(object);
		     * // => { 'a': [{ 'b': {} }] };
		     */
		    function unset(object, path) {
		      return object == null ? true : baseUnset(object, path);
		    }

		    /**
		     * This method is like `_.set` except that accepts `updater` to produce the
		     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
		     * is invoked with one argument: (value).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		     *
		     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
		     * console.log(object.a[0].b.c);
		     * // => 9
		     *
		     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
		     * console.log(object.x[0].y.z);
		     * // => 0
		     */
		    function update(object, path, updater) {
		      return object == null ? object : baseUpdate(object, path, castFunction(updater));
		    }

		    /**
		     * This method is like `_.update` except that it accepts `customizer` which is
		     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
		     * path creation is handled by the method instead. The `customizer` is invoked
		     * with three arguments: (nsValue, key, nsObject).
		     *
		     * **Note:** This method mutates `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.6.0
		     * @category Object
		     * @param {Object} object The object to modify.
		     * @param {Array|string} path The path of the property to set.
		     * @param {Function} updater The function to produce the updated value.
		     * @param {Function} [customizer] The function to customize assigned values.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var object = {};
		     *
		     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
		     * // => { '0': { '1': 'a' } }
		     */
		    function updateWith(object, path, updater, customizer) {
		      customizer = typeof customizer == 'function' ? customizer : undefined$1;
		      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
		    }

		    /**
		     * Creates an array of the own enumerable string keyed property values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.values(new Foo);
		     * // => [1, 2] (iteration order is not guaranteed)
		     *
		     * _.values('hi');
		     * // => ['h', 'i']
		     */
		    function values(object) {
		      return object == null ? [] : baseValues(object, keys(object));
		    }

		    /**
		     * Creates an array of the own and inherited enumerable string keyed property
		     * values of `object`.
		     *
		     * **Note:** Non-object values are coerced to objects.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Object
		     * @param {Object} object The object to query.
		     * @returns {Array} Returns the array of property values.
		     * @example
		     *
		     * function Foo() {
		     *   this.a = 1;
		     *   this.b = 2;
		     * }
		     *
		     * Foo.prototype.c = 3;
		     *
		     * _.valuesIn(new Foo);
		     * // => [1, 2, 3] (iteration order is not guaranteed)
		     */
		    function valuesIn(object) {
		      return object == null ? [] : baseValues(object, keysIn(object));
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Clamps `number` within the inclusive `lower` and `upper` bounds.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Number
		     * @param {number} number The number to clamp.
		     * @param {number} [lower] The lower bound.
		     * @param {number} upper The upper bound.
		     * @returns {number} Returns the clamped number.
		     * @example
		     *
		     * _.clamp(-10, -5, 5);
		     * // => -5
		     *
		     * _.clamp(10, -5, 5);
		     * // => 5
		     */
		    function clamp(number, lower, upper) {
		      if (upper === undefined$1) {
		        upper = lower;
		        lower = undefined$1;
		      }
		      if (upper !== undefined$1) {
		        upper = toNumber(upper);
		        upper = upper === upper ? upper : 0;
		      }
		      if (lower !== undefined$1) {
		        lower = toNumber(lower);
		        lower = lower === lower ? lower : 0;
		      }
		      return baseClamp(toNumber(number), lower, upper);
		    }

		    /**
		     * Checks if `n` is between `start` and up to, but not including, `end`. If
		     * `end` is not specified, it's set to `start` with `start` then set to `0`.
		     * If `start` is greater than `end` the params are swapped to support
		     * negative ranges.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.3.0
		     * @category Number
		     * @param {number} number The number to check.
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
		     * @see _.range, _.rangeRight
		     * @example
		     *
		     * _.inRange(3, 2, 4);
		     * // => true
		     *
		     * _.inRange(4, 8);
		     * // => true
		     *
		     * _.inRange(4, 2);
		     * // => false
		     *
		     * _.inRange(2, 2);
		     * // => false
		     *
		     * _.inRange(1.2, 2);
		     * // => true
		     *
		     * _.inRange(5.2, 4);
		     * // => false
		     *
		     * _.inRange(-3, -2, -6);
		     * // => true
		     */
		    function inRange(number, start, end) {
		      start = toFinite(start);
		      if (end === undefined$1) {
		        end = start;
		        start = 0;
		      } else {
		        end = toFinite(end);
		      }
		      number = toNumber(number);
		      return baseInRange(number, start, end);
		    }

		    /**
		     * Produces a random number between the inclusive `lower` and `upper` bounds.
		     * If only one argument is provided a number between `0` and the given number
		     * is returned. If `floating` is `true`, or either `lower` or `upper` are
		     * floats, a floating-point number is returned instead of an integer.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @memberOf _
		     * @since 0.7.0
		     * @category Number
		     * @param {number} [lower=0] The lower bound.
		     * @param {number} [upper=1] The upper bound.
		     * @param {boolean} [floating] Specify returning a floating-point number.
		     * @returns {number} Returns the random number.
		     * @example
		     *
		     * _.random(0, 5);
		     * // => an integer between 0 and 5
		     *
		     * _.random(5);
		     * // => also an integer between 0 and 5
		     *
		     * _.random(5, true);
		     * // => a floating-point number between 0 and 5
		     *
		     * _.random(1.2, 5.2);
		     * // => a floating-point number between 1.2 and 5.2
		     */
		    function random(lower, upper, floating) {
		      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
		        upper = floating = undefined$1;
		      }
		      if (floating === undefined$1) {
		        if (typeof upper == 'boolean') {
		          floating = upper;
		          upper = undefined$1;
		        }
		        else if (typeof lower == 'boolean') {
		          floating = lower;
		          lower = undefined$1;
		        }
		      }
		      if (lower === undefined$1 && upper === undefined$1) {
		        lower = 0;
		        upper = 1;
		      }
		      else {
		        lower = toFinite(lower);
		        if (upper === undefined$1) {
		          upper = lower;
		          lower = 0;
		        } else {
		          upper = toFinite(upper);
		        }
		      }
		      if (lower > upper) {
		        var temp = lower;
		        lower = upper;
		        upper = temp;
		      }
		      if (floating || lower % 1 || upper % 1) {
		        var rand = nativeRandom();
		        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
		      }
		      return baseRandom(lower, upper);
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the camel cased string.
		     * @example
		     *
		     * _.camelCase('Foo Bar');
		     * // => 'fooBar'
		     *
		     * _.camelCase('--foo-bar--');
		     * // => 'fooBar'
		     *
		     * _.camelCase('__FOO_BAR__');
		     * // => 'fooBar'
		     */
		    var camelCase = createCompounder(function(result, word, index) {
		      word = word.toLowerCase();
		      return result + (index ? capitalize(word) : word);
		    });

		    /**
		     * Converts the first character of `string` to upper case and the remaining
		     * to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to capitalize.
		     * @returns {string} Returns the capitalized string.
		     * @example
		     *
		     * _.capitalize('FRED');
		     * // => 'Fred'
		     */
		    function capitalize(string) {
		      return upperFirst(toString(string).toLowerCase());
		    }

		    /**
		     * Deburrs `string` by converting
		     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
		     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
		     * letters to basic Latin letters and removing
		     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to deburr.
		     * @returns {string} Returns the deburred string.
		     * @example
		     *
		     * _.deburr('déjà vu');
		     * // => 'deja vu'
		     */
		    function deburr(string) {
		      string = toString(string);
		      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
		    }

		    /**
		     * Checks if `string` ends with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=string.length] The position to search up to.
		     * @returns {boolean} Returns `true` if `string` ends with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.endsWith('abc', 'c');
		     * // => true
		     *
		     * _.endsWith('abc', 'b');
		     * // => false
		     *
		     * _.endsWith('abc', 'b', 2);
		     * // => true
		     */
		    function endsWith(string, target, position) {
		      string = toString(string);
		      target = baseToString(target);

		      var length = string.length;
		      position = position === undefined$1
		        ? length
		        : baseClamp(toInteger(position), 0, length);

		      var end = position;
		      position -= target.length;
		      return position >= 0 && string.slice(position, end) == target;
		    }

		    /**
		     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
		     * corresponding HTML entities.
		     *
		     * **Note:** No other characters are escaped. To escape additional
		     * characters use a third-party library like [_he_](https://mths.be/he).
		     *
		     * Though the ">" character is escaped for symmetry, characters like
		     * ">" and "/" don't need escaping in HTML and have no special meaning
		     * unless they're part of a tag or unquoted attribute value. See
		     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
		     * (under "semi-related fun fact") for more details.
		     *
		     * When working with HTML you should always
		     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
		     * XSS vectors.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escape('fred, barney, & pebbles');
		     * // => 'fred, barney, &amp; pebbles'
		     */
		    function escape(string) {
		      string = toString(string);
		      return (string && reHasUnescapedHtml.test(string))
		        ? string.replace(reUnescapedHtml, escapeHtmlChar)
		        : string;
		    }

		    /**
		     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
		     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to escape.
		     * @returns {string} Returns the escaped string.
		     * @example
		     *
		     * _.escapeRegExp('[lodash](https://lodash.com/)');
		     * // => '\[lodash\]\(https://lodash\.com/\)'
		     */
		    function escapeRegExp(string) {
		      string = toString(string);
		      return (string && reHasRegExpChar.test(string))
		        ? string.replace(reRegExpChar, '\\$&')
		        : string;
		    }

		    /**
		     * Converts `string` to
		     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the kebab cased string.
		     * @example
		     *
		     * _.kebabCase('Foo Bar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('fooBar');
		     * // => 'foo-bar'
		     *
		     * _.kebabCase('__FOO_BAR__');
		     * // => 'foo-bar'
		     */
		    var kebabCase = createCompounder(function(result, word, index) {
		      return result + (index ? '-' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts `string`, as space separated words, to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.lowerCase('--Foo-Bar--');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('fooBar');
		     * // => 'foo bar'
		     *
		     * _.lowerCase('__FOO_BAR__');
		     * // => 'foo bar'
		     */
		    var lowerCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toLowerCase();
		    });

		    /**
		     * Converts the first character of `string` to lower case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.lowerFirst('Fred');
		     * // => 'fred'
		     *
		     * _.lowerFirst('FRED');
		     * // => 'fRED'
		     */
		    var lowerFirst = createCaseFirst('toLowerCase');

		    /**
		     * Pads `string` on the left and right sides if it's shorter than `length`.
		     * Padding characters are truncated if they can't be evenly divided by `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.pad('abc', 8);
		     * // => '  abc   '
		     *
		     * _.pad('abc', 8, '_-');
		     * // => '_-abc_-_'
		     *
		     * _.pad('abc', 3);
		     * // => 'abc'
		     */
		    function pad(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      if (!length || strLength >= length) {
		        return string;
		      }
		      var mid = (length - strLength) / 2;
		      return (
		        createPadding(nativeFloor(mid), chars) +
		        string +
		        createPadding(nativeCeil(mid), chars)
		      );
		    }

		    /**
		     * Pads `string` on the right side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padEnd('abc', 6);
		     * // => 'abc   '
		     *
		     * _.padEnd('abc', 6, '_-');
		     * // => 'abc_-_'
		     *
		     * _.padEnd('abc', 3);
		     * // => 'abc'
		     */
		    function padEnd(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (string + createPadding(length - strLength, chars))
		        : string;
		    }

		    /**
		     * Pads `string` on the left side if it's shorter than `length`. Padding
		     * characters are truncated if they exceed `length`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to pad.
		     * @param {number} [length=0] The padding length.
		     * @param {string} [chars=' '] The string used as padding.
		     * @returns {string} Returns the padded string.
		     * @example
		     *
		     * _.padStart('abc', 6);
		     * // => '   abc'
		     *
		     * _.padStart('abc', 6, '_-');
		     * // => '_-_abc'
		     *
		     * _.padStart('abc', 3);
		     * // => 'abc'
		     */
		    function padStart(string, length, chars) {
		      string = toString(string);
		      length = toInteger(length);

		      var strLength = length ? stringSize(string) : 0;
		      return (length && strLength < length)
		        ? (createPadding(length - strLength, chars) + string)
		        : string;
		    }

		    /**
		     * Converts `string` to an integer of the specified radix. If `radix` is
		     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
		     * hexadecimal, in which case a `radix` of `16` is used.
		     *
		     * **Note:** This method aligns with the
		     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
		     *
		     * @static
		     * @memberOf _
		     * @since 1.1.0
		     * @category String
		     * @param {string} string The string to convert.
		     * @param {number} [radix=10] The radix to interpret `value` by.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {number} Returns the converted integer.
		     * @example
		     *
		     * _.parseInt('08');
		     * // => 8
		     *
		     * _.map(['6', '08', '10'], _.parseInt);
		     * // => [6, 8, 10]
		     */
		    function parseInt(string, radix, guard) {
		      if (guard || radix == null) {
		        radix = 0;
		      } else if (radix) {
		        radix = +radix;
		      }
		      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
		    }

		    /**
		     * Repeats the given string `n` times.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to repeat.
		     * @param {number} [n=1] The number of times to repeat the string.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the repeated string.
		     * @example
		     *
		     * _.repeat('*', 3);
		     * // => '***'
		     *
		     * _.repeat('abc', 2);
		     * // => 'abcabc'
		     *
		     * _.repeat('abc', 0);
		     * // => ''
		     */
		    function repeat(string, n, guard) {
		      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
		        n = 1;
		      } else {
		        n = toInteger(n);
		      }
		      return baseRepeat(toString(string), n);
		    }

		    /**
		     * Replaces matches for `pattern` in `string` with `replacement`.
		     *
		     * **Note:** This method is based on
		     * [`String#replace`](https://mdn.io/String/replace).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to modify.
		     * @param {RegExp|string} pattern The pattern to replace.
		     * @param {Function|string} replacement The match replacement.
		     * @returns {string} Returns the modified string.
		     * @example
		     *
		     * _.replace('Hi Fred', 'Fred', 'Barney');
		     * // => 'Hi Barney'
		     */
		    function replace() {
		      var args = arguments,
		          string = toString(args[0]);

		      return args.length < 3 ? string : string.replace(args[1], args[2]);
		    }

		    /**
		     * Converts `string` to
		     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the snake cased string.
		     * @example
		     *
		     * _.snakeCase('Foo Bar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('fooBar');
		     * // => 'foo_bar'
		     *
		     * _.snakeCase('--FOO-BAR--');
		     * // => 'foo_bar'
		     */
		    var snakeCase = createCompounder(function(result, word, index) {
		      return result + (index ? '_' : '') + word.toLowerCase();
		    });

		    /**
		     * Splits `string` by `separator`.
		     *
		     * **Note:** This method is based on
		     * [`String#split`](https://mdn.io/String/split).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to split.
		     * @param {RegExp|string} separator The separator pattern to split by.
		     * @param {number} [limit] The length to truncate results to.
		     * @returns {Array} Returns the string segments.
		     * @example
		     *
		     * _.split('a-b-c', '-', 2);
		     * // => ['a', 'b']
		     */
		    function split(string, separator, limit) {
		      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
		        separator = limit = undefined$1;
		      }
		      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
		      if (!limit) {
		        return [];
		      }
		      string = toString(string);
		      if (string && (
		            typeof separator == 'string' ||
		            (separator != null && !isRegExp(separator))
		          )) {
		        separator = baseToString(separator);
		        if (!separator && hasUnicode(string)) {
		          return castSlice(stringToArray(string), 0, limit);
		        }
		      }
		      return string.split(separator, limit);
		    }

		    /**
		     * Converts `string` to
		     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
		     *
		     * @static
		     * @memberOf _
		     * @since 3.1.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the start cased string.
		     * @example
		     *
		     * _.startCase('--foo-bar--');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('fooBar');
		     * // => 'Foo Bar'
		     *
		     * _.startCase('__FOO_BAR__');
		     * // => 'FOO BAR'
		     */
		    var startCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + upperFirst(word);
		    });

		    /**
		     * Checks if `string` starts with the given target string.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {string} [target] The string to search for.
		     * @param {number} [position=0] The position to search from.
		     * @returns {boolean} Returns `true` if `string` starts with `target`,
		     *  else `false`.
		     * @example
		     *
		     * _.startsWith('abc', 'a');
		     * // => true
		     *
		     * _.startsWith('abc', 'b');
		     * // => false
		     *
		     * _.startsWith('abc', 'b', 1);
		     * // => true
		     */
		    function startsWith(string, target, position) {
		      string = toString(string);
		      position = position == null
		        ? 0
		        : baseClamp(toInteger(position), 0, string.length);

		      target = baseToString(target);
		      return string.slice(position, position + target.length) == target;
		    }

		    /**
		     * Creates a compiled template function that can interpolate data properties
		     * in "interpolate" delimiters, HTML-escape interpolated data properties in
		     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
		     * properties may be accessed as free variables in the template. If a setting
		     * object is given, it takes precedence over `_.templateSettings` values.
		     *
		     * **Note:** In the development build `_.template` utilizes
		     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
		     * for easier debugging.
		     *
		     * For more information on precompiling templates see
		     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
		     *
		     * For more information on Chrome extension sandboxes see
		     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category String
		     * @param {string} [string=''] The template string.
		     * @param {Object} [options={}] The options object.
		     * @param {RegExp} [options.escape=_.templateSettings.escape]
		     *  The HTML "escape" delimiter.
		     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
		     *  The "evaluate" delimiter.
		     * @param {Object} [options.imports=_.templateSettings.imports]
		     *  An object to import into the template as free variables.
		     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
		     *  The "interpolate" delimiter.
		     * @param {string} [options.sourceURL='lodash.templateSources[n]']
		     *  The sourceURL of the compiled template.
		     * @param {string} [options.variable='obj']
		     *  The data object variable name.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Function} Returns the compiled template function.
		     * @example
		     *
		     * // Use the "interpolate" delimiter to create a compiled template.
		     * var compiled = _.template('hello <%= user %>!');
		     * compiled({ 'user': 'fred' });
		     * // => 'hello fred!'
		     *
		     * // Use the HTML "escape" delimiter to escape data property values.
		     * var compiled = _.template('<b><%- value %></b>');
		     * compiled({ 'value': '<script>' });
		     * // => '<b>&lt;script&gt;</b>'
		     *
		     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
		     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the internal `print` function in "evaluate" delimiters.
		     * var compiled = _.template('<% print("hello " + user); %>!');
		     * compiled({ 'user': 'barney' });
		     * // => 'hello barney!'
		     *
		     * // Use the ES template literal delimiter as an "interpolate" delimiter.
		     * // Disable support by replacing the "interpolate" delimiter.
		     * var compiled = _.template('hello ${ user }!');
		     * compiled({ 'user': 'pebbles' });
		     * // => 'hello pebbles!'
		     *
		     * // Use backslashes to treat delimiters as plain text.
		     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
		     * compiled({ 'value': 'ignored' });
		     * // => '<%- value %>'
		     *
		     * // Use the `imports` option to import `jQuery` as `jq`.
		     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
		     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
		     * compiled({ 'users': ['fred', 'barney'] });
		     * // => '<li>fred</li><li>barney</li>'
		     *
		     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
		     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
		     * compiled(data);
		     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
		     *
		     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
		     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
		     * compiled.source;
		     * // => function(data) {
		     * //   var __t, __p = '';
		     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
		     * //   return __p;
		     * // }
		     *
		     * // Use custom template delimiters.
		     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
		     * var compiled = _.template('hello {{ user }}!');
		     * compiled({ 'user': 'mustache' });
		     * // => 'hello mustache!'
		     *
		     * // Use the `source` property to inline compiled templates for meaningful
		     * // line numbers in error messages and stack traces.
		     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
		     *   var JST = {\
		     *     "main": ' + _.template(mainText).source + '\
		     *   };\
		     * ');
		     */
		    function template(string, options, guard) {
		      // Based on John Resig's `tmpl` implementation
		      // (http://ejohn.org/blog/javascript-micro-templating/)
		      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
		      var settings = lodash.templateSettings;

		      if (guard && isIterateeCall(string, options, guard)) {
		        options = undefined$1;
		      }
		      string = toString(string);
		      options = assignInWith({}, options, settings, customDefaultsAssignIn);

		      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
		          importsKeys = keys(imports),
		          importsValues = baseValues(imports, importsKeys);

		      var isEscaping,
		          isEvaluating,
		          index = 0,
		          interpolate = options.interpolate || reNoMatch,
		          source = "__p += '";

		      // Compile the regexp to match each delimiter.
		      var reDelimiters = RegExp(
		        (options.escape || reNoMatch).source + '|' +
		        interpolate.source + '|' +
		        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
		        (options.evaluate || reNoMatch).source + '|$'
		      , 'g');

		      // Use a sourceURL for easier debugging.
		      // The sourceURL gets injected into the source that's eval-ed, so be careful
		      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
		      // and escape the comment, thus injecting code that gets evaled.
		      var sourceURL = '//# sourceURL=' +
		        (hasOwnProperty.call(options, 'sourceURL')
		          ? (options.sourceURL + '').replace(/\s/g, ' ')
		          : ('lodash.templateSources[' + (++templateCounter) + ']')
		        ) + '\n';

		      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
		        interpolateValue || (interpolateValue = esTemplateValue);

		        // Escape characters that can't be included in string literals.
		        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

		        // Replace delimiters with snippets.
		        if (escapeValue) {
		          isEscaping = true;
		          source += "' +\n__e(" + escapeValue + ") +\n'";
		        }
		        if (evaluateValue) {
		          isEvaluating = true;
		          source += "';\n" + evaluateValue + ";\n__p += '";
		        }
		        if (interpolateValue) {
		          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
		        }
		        index = offset + match.length;

		        // The JS engine embedded in Adobe products needs `match` returned in
		        // order to produce the correct `offset` value.
		        return match;
		      });

		      source += "';\n";

		      // If `variable` is not specified wrap a with-statement around the generated
		      // code to add the data object to the top of the scope chain.
		      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
		      if (!variable) {
		        source = 'with (obj) {\n' + source + '\n}\n';
		      }
		      // Throw an error if a forbidden character was found in `variable`, to prevent
		      // potential command injection attacks.
		      else if (reForbiddenIdentifierChars.test(variable)) {
		        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
		      }

		      // Cleanup code by stripping empty strings.
		      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
		        .replace(reEmptyStringMiddle, '$1')
		        .replace(reEmptyStringTrailing, '$1;');

		      // Frame code as the function body.
		      source = 'function(' + (variable || 'obj') + ') {\n' +
		        (variable
		          ? ''
		          : 'obj || (obj = {});\n'
		        ) +
		        "var __t, __p = ''" +
		        (isEscaping
		           ? ', __e = _.escape'
		           : ''
		        ) +
		        (isEvaluating
		          ? ', __j = Array.prototype.join;\n' +
		            "function print() { __p += __j.call(arguments, '') }\n"
		          : ';\n'
		        ) +
		        source +
		        'return __p\n}';

		      var result = attempt(function() {
		        return Function(importsKeys, sourceURL + 'return ' + source)
		          .apply(undefined$1, importsValues);
		      });

		      // Provide the compiled function's source by its `toString` method or
		      // the `source` property as a convenience for inlining compiled templates.
		      result.source = source;
		      if (isError(result)) {
		        throw result;
		      }
		      return result;
		    }

		    /**
		     * Converts `string`, as a whole, to lower case just like
		     * [String#toLowerCase](https://mdn.io/toLowerCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the lower cased string.
		     * @example
		     *
		     * _.toLower('--Foo-Bar--');
		     * // => '--foo-bar--'
		     *
		     * _.toLower('fooBar');
		     * // => 'foobar'
		     *
		     * _.toLower('__FOO_BAR__');
		     * // => '__foo_bar__'
		     */
		    function toLower(value) {
		      return toString(value).toLowerCase();
		    }

		    /**
		     * Converts `string`, as a whole, to upper case just like
		     * [String#toUpperCase](https://mdn.io/toUpperCase).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.toUpper('--foo-bar--');
		     * // => '--FOO-BAR--'
		     *
		     * _.toUpper('fooBar');
		     * // => 'FOOBAR'
		     *
		     * _.toUpper('__foo_bar__');
		     * // => '__FOO_BAR__'
		     */
		    function toUpper(value) {
		      return toString(value).toUpperCase();
		    }

		    /**
		     * Removes leading and trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trim('  abc  ');
		     * // => 'abc'
		     *
		     * _.trim('-_-abc-_-', '_-');
		     * // => 'abc'
		     *
		     * _.map(['  foo  ', '  bar  '], _.trim);
		     * // => ['foo', 'bar']
		     */
		    function trim(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return baseTrim(string);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          chrSymbols = stringToArray(chars),
		          start = charsStartIndex(strSymbols, chrSymbols),
		          end = charsEndIndex(strSymbols, chrSymbols) + 1;

		      return castSlice(strSymbols, start, end).join('');
		    }

		    /**
		     * Removes trailing whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimEnd('  abc  ');
		     * // => '  abc'
		     *
		     * _.trimEnd('-_-abc-_-', '_-');
		     * // => '-_-abc'
		     */
		    function trimEnd(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.slice(0, trimmedEndIndex(string) + 1);
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

		      return castSlice(strSymbols, 0, end).join('');
		    }

		    /**
		     * Removes leading whitespace or specified characters from `string`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to trim.
		     * @param {string} [chars=whitespace] The characters to trim.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {string} Returns the trimmed string.
		     * @example
		     *
		     * _.trimStart('  abc  ');
		     * // => 'abc  '
		     *
		     * _.trimStart('-_-abc-_-', '_-');
		     * // => 'abc-_-'
		     */
		    function trimStart(string, chars, guard) {
		      string = toString(string);
		      if (string && (guard || chars === undefined$1)) {
		        return string.replace(reTrimStart, '');
		      }
		      if (!string || !(chars = baseToString(chars))) {
		        return string;
		      }
		      var strSymbols = stringToArray(string),
		          start = charsStartIndex(strSymbols, stringToArray(chars));

		      return castSlice(strSymbols, start).join('');
		    }

		    /**
		     * Truncates `string` if it's longer than the given maximum string length.
		     * The last characters of the truncated string are replaced with the omission
		     * string which defaults to "...".
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to truncate.
		     * @param {Object} [options={}] The options object.
		     * @param {number} [options.length=30] The maximum string length.
		     * @param {string} [options.omission='...'] The string to indicate text is omitted.
		     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
		     * @returns {string} Returns the truncated string.
		     * @example
		     *
		     * _.truncate('hi-diddly-ho there, neighborino');
		     * // => 'hi-diddly-ho there, neighbo...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': ' '
		     * });
		     * // => 'hi-diddly-ho there,...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'length': 24,
		     *   'separator': /,? +/
		     * });
		     * // => 'hi-diddly-ho there...'
		     *
		     * _.truncate('hi-diddly-ho there, neighborino', {
		     *   'omission': ' [...]'
		     * });
		     * // => 'hi-diddly-ho there, neig [...]'
		     */
		    function truncate(string, options) {
		      var length = DEFAULT_TRUNC_LENGTH,
		          omission = DEFAULT_TRUNC_OMISSION;

		      if (isObject(options)) {
		        var separator = 'separator' in options ? options.separator : separator;
		        length = 'length' in options ? toInteger(options.length) : length;
		        omission = 'omission' in options ? baseToString(options.omission) : omission;
		      }
		      string = toString(string);

		      var strLength = string.length;
		      if (hasUnicode(string)) {
		        var strSymbols = stringToArray(string);
		        strLength = strSymbols.length;
		      }
		      if (length >= strLength) {
		        return string;
		      }
		      var end = length - stringSize(omission);
		      if (end < 1) {
		        return omission;
		      }
		      var result = strSymbols
		        ? castSlice(strSymbols, 0, end).join('')
		        : string.slice(0, end);

		      if (separator === undefined$1) {
		        return result + omission;
		      }
		      if (strSymbols) {
		        end += (result.length - end);
		      }
		      if (isRegExp(separator)) {
		        if (string.slice(end).search(separator)) {
		          var match,
		              substring = result;

		          if (!separator.global) {
		            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
		          }
		          separator.lastIndex = 0;
		          while ((match = separator.exec(substring))) {
		            var newEnd = match.index;
		          }
		          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
		        }
		      } else if (string.indexOf(baseToString(separator), end) != end) {
		        var index = result.lastIndexOf(separator);
		        if (index > -1) {
		          result = result.slice(0, index);
		        }
		      }
		      return result + omission;
		    }

		    /**
		     * The inverse of `_.escape`; this method converts the HTML entities
		     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
		     * their corresponding characters.
		     *
		     * **Note:** No other HTML entities are unescaped. To unescape additional
		     * HTML entities use a third-party library like [_he_](https://mths.be/he).
		     *
		     * @static
		     * @memberOf _
		     * @since 0.6.0
		     * @category String
		     * @param {string} [string=''] The string to unescape.
		     * @returns {string} Returns the unescaped string.
		     * @example
		     *
		     * _.unescape('fred, barney, &amp; pebbles');
		     * // => 'fred, barney, & pebbles'
		     */
		    function unescape(string) {
		      string = toString(string);
		      return (string && reHasEscapedHtml.test(string))
		        ? string.replace(reEscapedHtml, unescapeHtmlChar)
		        : string;
		    }

		    /**
		     * Converts `string`, as space separated words, to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the upper cased string.
		     * @example
		     *
		     * _.upperCase('--foo-bar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('fooBar');
		     * // => 'FOO BAR'
		     *
		     * _.upperCase('__foo_bar__');
		     * // => 'FOO BAR'
		     */
		    var upperCase = createCompounder(function(result, word, index) {
		      return result + (index ? ' ' : '') + word.toUpperCase();
		    });

		    /**
		     * Converts the first character of `string` to upper case.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category String
		     * @param {string} [string=''] The string to convert.
		     * @returns {string} Returns the converted string.
		     * @example
		     *
		     * _.upperFirst('fred');
		     * // => 'Fred'
		     *
		     * _.upperFirst('FRED');
		     * // => 'FRED'
		     */
		    var upperFirst = createCaseFirst('toUpperCase');

		    /**
		     * Splits `string` into an array of its words.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category String
		     * @param {string} [string=''] The string to inspect.
		     * @param {RegExp|string} [pattern] The pattern to match words.
		     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
		     * @returns {Array} Returns the words of `string`.
		     * @example
		     *
		     * _.words('fred, barney, & pebbles');
		     * // => ['fred', 'barney', 'pebbles']
		     *
		     * _.words('fred, barney, & pebbles', /[^, ]+/g);
		     * // => ['fred', 'barney', '&', 'pebbles']
		     */
		    function words(string, pattern, guard) {
		      string = toString(string);
		      pattern = guard ? undefined$1 : pattern;

		      if (pattern === undefined$1) {
		        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
		      }
		      return string.match(pattern) || [];
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Attempts to invoke `func`, returning either the result or the caught error
		     * object. Any additional arguments are provided to `func` when it's invoked.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Function} func The function to attempt.
		     * @param {...*} [args] The arguments to invoke `func` with.
		     * @returns {*} Returns the `func` result or error object.
		     * @example
		     *
		     * // Avoid throwing errors for invalid selectors.
		     * var elements = _.attempt(function(selector) {
		     *   return document.querySelectorAll(selector);
		     * }, '>_>');
		     *
		     * if (_.isError(elements)) {
		     *   elements = [];
		     * }
		     */
		    var attempt = baseRest(function(func, args) {
		      try {
		        return apply(func, undefined$1, args);
		      } catch (e) {
		        return isError(e) ? e : new Error(e);
		      }
		    });

		    /**
		     * Binds methods of an object to the object itself, overwriting the existing
		     * method.
		     *
		     * **Note:** This method doesn't set the "length" property of bound functions.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Object} object The object to bind and assign the bound methods to.
		     * @param {...(string|string[])} methodNames The object method names to bind.
		     * @returns {Object} Returns `object`.
		     * @example
		     *
		     * var view = {
		     *   'label': 'docs',
		     *   'click': function() {
		     *     console.log('clicked ' + this.label);
		     *   }
		     * };
		     *
		     * _.bindAll(view, ['click']);
		     * jQuery(element).on('click', view.click);
		     * // => Logs 'clicked docs' when clicked.
		     */
		    var bindAll = flatRest(function(object, methodNames) {
		      arrayEach(methodNames, function(key) {
		        key = toKey(key);
		        baseAssignValue(object, key, bind(object[key], object));
		      });
		      return object;
		    });

		    /**
		     * Creates a function that iterates over `pairs` and invokes the corresponding
		     * function of the first predicate to return truthy. The predicate-function
		     * pairs are invoked with the `this` binding and arguments of the created
		     * function.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Array} pairs The predicate-function pairs.
		     * @returns {Function} Returns the new composite function.
		     * @example
		     *
		     * var func = _.cond([
		     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
		     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
		     *   [_.stubTrue,                      _.constant('no match')]
		     * ]);
		     *
		     * func({ 'a': 1, 'b': 2 });
		     * // => 'matches A'
		     *
		     * func({ 'a': 0, 'b': 1 });
		     * // => 'matches B'
		     *
		     * func({ 'a': '1', 'b': '2' });
		     * // => 'no match'
		     */
		    function cond(pairs) {
		      var length = pairs == null ? 0 : pairs.length,
		          toIteratee = getIteratee();

		      pairs = !length ? [] : arrayMap(pairs, function(pair) {
		        if (typeof pair[1] != 'function') {
		          throw new TypeError(FUNC_ERROR_TEXT);
		        }
		        return [toIteratee(pair[0]), pair[1]];
		      });

		      return baseRest(function(args) {
		        var index = -1;
		        while (++index < length) {
		          var pair = pairs[index];
		          if (apply(pair[0], this, args)) {
		            return apply(pair[1], this, args);
		          }
		        }
		      });
		    }

		    /**
		     * Creates a function that invokes the predicate properties of `source` with
		     * the corresponding property values of a given object, returning `true` if
		     * all predicates return truthy, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.conformsTo` with
		     * `source` partially applied.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {Object} source The object of property predicates to conform to.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 2, 'b': 1 },
		     *   { 'a': 1, 'b': 2 }
		     * ];
		     *
		     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
		     * // => [{ 'a': 1, 'b': 2 }]
		     */
		    function conforms(source) {
		      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that returns `value`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {*} value The value to return from the new function.
		     * @returns {Function} Returns the new constant function.
		     * @example
		     *
		     * var objects = _.times(2, _.constant({ 'a': 1 }));
		     *
		     * console.log(objects);
		     * // => [{ 'a': 1 }, { 'a': 1 }]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => true
		     */
		    function constant(value) {
		      return function() {
		        return value;
		      };
		    }

		    /**
		     * Checks `value` to determine whether a default value should be returned in
		     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
		     * or `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.14.0
		     * @category Util
		     * @param {*} value The value to check.
		     * @param {*} defaultValue The default value.
		     * @returns {*} Returns the resolved value.
		     * @example
		     *
		     * _.defaultTo(1, 10);
		     * // => 1
		     *
		     * _.defaultTo(undefined, 10);
		     * // => 10
		     */
		    function defaultTo(value, defaultValue) {
		      return (value == null || value !== value) ? defaultValue : value;
		    }

		    /**
		     * Creates a function that returns the result of invoking the given functions
		     * with the `this` binding of the created function, where each successive
		     * invocation is supplied the return value of the previous.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flowRight
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flow([_.add, square]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flow = createFlow();

		    /**
		     * This method is like `_.flow` except that it creates a function that
		     * invokes the given functions from right to left.
		     *
		     * @static
		     * @since 3.0.0
		     * @memberOf _
		     * @category Util
		     * @param {...(Function|Function[])} [funcs] The functions to invoke.
		     * @returns {Function} Returns the new composite function.
		     * @see _.flow
		     * @example
		     *
		     * function square(n) {
		     *   return n * n;
		     * }
		     *
		     * var addSquare = _.flowRight([square, _.add]);
		     * addSquare(1, 2);
		     * // => 9
		     */
		    var flowRight = createFlow(true);

		    /**
		     * This method returns the first argument it receives.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {*} value Any value.
		     * @returns {*} Returns `value`.
		     * @example
		     *
		     * var object = { 'a': 1 };
		     *
		     * console.log(_.identity(object) === object);
		     * // => true
		     */
		    function identity(value) {
		      return value;
		    }

		    /**
		     * Creates a function that invokes `func` with the arguments of the created
		     * function. If `func` is a property name, the created function returns the
		     * property value for a given element. If `func` is an array or object, the
		     * created function returns `true` for elements that contain the equivalent
		     * source properties, otherwise it returns `false`.
		     *
		     * @static
		     * @since 4.0.0
		     * @memberOf _
		     * @category Util
		     * @param {*} [func=_.identity] The value to convert to a callback.
		     * @returns {Function} Returns the callback.
		     * @example
		     *
		     * var users = [
		     *   { 'user': 'barney', 'age': 36, 'active': true },
		     *   { 'user': 'fred',   'age': 40, 'active': false }
		     * ];
		     *
		     * // The `_.matches` iteratee shorthand.
		     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
		     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
		     *
		     * // The `_.matchesProperty` iteratee shorthand.
		     * _.filter(users, _.iteratee(['user', 'fred']));
		     * // => [{ 'user': 'fred', 'age': 40 }]
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.map(users, _.iteratee('user'));
		     * // => ['barney', 'fred']
		     *
		     * // Create custom iteratee shorthands.
		     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
		     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
		     *     return func.test(string);
		     *   };
		     * });
		     *
		     * _.filter(['abc', 'def'], /ef/);
		     * // => ['def']
		     */
		    function iteratee(func) {
		      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between a given
		     * object and `source`, returning `true` if the given object has equivalent
		     * property values, else `false`.
		     *
		     * **Note:** The created function is equivalent to `_.isMatch` with `source`
		     * partially applied.
		     *
		     * Partial comparisons will match empty array and empty object `source`
		     * values against any array or object value, respectively. See `_.isEqual`
		     * for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} source The object of property values to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
		     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matches(source) {
		      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that performs a partial deep comparison between the
		     * value at `path` of a given object to `srcValue`, returning `true` if the
		     * object value is equivalent, else `false`.
		     *
		     * **Note:** Partial comparisons will match empty array and empty object
		     * `srcValue` values against any array or object value, respectively. See
		     * `_.isEqual` for a list of supported value comparisons.
		     *
		     * **Note:** Multiple values can be checked by combining several matchers
		     * using `_.overSome`
		     *
		     * @static
		     * @memberOf _
		     * @since 3.2.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @param {*} srcValue The value to match.
		     * @returns {Function} Returns the new spec function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': 1, 'b': 2, 'c': 3 },
		     *   { 'a': 4, 'b': 5, 'c': 6 }
		     * ];
		     *
		     * _.find(objects, _.matchesProperty('a', 4));
		     * // => { 'a': 4, 'b': 5, 'c': 6 }
		     *
		     * // Checking for several possible values
		     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
		     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
		     */
		    function matchesProperty(path, srcValue) {
		      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
		    }

		    /**
		     * Creates a function that invokes the method at `path` of a given object.
		     * Any additional arguments are provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Array|string} path The path of the method to invoke.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': _.constant(2) } },
		     *   { 'a': { 'b': _.constant(1) } }
		     * ];
		     *
		     * _.map(objects, _.method('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(objects, _.method(['a', 'b']));
		     * // => [2, 1]
		     */
		    var method = baseRest(function(path, args) {
		      return function(object) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * The opposite of `_.method`; this method creates a function that invokes
		     * the method at a given path of `object`. Any additional arguments are
		     * provided to the invoked method.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.7.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @param {...*} [args] The arguments to invoke the method with.
		     * @returns {Function} Returns the new invoker function.
		     * @example
		     *
		     * var array = _.times(3, _.constant),
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
		     * // => [2, 0]
		     */
		    var methodOf = baseRest(function(object, args) {
		      return function(path) {
		        return baseInvoke(object, path, args);
		      };
		    });

		    /**
		     * Adds all own enumerable string keyed function properties of a source
		     * object to the destination object. If `object` is a function, then methods
		     * are added to its prototype as well.
		     *
		     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
		     * avoid conflicts caused by modifying the original.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {Function|Object} [object=lodash] The destination object.
		     * @param {Object} source The object of functions to add.
		     * @param {Object} [options={}] The options object.
		     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
		     * @returns {Function|Object} Returns `object`.
		     * @example
		     *
		     * function vowels(string) {
		     *   return _.filter(string, function(v) {
		     *     return /[aeiou]/i.test(v);
		     *   });
		     * }
		     *
		     * _.mixin({ 'vowels': vowels });
		     * _.vowels('fred');
		     * // => ['e']
		     *
		     * _('fred').vowels().value();
		     * // => ['e']
		     *
		     * _.mixin({ 'vowels': vowels }, { 'chain': false });
		     * _('fred').vowels();
		     * // => ['e']
		     */
		    function mixin(object, source, options) {
		      var props = keys(source),
		          methodNames = baseFunctions(source, props);

		      if (options == null &&
		          !(isObject(source) && (methodNames.length || !props.length))) {
		        options = source;
		        source = object;
		        object = this;
		        methodNames = baseFunctions(source, keys(source));
		      }
		      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
		          isFunc = isFunction(object);

		      arrayEach(methodNames, function(methodName) {
		        var func = source[methodName];
		        object[methodName] = func;
		        if (isFunc) {
		          object.prototype[methodName] = function() {
		            var chainAll = this.__chain__;
		            if (chain || chainAll) {
		              var result = object(this.__wrapped__),
		                  actions = result.__actions__ = copyArray(this.__actions__);

		              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
		              result.__chain__ = chainAll;
		              return result;
		            }
		            return func.apply(object, arrayPush([this.value()], arguments));
		          };
		        }
		      });

		      return object;
		    }

		    /**
		     * Reverts the `_` variable to its previous value and returns a reference to
		     * the `lodash` function.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @returns {Function} Returns the `lodash` function.
		     * @example
		     *
		     * var lodash = _.noConflict();
		     */
		    function noConflict() {
		      if (root._ === this) {
		        root._ = oldDash;
		      }
		      return this;
		    }

		    /**
		     * This method returns `undefined`.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.3.0
		     * @category Util
		     * @example
		     *
		     * _.times(2, _.noop);
		     * // => [undefined, undefined]
		     */
		    function noop() {
		      // No operation performed.
		    }

		    /**
		     * Creates a function that gets the argument at index `n`. If `n` is negative,
		     * the nth argument from the end is returned.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [n=0] The index of the argument to return.
		     * @returns {Function} Returns the new pass-thru function.
		     * @example
		     *
		     * var func = _.nthArg(1);
		     * func('a', 'b', 'c', 'd');
		     * // => 'b'
		     *
		     * var func = _.nthArg(-2);
		     * func('a', 'b', 'c', 'd');
		     * // => 'c'
		     */
		    function nthArg(n) {
		      n = toInteger(n);
		      return baseRest(function(args) {
		        return baseNth(args, n);
		      });
		    }

		    /**
		     * Creates a function that invokes `iteratees` with the arguments it receives
		     * and returns their results.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [iteratees=[_.identity]]
		     *  The iteratees to invoke.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.over([Math.max, Math.min]);
		     *
		     * func(1, 2, 3, 4);
		     * // => [4, 1]
		     */
		    var over = createOver(arrayMap);

		    /**
		     * Creates a function that checks if **all** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overEvery([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => false
		     *
		     * func(NaN);
		     * // => false
		     */
		    var overEvery = createOver(arrayEvery);

		    /**
		     * Creates a function that checks if **any** of the `predicates` return
		     * truthy when invoked with the arguments it receives.
		     *
		     * Following shorthands are possible for providing predicates.
		     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
		     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {...(Function|Function[])} [predicates=[_.identity]]
		     *  The predicates to check.
		     * @returns {Function} Returns the new function.
		     * @example
		     *
		     * var func = _.overSome([Boolean, isFinite]);
		     *
		     * func('1');
		     * // => true
		     *
		     * func(null);
		     * // => true
		     *
		     * func(NaN);
		     * // => false
		     *
		     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
		     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
		     */
		    var overSome = createOver(arraySome);

		    /**
		     * Creates a function that returns the value at `path` of a given object.
		     *
		     * @static
		     * @memberOf _
		     * @since 2.4.0
		     * @category Util
		     * @param {Array|string} path The path of the property to get.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var objects = [
		     *   { 'a': { 'b': 2 } },
		     *   { 'a': { 'b': 1 } }
		     * ];
		     *
		     * _.map(objects, _.property('a.b'));
		     * // => [2, 1]
		     *
		     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
		     * // => [1, 2]
		     */
		    function property(path) {
		      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		    }

		    /**
		     * The opposite of `_.property`; this method creates a function that returns
		     * the value at a given path of `object`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.0.0
		     * @category Util
		     * @param {Object} object The object to query.
		     * @returns {Function} Returns the new accessor function.
		     * @example
		     *
		     * var array = [0, 1, 2],
		     *     object = { 'a': array, 'b': array, 'c': array };
		     *
		     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
		     * // => [2, 0]
		     *
		     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
		     * // => [2, 0]
		     */
		    function propertyOf(object) {
		      return function(path) {
		        return object == null ? undefined$1 : baseGet(object, path);
		      };
		    }

		    /**
		     * Creates an array of numbers (positive and/or negative) progressing from
		     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
		     * `start` is specified without an `end` or `step`. If `end` is not specified,
		     * it's set to `start` with `start` then set to `0`.
		     *
		     * **Note:** JavaScript follows the IEEE-754 standard for resolving
		     * floating-point values which can produce unexpected results.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.rangeRight
		     * @example
		     *
		     * _.range(4);
		     * // => [0, 1, 2, 3]
		     *
		     * _.range(-4);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 5);
		     * // => [1, 2, 3, 4]
		     *
		     * _.range(0, 20, 5);
		     * // => [0, 5, 10, 15]
		     *
		     * _.range(0, -4, -1);
		     * // => [0, -1, -2, -3]
		     *
		     * _.range(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.range(0);
		     * // => []
		     */
		    var range = createRange();

		    /**
		     * This method is like `_.range` except that it populates values in
		     * descending order.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {number} [start=0] The start of the range.
		     * @param {number} end The end of the range.
		     * @param {number} [step=1] The value to increment or decrement by.
		     * @returns {Array} Returns the range of numbers.
		     * @see _.inRange, _.range
		     * @example
		     *
		     * _.rangeRight(4);
		     * // => [3, 2, 1, 0]
		     *
		     * _.rangeRight(-4);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 5);
		     * // => [4, 3, 2, 1]
		     *
		     * _.rangeRight(0, 20, 5);
		     * // => [15, 10, 5, 0]
		     *
		     * _.rangeRight(0, -4, -1);
		     * // => [-3, -2, -1, 0]
		     *
		     * _.rangeRight(1, 4, 0);
		     * // => [1, 1, 1]
		     *
		     * _.rangeRight(0);
		     * // => []
		     */
		    var rangeRight = createRange(true);

		    /**
		     * This method returns a new empty array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Array} Returns the new empty array.
		     * @example
		     *
		     * var arrays = _.times(2, _.stubArray);
		     *
		     * console.log(arrays);
		     * // => [[], []]
		     *
		     * console.log(arrays[0] === arrays[1]);
		     * // => false
		     */
		    function stubArray() {
		      return [];
		    }

		    /**
		     * This method returns `false`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `false`.
		     * @example
		     *
		     * _.times(2, _.stubFalse);
		     * // => [false, false]
		     */
		    function stubFalse() {
		      return false;
		    }

		    /**
		     * This method returns a new empty object.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {Object} Returns the new empty object.
		     * @example
		     *
		     * var objects = _.times(2, _.stubObject);
		     *
		     * console.log(objects);
		     * // => [{}, {}]
		     *
		     * console.log(objects[0] === objects[1]);
		     * // => false
		     */
		    function stubObject() {
		      return {};
		    }

		    /**
		     * This method returns an empty string.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {string} Returns the empty string.
		     * @example
		     *
		     * _.times(2, _.stubString);
		     * // => ['', '']
		     */
		    function stubString() {
		      return '';
		    }

		    /**
		     * This method returns `true`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.13.0
		     * @category Util
		     * @returns {boolean} Returns `true`.
		     * @example
		     *
		     * _.times(2, _.stubTrue);
		     * // => [true, true]
		     */
		    function stubTrue() {
		      return true;
		    }

		    /**
		     * Invokes the iteratee `n` times, returning an array of the results of
		     * each invocation. The iteratee is invoked with one argument; (index).
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {number} n The number of times to invoke `iteratee`.
		     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
		     * @returns {Array} Returns the array of results.
		     * @example
		     *
		     * _.times(3, String);
		     * // => ['0', '1', '2']
		     *
		     *  _.times(4, _.constant(0));
		     * // => [0, 0, 0, 0]
		     */
		    function times(n, iteratee) {
		      n = toInteger(n);
		      if (n < 1 || n > MAX_SAFE_INTEGER) {
		        return [];
		      }
		      var index = MAX_ARRAY_LENGTH,
		          length = nativeMin(n, MAX_ARRAY_LENGTH);

		      iteratee = getIteratee(iteratee);
		      n -= MAX_ARRAY_LENGTH;

		      var result = baseTimes(length, iteratee);
		      while (++index < n) {
		        iteratee(index);
		      }
		      return result;
		    }

		    /**
		     * Converts `value` to a property path array.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Util
		     * @param {*} value The value to convert.
		     * @returns {Array} Returns the new property path array.
		     * @example
		     *
		     * _.toPath('a.b.c');
		     * // => ['a', 'b', 'c']
		     *
		     * _.toPath('a[0].b.c');
		     * // => ['a', '0', 'b', 'c']
		     */
		    function toPath(value) {
		      if (isArray(value)) {
		        return arrayMap(value, toKey);
		      }
		      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
		    }

		    /**
		     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Util
		     * @param {string} [prefix=''] The value to prefix the ID with.
		     * @returns {string} Returns the unique ID.
		     * @example
		     *
		     * _.uniqueId('contact_');
		     * // => 'contact_104'
		     *
		     * _.uniqueId();
		     * // => '105'
		     */
		    function uniqueId(prefix) {
		      var id = ++idCounter;
		      return toString(prefix) + id;
		    }

		    /*------------------------------------------------------------------------*/

		    /**
		     * Adds two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {number} augend The first number in an addition.
		     * @param {number} addend The second number in an addition.
		     * @returns {number} Returns the total.
		     * @example
		     *
		     * _.add(6, 4);
		     * // => 10
		     */
		    var add = createMathOperation(function(augend, addend) {
		      return augend + addend;
		    }, 0);

		    /**
		     * Computes `number` rounded up to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round up.
		     * @param {number} [precision=0] The precision to round up to.
		     * @returns {number} Returns the rounded up number.
		     * @example
		     *
		     * _.ceil(4.006);
		     * // => 5
		     *
		     * _.ceil(6.004, 2);
		     * // => 6.01
		     *
		     * _.ceil(6040, -2);
		     * // => 6100
		     */
		    var ceil = createRound('ceil');

		    /**
		     * Divide two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} dividend The first number in a division.
		     * @param {number} divisor The second number in a division.
		     * @returns {number} Returns the quotient.
		     * @example
		     *
		     * _.divide(6, 4);
		     * // => 1.5
		     */
		    var divide = createMathOperation(function(dividend, divisor) {
		      return dividend / divisor;
		    }, 1);

		    /**
		     * Computes `number` rounded down to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round down.
		     * @param {number} [precision=0] The precision to round down to.
		     * @returns {number} Returns the rounded down number.
		     * @example
		     *
		     * _.floor(4.006);
		     * // => 4
		     *
		     * _.floor(0.046, 2);
		     * // => 0.04
		     *
		     * _.floor(4060, -2);
		     * // => 4000
		     */
		    var floor = createRound('floor');

		    /**
		     * Computes the maximum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * _.max([4, 2, 8, 6]);
		     * // => 8
		     *
		     * _.max([]);
		     * // => undefined
		     */
		    function max(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseGt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.max` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the maximum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.maxBy(objects, function(o) { return o.n; });
		     * // => { 'n': 2 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.maxBy(objects, 'n');
		     * // => { 'n': 2 }
		     */
		    function maxBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
		        : undefined$1;
		    }

		    /**
		     * Computes the mean of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * _.mean([4, 2, 8, 6]);
		     * // => 5
		     */
		    function mean(array) {
		      return baseMean(array, identity);
		    }

		    /**
		     * This method is like `_.mean` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be averaged.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the mean.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.meanBy(objects, function(o) { return o.n; });
		     * // => 5
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.meanBy(objects, 'n');
		     * // => 5
		     */
		    function meanBy(array, iteratee) {
		      return baseMean(array, getIteratee(iteratee, 2));
		    }

		    /**
		     * Computes the minimum value of `array`. If `array` is empty or falsey,
		     * `undefined` is returned.
		     *
		     * @static
		     * @since 0.1.0
		     * @memberOf _
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * _.min([4, 2, 8, 6]);
		     * // => 2
		     *
		     * _.min([]);
		     * // => undefined
		     */
		    function min(array) {
		      return (array && array.length)
		        ? baseExtremum(array, identity, baseLt)
		        : undefined$1;
		    }

		    /**
		     * This method is like `_.min` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the criterion by which
		     * the value is ranked. The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {*} Returns the minimum value.
		     * @example
		     *
		     * var objects = [{ 'n': 1 }, { 'n': 2 }];
		     *
		     * _.minBy(objects, function(o) { return o.n; });
		     * // => { 'n': 1 }
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.minBy(objects, 'n');
		     * // => { 'n': 1 }
		     */
		    function minBy(array, iteratee) {
		      return (array && array.length)
		        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
		        : undefined$1;
		    }

		    /**
		     * Multiply two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.7.0
		     * @category Math
		     * @param {number} multiplier The first number in a multiplication.
		     * @param {number} multiplicand The second number in a multiplication.
		     * @returns {number} Returns the product.
		     * @example
		     *
		     * _.multiply(6, 4);
		     * // => 24
		     */
		    var multiply = createMathOperation(function(multiplier, multiplicand) {
		      return multiplier * multiplicand;
		    }, 1);

		    /**
		     * Computes `number` rounded to `precision`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.10.0
		     * @category Math
		     * @param {number} number The number to round.
		     * @param {number} [precision=0] The precision to round to.
		     * @returns {number} Returns the rounded number.
		     * @example
		     *
		     * _.round(4.006);
		     * // => 4
		     *
		     * _.round(4.006, 2);
		     * // => 4.01
		     *
		     * _.round(4060, -2);
		     * // => 4100
		     */
		    var round = createRound('round');

		    /**
		     * Subtract two numbers.
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {number} minuend The first number in a subtraction.
		     * @param {number} subtrahend The second number in a subtraction.
		     * @returns {number} Returns the difference.
		     * @example
		     *
		     * _.subtract(6, 4);
		     * // => 2
		     */
		    var subtract = createMathOperation(function(minuend, subtrahend) {
		      return minuend - subtrahend;
		    }, 0);

		    /**
		     * Computes the sum of the values in `array`.
		     *
		     * @static
		     * @memberOf _
		     * @since 3.4.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * _.sum([4, 2, 8, 6]);
		     * // => 20
		     */
		    function sum(array) {
		      return (array && array.length)
		        ? baseSum(array, identity)
		        : 0;
		    }

		    /**
		     * This method is like `_.sum` except that it accepts `iteratee` which is
		     * invoked for each element in `array` to generate the value to be summed.
		     * The iteratee is invoked with one argument: (value).
		     *
		     * @static
		     * @memberOf _
		     * @since 4.0.0
		     * @category Math
		     * @param {Array} array The array to iterate over.
		     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
		     * @returns {number} Returns the sum.
		     * @example
		     *
		     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
		     *
		     * _.sumBy(objects, function(o) { return o.n; });
		     * // => 20
		     *
		     * // The `_.property` iteratee shorthand.
		     * _.sumBy(objects, 'n');
		     * // => 20
		     */
		    function sumBy(array, iteratee) {
		      return (array && array.length)
		        ? baseSum(array, getIteratee(iteratee, 2))
		        : 0;
		    }

		    /*------------------------------------------------------------------------*/

		    // Add methods that return wrapped values in chain sequences.
		    lodash.after = after;
		    lodash.ary = ary;
		    lodash.assign = assign;
		    lodash.assignIn = assignIn;
		    lodash.assignInWith = assignInWith;
		    lodash.assignWith = assignWith;
		    lodash.at = at;
		    lodash.before = before;
		    lodash.bind = bind;
		    lodash.bindAll = bindAll;
		    lodash.bindKey = bindKey;
		    lodash.castArray = castArray;
		    lodash.chain = chain;
		    lodash.chunk = chunk;
		    lodash.compact = compact;
		    lodash.concat = concat;
		    lodash.cond = cond;
		    lodash.conforms = conforms;
		    lodash.constant = constant;
		    lodash.countBy = countBy;
		    lodash.create = create;
		    lodash.curry = curry;
		    lodash.curryRight = curryRight;
		    lodash.debounce = debounce;
		    lodash.defaults = defaults;
		    lodash.defaultsDeep = defaultsDeep;
		    lodash.defer = defer;
		    lodash.delay = delay;
		    lodash.difference = difference;
		    lodash.differenceBy = differenceBy;
		    lodash.differenceWith = differenceWith;
		    lodash.drop = drop;
		    lodash.dropRight = dropRight;
		    lodash.dropRightWhile = dropRightWhile;
		    lodash.dropWhile = dropWhile;
		    lodash.fill = fill;
		    lodash.filter = filter;
		    lodash.flatMap = flatMap;
		    lodash.flatMapDeep = flatMapDeep;
		    lodash.flatMapDepth = flatMapDepth;
		    lodash.flatten = flatten;
		    lodash.flattenDeep = flattenDeep;
		    lodash.flattenDepth = flattenDepth;
		    lodash.flip = flip;
		    lodash.flow = flow;
		    lodash.flowRight = flowRight;
		    lodash.fromPairs = fromPairs;
		    lodash.functions = functions;
		    lodash.functionsIn = functionsIn;
		    lodash.groupBy = groupBy;
		    lodash.initial = initial;
		    lodash.intersection = intersection;
		    lodash.intersectionBy = intersectionBy;
		    lodash.intersectionWith = intersectionWith;
		    lodash.invert = invert;
		    lodash.invertBy = invertBy;
		    lodash.invokeMap = invokeMap;
		    lodash.iteratee = iteratee;
		    lodash.keyBy = keyBy;
		    lodash.keys = keys;
		    lodash.keysIn = keysIn;
		    lodash.map = map;
		    lodash.mapKeys = mapKeys;
		    lodash.mapValues = mapValues;
		    lodash.matches = matches;
		    lodash.matchesProperty = matchesProperty;
		    lodash.memoize = memoize;
		    lodash.merge = merge;
		    lodash.mergeWith = mergeWith;
		    lodash.method = method;
		    lodash.methodOf = methodOf;
		    lodash.mixin = mixin;
		    lodash.negate = negate;
		    lodash.nthArg = nthArg;
		    lodash.omit = omit;
		    lodash.omitBy = omitBy;
		    lodash.once = once;
		    lodash.orderBy = orderBy;
		    lodash.over = over;
		    lodash.overArgs = overArgs;
		    lodash.overEvery = overEvery;
		    lodash.overSome = overSome;
		    lodash.partial = partial;
		    lodash.partialRight = partialRight;
		    lodash.partition = partition;
		    lodash.pick = pick;
		    lodash.pickBy = pickBy;
		    lodash.property = property;
		    lodash.propertyOf = propertyOf;
		    lodash.pull = pull;
		    lodash.pullAll = pullAll;
		    lodash.pullAllBy = pullAllBy;
		    lodash.pullAllWith = pullAllWith;
		    lodash.pullAt = pullAt;
		    lodash.range = range;
		    lodash.rangeRight = rangeRight;
		    lodash.rearg = rearg;
		    lodash.reject = reject;
		    lodash.remove = remove;
		    lodash.rest = rest;
		    lodash.reverse = reverse;
		    lodash.sampleSize = sampleSize;
		    lodash.set = set;
		    lodash.setWith = setWith;
		    lodash.shuffle = shuffle;
		    lodash.slice = slice;
		    lodash.sortBy = sortBy;
		    lodash.sortedUniq = sortedUniq;
		    lodash.sortedUniqBy = sortedUniqBy;
		    lodash.split = split;
		    lodash.spread = spread;
		    lodash.tail = tail;
		    lodash.take = take;
		    lodash.takeRight = takeRight;
		    lodash.takeRightWhile = takeRightWhile;
		    lodash.takeWhile = takeWhile;
		    lodash.tap = tap;
		    lodash.throttle = throttle;
		    lodash.thru = thru;
		    lodash.toArray = toArray;
		    lodash.toPairs = toPairs;
		    lodash.toPairsIn = toPairsIn;
		    lodash.toPath = toPath;
		    lodash.toPlainObject = toPlainObject;
		    lodash.transform = transform;
		    lodash.unary = unary;
		    lodash.union = union;
		    lodash.unionBy = unionBy;
		    lodash.unionWith = unionWith;
		    lodash.uniq = uniq;
		    lodash.uniqBy = uniqBy;
		    lodash.uniqWith = uniqWith;
		    lodash.unset = unset;
		    lodash.unzip = unzip;
		    lodash.unzipWith = unzipWith;
		    lodash.update = update;
		    lodash.updateWith = updateWith;
		    lodash.values = values;
		    lodash.valuesIn = valuesIn;
		    lodash.without = without;
		    lodash.words = words;
		    lodash.wrap = wrap;
		    lodash.xor = xor;
		    lodash.xorBy = xorBy;
		    lodash.xorWith = xorWith;
		    lodash.zip = zip;
		    lodash.zipObject = zipObject;
		    lodash.zipObjectDeep = zipObjectDeep;
		    lodash.zipWith = zipWith;

		    // Add aliases.
		    lodash.entries = toPairs;
		    lodash.entriesIn = toPairsIn;
		    lodash.extend = assignIn;
		    lodash.extendWith = assignInWith;

		    // Add methods to `lodash.prototype`.
		    mixin(lodash, lodash);

		    /*------------------------------------------------------------------------*/

		    // Add methods that return unwrapped values in chain sequences.
		    lodash.add = add;
		    lodash.attempt = attempt;
		    lodash.camelCase = camelCase;
		    lodash.capitalize = capitalize;
		    lodash.ceil = ceil;
		    lodash.clamp = clamp;
		    lodash.clone = clone;
		    lodash.cloneDeep = cloneDeep;
		    lodash.cloneDeepWith = cloneDeepWith;
		    lodash.cloneWith = cloneWith;
		    lodash.conformsTo = conformsTo;
		    lodash.deburr = deburr;
		    lodash.defaultTo = defaultTo;
		    lodash.divide = divide;
		    lodash.endsWith = endsWith;
		    lodash.eq = eq;
		    lodash.escape = escape;
		    lodash.escapeRegExp = escapeRegExp;
		    lodash.every = every;
		    lodash.find = find;
		    lodash.findIndex = findIndex;
		    lodash.findKey = findKey;
		    lodash.findLast = findLast;
		    lodash.findLastIndex = findLastIndex;
		    lodash.findLastKey = findLastKey;
		    lodash.floor = floor;
		    lodash.forEach = forEach;
		    lodash.forEachRight = forEachRight;
		    lodash.forIn = forIn;
		    lodash.forInRight = forInRight;
		    lodash.forOwn = forOwn;
		    lodash.forOwnRight = forOwnRight;
		    lodash.get = get;
		    lodash.gt = gt;
		    lodash.gte = gte;
		    lodash.has = has;
		    lodash.hasIn = hasIn;
		    lodash.head = head;
		    lodash.identity = identity;
		    lodash.includes = includes;
		    lodash.indexOf = indexOf;
		    lodash.inRange = inRange;
		    lodash.invoke = invoke;
		    lodash.isArguments = isArguments;
		    lodash.isArray = isArray;
		    lodash.isArrayBuffer = isArrayBuffer;
		    lodash.isArrayLike = isArrayLike;
		    lodash.isArrayLikeObject = isArrayLikeObject;
		    lodash.isBoolean = isBoolean;
		    lodash.isBuffer = isBuffer;
		    lodash.isDate = isDate;
		    lodash.isElement = isElement;
		    lodash.isEmpty = isEmpty;
		    lodash.isEqual = isEqual;
		    lodash.isEqualWith = isEqualWith;
		    lodash.isError = isError;
		    lodash.isFinite = isFinite;
		    lodash.isFunction = isFunction;
		    lodash.isInteger = isInteger;
		    lodash.isLength = isLength;
		    lodash.isMap = isMap;
		    lodash.isMatch = isMatch;
		    lodash.isMatchWith = isMatchWith;
		    lodash.isNaN = isNaN;
		    lodash.isNative = isNative;
		    lodash.isNil = isNil;
		    lodash.isNull = isNull;
		    lodash.isNumber = isNumber;
		    lodash.isObject = isObject;
		    lodash.isObjectLike = isObjectLike;
		    lodash.isPlainObject = isPlainObject;
		    lodash.isRegExp = isRegExp;
		    lodash.isSafeInteger = isSafeInteger;
		    lodash.isSet = isSet;
		    lodash.isString = isString;
		    lodash.isSymbol = isSymbol;
		    lodash.isTypedArray = isTypedArray;
		    lodash.isUndefined = isUndefined;
		    lodash.isWeakMap = isWeakMap;
		    lodash.isWeakSet = isWeakSet;
		    lodash.join = join;
		    lodash.kebabCase = kebabCase;
		    lodash.last = last;
		    lodash.lastIndexOf = lastIndexOf;
		    lodash.lowerCase = lowerCase;
		    lodash.lowerFirst = lowerFirst;
		    lodash.lt = lt;
		    lodash.lte = lte;
		    lodash.max = max;
		    lodash.maxBy = maxBy;
		    lodash.mean = mean;
		    lodash.meanBy = meanBy;
		    lodash.min = min;
		    lodash.minBy = minBy;
		    lodash.stubArray = stubArray;
		    lodash.stubFalse = stubFalse;
		    lodash.stubObject = stubObject;
		    lodash.stubString = stubString;
		    lodash.stubTrue = stubTrue;
		    lodash.multiply = multiply;
		    lodash.nth = nth;
		    lodash.noConflict = noConflict;
		    lodash.noop = noop;
		    lodash.now = now;
		    lodash.pad = pad;
		    lodash.padEnd = padEnd;
		    lodash.padStart = padStart;
		    lodash.parseInt = parseInt;
		    lodash.random = random;
		    lodash.reduce = reduce;
		    lodash.reduceRight = reduceRight;
		    lodash.repeat = repeat;
		    lodash.replace = replace;
		    lodash.result = result;
		    lodash.round = round;
		    lodash.runInContext = runInContext;
		    lodash.sample = sample;
		    lodash.size = size;
		    lodash.snakeCase = snakeCase;
		    lodash.some = some;
		    lodash.sortedIndex = sortedIndex;
		    lodash.sortedIndexBy = sortedIndexBy;
		    lodash.sortedIndexOf = sortedIndexOf;
		    lodash.sortedLastIndex = sortedLastIndex;
		    lodash.sortedLastIndexBy = sortedLastIndexBy;
		    lodash.sortedLastIndexOf = sortedLastIndexOf;
		    lodash.startCase = startCase;
		    lodash.startsWith = startsWith;
		    lodash.subtract = subtract;
		    lodash.sum = sum;
		    lodash.sumBy = sumBy;
		    lodash.template = template;
		    lodash.times = times;
		    lodash.toFinite = toFinite;
		    lodash.toInteger = toInteger;
		    lodash.toLength = toLength;
		    lodash.toLower = toLower;
		    lodash.toNumber = toNumber;
		    lodash.toSafeInteger = toSafeInteger;
		    lodash.toString = toString;
		    lodash.toUpper = toUpper;
		    lodash.trim = trim;
		    lodash.trimEnd = trimEnd;
		    lodash.trimStart = trimStart;
		    lodash.truncate = truncate;
		    lodash.unescape = unescape;
		    lodash.uniqueId = uniqueId;
		    lodash.upperCase = upperCase;
		    lodash.upperFirst = upperFirst;

		    // Add aliases.
		    lodash.each = forEach;
		    lodash.eachRight = forEachRight;
		    lodash.first = head;

		    mixin(lodash, (function() {
		      var source = {};
		      baseForOwn(lodash, function(func, methodName) {
		        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
		          source[methodName] = func;
		        }
		      });
		      return source;
		    }()), { 'chain': false });

		    /*------------------------------------------------------------------------*/

		    /**
		     * The semantic version number.
		     *
		     * @static
		     * @memberOf _
		     * @type {string}
		     */
		    lodash.VERSION = VERSION;

		    // Assign default placeholders.
		    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
		      lodash[methodName].placeholder = lodash;
		    });

		    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
		    arrayEach(['drop', 'take'], function(methodName, index) {
		      LazyWrapper.prototype[methodName] = function(n) {
		        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

		        var result = (this.__filtered__ && !index)
		          ? new LazyWrapper(this)
		          : this.clone();

		        if (result.__filtered__) {
		          result.__takeCount__ = nativeMin(n, result.__takeCount__);
		        } else {
		          result.__views__.push({
		            'size': nativeMin(n, MAX_ARRAY_LENGTH),
		            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
		          });
		        }
		        return result;
		      };

		      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
		        return this.reverse()[methodName](n).reverse();
		      };
		    });

		    // Add `LazyWrapper` methods that accept an `iteratee` value.
		    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
		      var type = index + 1,
		          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

		      LazyWrapper.prototype[methodName] = function(iteratee) {
		        var result = this.clone();
		        result.__iteratees__.push({
		          'iteratee': getIteratee(iteratee, 3),
		          'type': type
		        });
		        result.__filtered__ = result.__filtered__ || isFilter;
		        return result;
		      };
		    });

		    // Add `LazyWrapper` methods for `_.head` and `_.last`.
		    arrayEach(['head', 'last'], function(methodName, index) {
		      var takeName = 'take' + (index ? 'Right' : '');

		      LazyWrapper.prototype[methodName] = function() {
		        return this[takeName](1).value()[0];
		      };
		    });

		    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
		    arrayEach(['initial', 'tail'], function(methodName, index) {
		      var dropName = 'drop' + (index ? '' : 'Right');

		      LazyWrapper.prototype[methodName] = function() {
		        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
		      };
		    });

		    LazyWrapper.prototype.compact = function() {
		      return this.filter(identity);
		    };

		    LazyWrapper.prototype.find = function(predicate) {
		      return this.filter(predicate).head();
		    };

		    LazyWrapper.prototype.findLast = function(predicate) {
		      return this.reverse().find(predicate);
		    };

		    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
		      if (typeof path == 'function') {
		        return new LazyWrapper(this);
		      }
		      return this.map(function(value) {
		        return baseInvoke(value, path, args);
		      });
		    });

		    LazyWrapper.prototype.reject = function(predicate) {
		      return this.filter(negate(getIteratee(predicate)));
		    };

		    LazyWrapper.prototype.slice = function(start, end) {
		      start = toInteger(start);

		      var result = this;
		      if (result.__filtered__ && (start > 0 || end < 0)) {
		        return new LazyWrapper(result);
		      }
		      if (start < 0) {
		        result = result.takeRight(-start);
		      } else if (start) {
		        result = result.drop(start);
		      }
		      if (end !== undefined$1) {
		        end = toInteger(end);
		        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
		      }
		      return result;
		    };

		    LazyWrapper.prototype.takeRightWhile = function(predicate) {
		      return this.reverse().takeWhile(predicate).reverse();
		    };

		    LazyWrapper.prototype.toArray = function() {
		      return this.take(MAX_ARRAY_LENGTH);
		    };

		    // Add `LazyWrapper` methods to `lodash.prototype`.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
		          isTaker = /^(?:head|last)$/.test(methodName),
		          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
		          retUnwrapped = isTaker || /^find/.test(methodName);

		      if (!lodashFunc) {
		        return;
		      }
		      lodash.prototype[methodName] = function() {
		        var value = this.__wrapped__,
		            args = isTaker ? [1] : arguments,
		            isLazy = value instanceof LazyWrapper,
		            iteratee = args[0],
		            useLazy = isLazy || isArray(value);

		        var interceptor = function(value) {
		          var result = lodashFunc.apply(lodash, arrayPush([value], args));
		          return (isTaker && chainAll) ? result[0] : result;
		        };

		        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
		          // Avoid lazy use if the iteratee has a "length" value other than `1`.
		          isLazy = useLazy = false;
		        }
		        var chainAll = this.__chain__,
		            isHybrid = !!this.__actions__.length,
		            isUnwrapped = retUnwrapped && !chainAll,
		            onlyLazy = isLazy && !isHybrid;

		        if (!retUnwrapped && useLazy) {
		          value = onlyLazy ? value : new LazyWrapper(this);
		          var result = func.apply(value, args);
		          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
		          return new LodashWrapper(result, chainAll);
		        }
		        if (isUnwrapped && onlyLazy) {
		          return func.apply(this, args);
		        }
		        result = this.thru(interceptor);
		        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
		      };
		    });

		    // Add `Array` methods to `lodash.prototype`.
		    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
		      var func = arrayProto[methodName],
		          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
		          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

		      lodash.prototype[methodName] = function() {
		        var args = arguments;
		        if (retUnwrapped && !this.__chain__) {
		          var value = this.value();
		          return func.apply(isArray(value) ? value : [], args);
		        }
		        return this[chainName](function(value) {
		          return func.apply(isArray(value) ? value : [], args);
		        });
		      };
		    });

		    // Map minified method names to their real names.
		    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
		      var lodashFunc = lodash[methodName];
		      if (lodashFunc) {
		        var key = lodashFunc.name + '';
		        if (!hasOwnProperty.call(realNames, key)) {
		          realNames[key] = [];
		        }
		        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
		      }
		    });

		    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
		      'name': 'wrapper',
		      'func': undefined$1
		    }];

		    // Add methods to `LazyWrapper`.
		    LazyWrapper.prototype.clone = lazyClone;
		    LazyWrapper.prototype.reverse = lazyReverse;
		    LazyWrapper.prototype.value = lazyValue;

		    // Add chain sequence methods to the `lodash` wrapper.
		    lodash.prototype.at = wrapperAt;
		    lodash.prototype.chain = wrapperChain;
		    lodash.prototype.commit = wrapperCommit;
		    lodash.prototype.next = wrapperNext;
		    lodash.prototype.plant = wrapperPlant;
		    lodash.prototype.reverse = wrapperReverse;
		    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

		    // Add lazy aliases.
		    lodash.prototype.first = lodash.prototype.head;

		    if (symIterator) {
		      lodash.prototype[symIterator] = wrapperToIterator;
		    }
		    return lodash;
		  });

		  /*--------------------------------------------------------------------------*/

		  // Export lodash.
		  var _ = runInContext();

		  // Some AMD build optimizers, like r.js, check for condition patterns like:
		  if (freeModule) {
		    // Export for Node.js.
		    (freeModule.exports = _)._ = _;
		    // Export for CommonJS support.
		    freeExports._ = _;
		  }
		  else {
		    // Export to the global object.
		    root._ = _;
		  }
		}.call(commonjsGlobal)); 
	} (lodash, lodash.exports));
	return lodash.exports;
}

var lodashExports = requireLodash();

var howler = {};

/*!
 *  howler.js v2.2.3
 *  howlerjs.com
 *
 *  (c) 2013-2020, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

var hasRequiredHowler;

function requireHowler () {
	if (hasRequiredHowler) return howler;
	hasRequiredHowler = 1;
	(function (exports) {
		(function() {

		  /** Global Methods **/
		  /***************************************************************************/

		  /**
		   * Create the global controller. All contained methods and properties apply
		   * to all sounds that are currently playing or will be in the future.
		   */
		  var HowlerGlobal = function() {
		    this.init();
		  };
		  HowlerGlobal.prototype = {
		    /**
		     * Initialize the global Howler object.
		     * @return {Howler}
		     */
		    init: function() {
		      var self = this || Howler;

		      // Create a global ID counter.
		      self._counter = 1000;

		      // Pool of unlocked HTML5 Audio objects.
		      self._html5AudioPool = [];
		      self.html5PoolSize = 10;

		      // Internal properties.
		      self._codecs = {};
		      self._howls = [];
		      self._muted = false;
		      self._volume = 1;
		      self._canPlayEvent = 'canplaythrough';
		      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

		      // Public properties.
		      self.masterGain = null;
		      self.noAudio = false;
		      self.usingWebAudio = true;
		      self.autoSuspend = true;
		      self.ctx = null;

		      // Set to false to disable the auto audio unlocker.
		      self.autoUnlock = true;

		      // Setup the various state values for global tracking.
		      self._setup();

		      return self;
		    },

		    /**
		     * Get/set the global volume for all sounds.
		     * @param  {Float} vol Volume from 0.0 to 1.0.
		     * @return {Howler/Float}     Returns self or current volume.
		     */
		    volume: function(vol) {
		      var self = this || Howler;
		      vol = parseFloat(vol);

		      // If we don't have an AudioContext created yet, run the setup.
		      if (!self.ctx) {
		        setupAudioContext();
		      }

		      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
		        self._volume = vol;

		        // Don't update any of the nodes if we are muted.
		        if (self._muted) {
		          return self;
		        }

		        // When using Web Audio, we just need to adjust the master gain.
		        if (self.usingWebAudio) {
		          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
		        }

		        // Loop through and change volume for all HTML5 audio nodes.
		        for (var i=0; i<self._howls.length; i++) {
		          if (!self._howls[i]._webAudio) {
		            // Get all of the sounds in this Howl group.
		            var ids = self._howls[i]._getSoundIds();

		            // Loop through all sounds and change the volumes.
		            for (var j=0; j<ids.length; j++) {
		              var sound = self._howls[i]._soundById(ids[j]);

		              if (sound && sound._node) {
		                sound._node.volume = sound._volume * vol;
		              }
		            }
		          }
		        }

		        return self;
		      }

		      return self._volume;
		    },

		    /**
		     * Handle muting and unmuting globally.
		     * @param  {Boolean} muted Is muted or not.
		     */
		    mute: function(muted) {
		      var self = this || Howler;

		      // If we don't have an AudioContext created yet, run the setup.
		      if (!self.ctx) {
		        setupAudioContext();
		      }

		      self._muted = muted;

		      // With Web Audio, we just need to mute the master gain.
		      if (self.usingWebAudio) {
		        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
		      }

		      // Loop through and mute all HTML5 Audio nodes.
		      for (var i=0; i<self._howls.length; i++) {
		        if (!self._howls[i]._webAudio) {
		          // Get all of the sounds in this Howl group.
		          var ids = self._howls[i]._getSoundIds();

		          // Loop through all sounds and mark the audio node as muted.
		          for (var j=0; j<ids.length; j++) {
		            var sound = self._howls[i]._soundById(ids[j]);

		            if (sound && sound._node) {
		              sound._node.muted = (muted) ? true : sound._muted;
		            }
		          }
		        }
		      }

		      return self;
		    },

		    /**
		     * Handle stopping all sounds globally.
		     */
		    stop: function() {
		      var self = this || Howler;

		      // Loop through all Howls and stop them.
		      for (var i=0; i<self._howls.length; i++) {
		        self._howls[i].stop();
		      }

		      return self;
		    },

		    /**
		     * Unload and destroy all currently loaded Howl objects.
		     * @return {Howler}
		     */
		    unload: function() {
		      var self = this || Howler;

		      for (var i=self._howls.length-1; i>=0; i--) {
		        self._howls[i].unload();
		      }

		      // Create a new AudioContext to make sure it is fully reset.
		      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
		        self.ctx.close();
		        self.ctx = null;
		        setupAudioContext();
		      }

		      return self;
		    },

		    /**
		     * Check for codec support of specific extension.
		     * @param  {String} ext Audio file extention.
		     * @return {Boolean}
		     */
		    codecs: function(ext) {
		      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
		    },

		    /**
		     * Setup various state values for global tracking.
		     * @return {Howler}
		     */
		    _setup: function() {
		      var self = this || Howler;

		      // Keeps track of the suspend/resume state of the AudioContext.
		      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';

		      // Automatically begin the 30-second suspend process
		      self._autoSuspend();

		      // Check if audio is available.
		      if (!self.usingWebAudio) {
		        // No audio is available on this system if noAudio is set to true.
		        if (typeof Audio !== 'undefined') {
		          try {
		            var test = new Audio();

		            // Check if the canplaythrough event is available.
		            if (typeof test.oncanplaythrough === 'undefined') {
		              self._canPlayEvent = 'canplay';
		            }
		          } catch(e) {
		            self.noAudio = true;
		          }
		        } else {
		          self.noAudio = true;
		        }
		      }

		      // Test to make sure audio isn't disabled in Internet Explorer.
		      try {
		        var test = new Audio();
		        if (test.muted) {
		          self.noAudio = true;
		        }
		      } catch (e) {}

		      // Check for supported codecs.
		      if (!self.noAudio) {
		        self._setupCodecs();
		      }

		      return self;
		    },

		    /**
		     * Check for browser support for various codecs and cache the results.
		     * @return {Howler}
		     */
		    _setupCodecs: function() {
		      var self = this || Howler;
		      var audioTest = null;

		      // Must wrap in a try/catch because IE11 in server mode throws an error.
		      try {
		        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
		      } catch (err) {
		        return self;
		      }

		      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
		        return self;
		      }

		      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

		      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
		      var ua = self._navigator ? self._navigator.userAgent : '';
		      var checkOpera = ua.match(/OPR\/([0-6].)/g);
		      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);
		      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;
		      var safariVersion = ua.match(/Version\/(.*?) /);
		      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);

		      self._codecs = {
		        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
		        mpeg: !!mpegTest,
		        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
		        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
		        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
		        wav: !!(audioTest.canPlayType('audio/wav; codecs="1"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),
		        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
		        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
		        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
		        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
		        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
		        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')),
		        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')),
		        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
		        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
		      };

		      return self;
		    },

		    /**
		     * Some browsers/devices will only allow audio to be played after a user interaction.
		     * Attempt to automatically unlock audio on the first user interaction.
		     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
		     * @return {Howler}
		     */
		    _unlockAudio: function() {
		      var self = this || Howler;

		      // Only run this if Web Audio is supported and it hasn't already been unlocked.
		      if (self._audioUnlocked || !self.ctx) {
		        return;
		      }

		      self._audioUnlocked = false;
		      self.autoUnlock = false;

		      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
		      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
		      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
		      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
		        self._mobileUnloaded = true;
		        self.unload();
		      }

		      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
		      // http://stackoverflow.com/questions/24119684
		      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

		      // Call this method on touch start to create and play a buffer,
		      // then check if the audio actually played to determine if
		      // audio has now been unlocked on iOS, Android, etc.
		      var unlock = function(e) {
		        // Create a pool of unlocked HTML5 Audio objects that can
		        // be used for playing sounds without user interaction. HTML5
		        // Audio objects must be individually unlocked, as opposed
		        // to the WebAudio API which only needs a single activation.
		        // This must occur before WebAudio setup or the source.onended
		        // event will not fire.
		        while (self._html5AudioPool.length < self.html5PoolSize) {
		          try {
		            var audioNode = new Audio();

		            // Mark this Audio object as unlocked to ensure it can get returned
		            // to the unlocked pool when released.
		            audioNode._unlocked = true;

		            // Add the audio node to the pool.
		            self._releaseHtml5Audio(audioNode);
		          } catch (e) {
		            self.noAudio = true;
		            break;
		          }
		        }

		        // Loop through any assigned audio nodes and unlock them.
		        for (var i=0; i<self._howls.length; i++) {
		          if (!self._howls[i]._webAudio) {
		            // Get all of the sounds in this Howl group.
		            var ids = self._howls[i]._getSoundIds();

		            // Loop through all sounds and unlock the audio nodes.
		            for (var j=0; j<ids.length; j++) {
		              var sound = self._howls[i]._soundById(ids[j]);

		              if (sound && sound._node && !sound._node._unlocked) {
		                sound._node._unlocked = true;
		                sound._node.load();
		              }
		            }
		          }
		        }

		        // Fix Android can not play in suspend state.
		        self._autoResume();

		        // Create an empty buffer.
		        var source = self.ctx.createBufferSource();
		        source.buffer = self._scratchBuffer;
		        source.connect(self.ctx.destination);

		        // Play the empty buffer.
		        if (typeof source.start === 'undefined') {
		          source.noteOn(0);
		        } else {
		          source.start(0);
		        }

		        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
		        if (typeof self.ctx.resume === 'function') {
		          self.ctx.resume();
		        }

		        // Setup a timeout to check that we are unlocked on the next event loop.
		        source.onended = function() {
		          source.disconnect(0);

		          // Update the unlocked state and prevent this check from happening again.
		          self._audioUnlocked = true;

		          // Remove the touch start listener.
		          document.removeEventListener('touchstart', unlock, true);
		          document.removeEventListener('touchend', unlock, true);
		          document.removeEventListener('click', unlock, true);
		          document.removeEventListener('keydown', unlock, true);

		          // Let all sounds know that audio has been unlocked.
		          for (var i=0; i<self._howls.length; i++) {
		            self._howls[i]._emit('unlock');
		          }
		        };
		      };

		      // Setup a touch start listener to attempt an unlock in.
		      document.addEventListener('touchstart', unlock, true);
		      document.addEventListener('touchend', unlock, true);
		      document.addEventListener('click', unlock, true);
		      document.addEventListener('keydown', unlock, true);

		      return self;
		    },

		    /**
		     * Get an unlocked HTML5 Audio object from the pool. If none are left,
		     * return a new Audio object and throw a warning.
		     * @return {Audio} HTML5 Audio object.
		     */
		    _obtainHtml5Audio: function() {
		      var self = this || Howler;

		      // Return the next object from the pool if one exists.
		      if (self._html5AudioPool.length) {
		        return self._html5AudioPool.pop();
		      }

		      //.Check if the audio is locked and throw a warning.
		      var testPlay = new Audio().play();
		      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {
		        testPlay.catch(function() {
		          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');
		        });
		      }

		      return new Audio();
		    },

		    /**
		     * Return an activated HTML5 Audio object to the pool.
		     * @return {Howler}
		     */
		    _releaseHtml5Audio: function(audio) {
		      var self = this || Howler;

		      // Don't add audio to the pool if we don't know if it has been unlocked.
		      if (audio._unlocked) {
		        self._html5AudioPool.push(audio);
		      }

		      return self;
		    },

		    /**
		     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
		     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
		     * @return {Howler}
		     */
		    _autoSuspend: function() {
		      var self = this;

		      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
		        return;
		      }

		      // Check if any sounds are playing.
		      for (var i=0; i<self._howls.length; i++) {
		        if (self._howls[i]._webAudio) {
		          for (var j=0; j<self._howls[i]._sounds.length; j++) {
		            if (!self._howls[i]._sounds[j]._paused) {
		              return self;
		            }
		          }
		        }
		      }

		      if (self._suspendTimer) {
		        clearTimeout(self._suspendTimer);
		      }

		      // If no sound has played after 30 seconds, suspend the context.
		      self._suspendTimer = setTimeout(function() {
		        if (!self.autoSuspend) {
		          return;
		        }

		        self._suspendTimer = null;
		        self.state = 'suspending';

		        // Handle updating the state of the audio context after suspending.
		        var handleSuspension = function() {
		          self.state = 'suspended';

		          if (self._resumeAfterSuspend) {
		            delete self._resumeAfterSuspend;
		            self._autoResume();
		          }
		        };

		        // Either the state gets suspended or it is interrupted.
		        // Either way, we need to update the state to suspended.
		        self.ctx.suspend().then(handleSuspension, handleSuspension);
		      }, 30000);

		      return self;
		    },

		    /**
		     * Automatically resume the Web Audio AudioContext when a new sound is played.
		     * @return {Howler}
		     */
		    _autoResume: function() {
		      var self = this;

		      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
		        return;
		      }

		      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {
		        clearTimeout(self._suspendTimer);
		        self._suspendTimer = null;
		      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {
		        self.ctx.resume().then(function() {
		          self.state = 'running';

		          // Emit to all Howls that the audio has resumed.
		          for (var i=0; i<self._howls.length; i++) {
		            self._howls[i]._emit('resume');
		          }
		        });

		        if (self._suspendTimer) {
		          clearTimeout(self._suspendTimer);
		          self._suspendTimer = null;
		        }
		      } else if (self.state === 'suspending') {
		        self._resumeAfterSuspend = true;
		      }

		      return self;
		    }
		  };

		  // Setup the global audio controller.
		  var Howler = new HowlerGlobal();

		  /** Group Methods **/
		  /***************************************************************************/

		  /**
		   * Create an audio group controller.
		   * @param {Object} o Passed in properties for this group.
		   */
		  var Howl = function(o) {
		    var self = this;

		    // Throw an error if no source is provided.
		    if (!o.src || o.src.length === 0) {
		      console.error('An array of source files must be passed with any new Howl.');
		      return;
		    }

		    self.init(o);
		  };
		  Howl.prototype = {
		    /**
		     * Initialize a new Howl group object.
		     * @param  {Object} o Passed in properties for this group.
		     * @return {Howl}
		     */
		    init: function(o) {
		      var self = this;

		      // If we don't have an AudioContext created yet, run the setup.
		      if (!Howler.ctx) {
		        setupAudioContext();
		      }

		      // Setup user-defined default properties.
		      self._autoplay = o.autoplay || false;
		      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
		      self._html5 = o.html5 || false;
		      self._muted = o.mute || false;
		      self._loop = o.loop || false;
		      self._pool = o.pool || 5;
		      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;
		      self._rate = o.rate || 1;
		      self._sprite = o.sprite || {};
		      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
		      self._volume = o.volume !== undefined ? o.volume : 1;
		      self._xhr = {
		        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',
		        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
		        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,
		      };

		      // Setup all other default properties.
		      self._duration = 0;
		      self._state = 'unloaded';
		      self._sounds = [];
		      self._endTimers = {};
		      self._queue = [];
		      self._playLock = false;

		      // Setup event listeners.
		      self._onend = o.onend ? [{fn: o.onend}] : [];
		      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
		      self._onload = o.onload ? [{fn: o.onload}] : [];
		      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
		      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
		      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
		      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
		      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
		      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
		      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
		      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
		      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
		      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];
		      self._onresume = [];

		      // Web Audio or HTML5 Audio?
		      self._webAudio = Howler.usingWebAudio && !self._html5;

		      // Automatically try to enable audio.
		      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {
		        Howler._unlockAudio();
		      }

		      // Keep track of this Howl group in the global controller.
		      Howler._howls.push(self);

		      // If they selected autoplay, add a play event to the load queue.
		      if (self._autoplay) {
		        self._queue.push({
		          event: 'play',
		          action: function() {
		            self.play();
		          }
		        });
		      }

		      // Load the source file unless otherwise specified.
		      if (self._preload && self._preload !== 'none') {
		        self.load();
		      }

		      return self;
		    },

		    /**
		     * Load the audio file.
		     * @return {Howler}
		     */
		    load: function() {
		      var self = this;
		      var url = null;

		      // If no audio is available, quit immediately.
		      if (Howler.noAudio) {
		        self._emit('loaderror', null, 'No audio support.');
		        return;
		      }

		      // Make sure our source is in an array.
		      if (typeof self._src === 'string') {
		        self._src = [self._src];
		      }

		      // Loop through the sources and pick the first one that is compatible.
		      for (var i=0; i<self._src.length; i++) {
		        var ext, str;

		        if (self._format && self._format[i]) {
		          // If an extension was specified, use that instead.
		          ext = self._format[i];
		        } else {
		          // Make sure the source is a string.
		          str = self._src[i];
		          if (typeof str !== 'string') {
		            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
		            continue;
		          }

		          // Extract the file extension from the URL or base64 data URI.
		          ext = /^data:audio\/([^;,]+);/i.exec(str);
		          if (!ext) {
		            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
		          }

		          if (ext) {
		            ext = ext[1].toLowerCase();
		          }
		        }

		        // Log a warning if no extension was found.
		        if (!ext) {
		          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
		        }

		        // Check if this extension is available.
		        if (ext && Howler.codecs(ext)) {
		          url = self._src[i];
		          break;
		        }
		      }

		      if (!url) {
		        self._emit('loaderror', null, 'No codec support for selected audio sources.');
		        return;
		      }

		      self._src = url;
		      self._state = 'loading';

		      // If the hosting page is HTTPS and the source isn't,
		      // drop down to HTML5 Audio to avoid Mixed Content errors.
		      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
		        self._html5 = true;
		        self._webAudio = false;
		      }

		      // Create a new sound object and add it to the pool.
		      new Sound(self);

		      // Load and decode the audio data for playback.
		      if (self._webAudio) {
		        loadBuffer(self);
		      }

		      return self;
		    },

		    /**
		     * Play a sound or resume previous playback.
		     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
		     * @param  {Boolean} internal Internal Use: true prevents event firing.
		     * @return {Number}          Sound ID.
		     */
		    play: function(sprite, internal) {
		      var self = this;
		      var id = null;

		      // Determine if a sprite, sound id or nothing was passed
		      if (typeof sprite === 'number') {
		        id = sprite;
		        sprite = null;
		      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
		        // If the passed sprite doesn't exist, do nothing.
		        return null;
		      } else if (typeof sprite === 'undefined') {
		        // Use the default sound sprite (plays the full audio length).
		        sprite = '__default';

		        // Check if there is a single paused sound that isn't ended.
		        // If there is, play that sound. If not, continue as usual.
		        if (!self._playLock) {
		          var num = 0;
		          for (var i=0; i<self._sounds.length; i++) {
		            if (self._sounds[i]._paused && !self._sounds[i]._ended) {
		              num++;
		              id = self._sounds[i]._id;
		            }
		          }

		          if (num === 1) {
		            sprite = null;
		          } else {
		            id = null;
		          }
		        }
		      }

		      // Get the selected node, or get one from the pool.
		      var sound = id ? self._soundById(id) : self._inactiveSound();

		      // If the sound doesn't exist, do nothing.
		      if (!sound) {
		        return null;
		      }

		      // Select the sprite definition.
		      if (id && !sprite) {
		        sprite = sound._sprite || '__default';
		      }

		      // If the sound hasn't loaded, we must wait to get the audio's duration.
		      // We also need to wait to make sure we don't run into race conditions with
		      // the order of function calls.
		      if (self._state !== 'loaded') {
		        // Set the sprite value on this sound.
		        sound._sprite = sprite;

		        // Mark this sound as not ended in case another sound is played before this one loads.
		        sound._ended = false;

		        // Add the sound to the queue to be played on load.
		        var soundId = sound._id;
		        self._queue.push({
		          event: 'play',
		          action: function() {
		            self.play(soundId);
		          }
		        });

		        return soundId;
		      }

		      // Don't play the sound if an id was passed and it is already playing.
		      if (id && !sound._paused) {
		        // Trigger the play event, in order to keep iterating through queue.
		        if (!internal) {
		          self._loadQueue('play');
		        }

		        return sound._id;
		      }

		      // Make sure the AudioContext isn't suspended, and resume it if it is.
		      if (self._webAudio) {
		        Howler._autoResume();
		      }

		      // Determine how long to play for and where to start playing.
		      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
		      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
		      var timeout = (duration * 1000) / Math.abs(sound._rate);
		      var start = self._sprite[sprite][0] / 1000;
		      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
		      sound._sprite = sprite;

		      // Mark the sound as ended instantly so that this async playback
		      // doesn't get grabbed by another call to play while this one waits to start.
		      sound._ended = false;

		      // Update the parameters of the sound.
		      var setParams = function() {
		        sound._paused = false;
		        sound._seek = seek;
		        sound._start = start;
		        sound._stop = stop;
		        sound._loop = !!(sound._loop || self._sprite[sprite][2]);
		      };

		      // End the sound instantly if seek is at the end.
		      if (seek >= stop) {
		        self._ended(sound);
		        return;
		      }

		      // Begin the actual playback.
		      var node = sound._node;
		      if (self._webAudio) {
		        // Fire this when the sound is ready to play to begin Web Audio playback.
		        var playWebAudio = function() {
		          self._playLock = false;
		          setParams();
		          self._refreshBuffer(sound);

		          // Setup the playback params.
		          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
		          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
		          sound._playStart = Howler.ctx.currentTime;

		          // Play the sound using the supported method.
		          if (typeof node.bufferSource.start === 'undefined') {
		            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
		          } else {
		            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
		          }

		          // Start a new timer if none is present.
		          if (timeout !== Infinity) {
		            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
		          }

		          if (!internal) {
		            setTimeout(function() {
		              self._emit('play', sound._id);
		              self._loadQueue();
		            }, 0);
		          }
		        };

		        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {
		          playWebAudio();
		        } else {
		          self._playLock = true;

		          // Wait for the audio context to resume before playing.
		          self.once('resume', playWebAudio);

		          // Cancel the end timer.
		          self._clearTimer(sound._id);
		        }
		      } else {
		        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
		        var playHtml5 = function() {
		          node.currentTime = seek;
		          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
		          node.volume = sound._volume * Howler.volume();
		          node.playbackRate = sound._rate;

		          // Some browsers will throw an error if this is called without user interaction.
		          try {
		            var play = node.play();

		            // Support older browsers that don't support promises, and thus don't have this issue.
		            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {
		              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
		              self._playLock = true;

		              // Set param values immediately.
		              setParams();

		              // Releases the lock and executes queued actions.
		              play
		                .then(function() {
		                  self._playLock = false;
		                  node._unlocked = true;
		                  if (!internal) {
		                    self._emit('play', sound._id);
		                  } else {
		                    self._loadQueue();
		                  }
		                })
		                .catch(function() {
		                  self._playLock = false;
		                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
		                    'on mobile devices and Chrome where playback was not within a user interaction.');

		                  // Reset the ended and paused values.
		                  sound._ended = true;
		                  sound._paused = true;
		                });
		            } else if (!internal) {
		              self._playLock = false;
		              setParams();
		              self._emit('play', sound._id);
		            }

		            // Setting rate before playing won't work in IE, so we set it again here.
		            node.playbackRate = sound._rate;

		            // If the node is still paused, then we can assume there was a playback issue.
		            if (node.paused) {
		              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
		                'on mobile devices and Chrome where playback was not within a user interaction.');
		              return;
		            }

		            // Setup the end timer on sprites or listen for the ended event.
		            if (sprite !== '__default' || sound._loop) {
		              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
		            } else {
		              self._endTimers[sound._id] = function() {
		                // Fire ended on this audio node.
		                self._ended(sound);

		                // Clear this listener.
		                node.removeEventListener('ended', self._endTimers[sound._id], false);
		              };
		              node.addEventListener('ended', self._endTimers[sound._id], false);
		            }
		          } catch (err) {
		            self._emit('playerror', sound._id, err);
		          }
		        };

		        // If this is streaming audio, make sure the src is set and load again.
		        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {
		          node.src = self._src;
		          node.load();
		        }

		        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
		        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
		        if (node.readyState >= 3 || loadedNoReadyState) {
		          playHtml5();
		        } else {
		          self._playLock = true;
		          self._state = 'loading';

		          var listener = function() {
		            self._state = 'loaded';
		            
		            // Begin playback.
		            playHtml5();

		            // Clear this listener.
		            node.removeEventListener(Howler._canPlayEvent, listener, false);
		          };
		          node.addEventListener(Howler._canPlayEvent, listener, false);

		          // Cancel the end timer.
		          self._clearTimer(sound._id);
		        }
		      }

		      return sound._id;
		    },

		    /**
		     * Pause playback and save current position.
		     * @param  {Number} id The sound ID (empty to pause all in group).
		     * @return {Howl}
		     */
		    pause: function(id) {
		      var self = this;

		      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
		      if (self._state !== 'loaded' || self._playLock) {
		        self._queue.push({
		          event: 'pause',
		          action: function() {
		            self.pause(id);
		          }
		        });

		        return self;
		      }

		      // If no id is passed, get all ID's to be paused.
		      var ids = self._getSoundIds(id);

		      for (var i=0; i<ids.length; i++) {
		        // Clear the end timer.
		        self._clearTimer(ids[i]);

		        // Get the sound.
		        var sound = self._soundById(ids[i]);

		        if (sound && !sound._paused) {
		          // Reset the seek position.
		          sound._seek = self.seek(ids[i]);
		          sound._rateSeek = 0;
		          sound._paused = true;

		          // Stop currently running fades.
		          self._stopFade(ids[i]);

		          if (sound._node) {
		            if (self._webAudio) {
		              // Make sure the sound has been created.
		              if (!sound._node.bufferSource) {
		                continue;
		              }

		              if (typeof sound._node.bufferSource.stop === 'undefined') {
		                sound._node.bufferSource.noteOff(0);
		              } else {
		                sound._node.bufferSource.stop(0);
		              }

		              // Clean up the buffer source.
		              self._cleanBuffer(sound._node);
		            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
		              sound._node.pause();
		            }
		          }
		        }

		        // Fire the pause event, unless `true` is passed as the 2nd argument.
		        if (!arguments[1]) {
		          self._emit('pause', sound ? sound._id : null);
		        }
		      }

		      return self;
		    },

		    /**
		     * Stop playback and reset to start.
		     * @param  {Number} id The sound ID (empty to stop all in group).
		     * @param  {Boolean} internal Internal Use: true prevents event firing.
		     * @return {Howl}
		     */
		    stop: function(id, internal) {
		      var self = this;

		      // If the sound hasn't loaded, add it to the load queue to stop when capable.
		      if (self._state !== 'loaded' || self._playLock) {
		        self._queue.push({
		          event: 'stop',
		          action: function() {
		            self.stop(id);
		          }
		        });

		        return self;
		      }

		      // If no id is passed, get all ID's to be stopped.
		      var ids = self._getSoundIds(id);

		      for (var i=0; i<ids.length; i++) {
		        // Clear the end timer.
		        self._clearTimer(ids[i]);

		        // Get the sound.
		        var sound = self._soundById(ids[i]);

		        if (sound) {
		          // Reset the seek position.
		          sound._seek = sound._start || 0;
		          sound._rateSeek = 0;
		          sound._paused = true;
		          sound._ended = true;

		          // Stop currently running fades.
		          self._stopFade(ids[i]);

		          if (sound._node) {
		            if (self._webAudio) {
		              // Make sure the sound's AudioBufferSourceNode has been created.
		              if (sound._node.bufferSource) {
		                if (typeof sound._node.bufferSource.stop === 'undefined') {
		                  sound._node.bufferSource.noteOff(0);
		                } else {
		                  sound._node.bufferSource.stop(0);
		                }

		                // Clean up the buffer source.
		                self._cleanBuffer(sound._node);
		              }
		            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
		              sound._node.currentTime = sound._start || 0;
		              sound._node.pause();

		              // If this is a live stream, stop download once the audio is stopped.
		              if (sound._node.duration === Infinity) {
		                self._clearSound(sound._node);
		              }
		            }
		          }

		          if (!internal) {
		            self._emit('stop', sound._id);
		          }
		        }
		      }

		      return self;
		    },

		    /**
		     * Mute/unmute a single sound or all sounds in this Howl group.
		     * @param  {Boolean} muted Set to true to mute and false to unmute.
		     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
		     * @return {Howl}
		     */
		    mute: function(muted, id) {
		      var self = this;

		      // If the sound hasn't loaded, add it to the load queue to mute when capable.
		      if (self._state !== 'loaded'|| self._playLock) {
		        self._queue.push({
		          event: 'mute',
		          action: function() {
		            self.mute(muted, id);
		          }
		        });

		        return self;
		      }

		      // If applying mute/unmute to all sounds, update the group's value.
		      if (typeof id === 'undefined') {
		        if (typeof muted === 'boolean') {
		          self._muted = muted;
		        } else {
		          return self._muted;
		        }
		      }

		      // If no id is passed, get all ID's to be muted.
		      var ids = self._getSoundIds(id);

		      for (var i=0; i<ids.length; i++) {
		        // Get the sound.
		        var sound = self._soundById(ids[i]);

		        if (sound) {
		          sound._muted = muted;

		          // Cancel active fade and set the volume to the end value.
		          if (sound._interval) {
		            self._stopFade(sound._id);
		          }

		          if (self._webAudio && sound._node) {
		            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
		          } else if (sound._node) {
		            sound._node.muted = Howler._muted ? true : muted;
		          }

		          self._emit('mute', sound._id);
		        }
		      }

		      return self;
		    },

		    /**
		     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
		     *   volume() -> Returns the group's volume value.
		     *   volume(id) -> Returns the sound id's current volume.
		     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
		     *   volume(vol, id) -> Sets the volume of passed sound id.
		     * @return {Howl/Number} Returns self or current volume.
		     */
		    volume: function() {
		      var self = this;
		      var args = arguments;
		      var vol, id;

		      // Determine the values based on arguments.
		      if (args.length === 0) {
		        // Return the value of the groups' volume.
		        return self._volume;
		      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
		        // First check if this is an ID, and if not, assume it is a new volume.
		        var ids = self._getSoundIds();
		        var index = ids.indexOf(args[0]);
		        if (index >= 0) {
		          id = parseInt(args[0], 10);
		        } else {
		          vol = parseFloat(args[0]);
		        }
		      } else if (args.length >= 2) {
		        vol = parseFloat(args[0]);
		        id = parseInt(args[1], 10);
		      }

		      // Update the volume or return the current volume.
		      var sound;
		      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
		        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
		        if (self._state !== 'loaded'|| self._playLock) {
		          self._queue.push({
		            event: 'volume',
		            action: function() {
		              self.volume.apply(self, args);
		            }
		          });

		          return self;
		        }

		        // Set the group volume.
		        if (typeof id === 'undefined') {
		          self._volume = vol;
		        }

		        // Update one or all volumes.
		        id = self._getSoundIds(id);
		        for (var i=0; i<id.length; i++) {
		          // Get the sound.
		          sound = self._soundById(id[i]);

		          if (sound) {
		            sound._volume = vol;

		            // Stop currently running fades.
		            if (!args[2]) {
		              self._stopFade(id[i]);
		            }

		            if (self._webAudio && sound._node && !sound._muted) {
		              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
		            } else if (sound._node && !sound._muted) {
		              sound._node.volume = vol * Howler.volume();
		            }

		            self._emit('volume', sound._id);
		          }
		        }
		      } else {
		        sound = id ? self._soundById(id) : self._sounds[0];
		        return sound ? sound._volume : 0;
		      }

		      return self;
		    },

		    /**
		     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).
		     * @param  {Number} from The value to fade from (0.0 to 1.0).
		     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
		     * @param  {Number} len  Time in milliseconds to fade.
		     * @param  {Number} id   The sound id (omit to fade all sounds).
		     * @return {Howl}
		     */
		    fade: function(from, to, len, id) {
		      var self = this;

		      // If the sound hasn't loaded, add it to the load queue to fade when capable.
		      if (self._state !== 'loaded' || self._playLock) {
		        self._queue.push({
		          event: 'fade',
		          action: function() {
		            self.fade(from, to, len, id);
		          }
		        });

		        return self;
		      }

		      // Make sure the to/from/len values are numbers.
		      from = Math.min(Math.max(0, parseFloat(from)), 1);
		      to = Math.min(Math.max(0, parseFloat(to)), 1);
		      len = parseFloat(len);

		      // Set the volume to the start position.
		      self.volume(from, id);

		      // Fade the volume of one or all sounds.
		      var ids = self._getSoundIds(id);
		      for (var i=0; i<ids.length; i++) {
		        // Get the sound.
		        var sound = self._soundById(ids[i]);

		        // Create a linear fade or fall back to timeouts with HTML5 Audio.
		        if (sound) {
		          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
		          if (!id) {
		            self._stopFade(ids[i]);
		          }

		          // If we are using Web Audio, let the native methods do the actual fade.
		          if (self._webAudio && !sound._muted) {
		            var currentTime = Howler.ctx.currentTime;
		            var end = currentTime + (len / 1000);
		            sound._volume = from;
		            sound._node.gain.setValueAtTime(from, currentTime);
		            sound._node.gain.linearRampToValueAtTime(to, end);
		          }

		          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
		        }
		      }

		      return self;
		    },

		    /**
		     * Starts the internal interval to fade a sound.
		     * @param  {Object} sound Reference to sound to fade.
		     * @param  {Number} from The value to fade from (0.0 to 1.0).
		     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
		     * @param  {Number} len  Time in milliseconds to fade.
		     * @param  {Number} id   The sound id to fade.
		     * @param  {Boolean} isGroup   If true, set the volume on the group.
		     */
		    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
		      var self = this;
		      var vol = from;
		      var diff = to - from;
		      var steps = Math.abs(diff / 0.01);
		      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
		      var lastTick = Date.now();

		      // Store the value being faded to.
		      sound._fadeTo = to;

		      // Update the volume value on each interval tick.
		      sound._interval = setInterval(function() {
		        // Update the volume based on the time since the last tick.
		        var tick = (Date.now() - lastTick) / len;
		        lastTick = Date.now();
		        vol += diff * tick;

		        // Round to within 2 decimal points.
		        vol = Math.round(vol * 100) / 100;

		        // Make sure the volume is in the right bounds.
		        if (diff < 0) {
		          vol = Math.max(to, vol);
		        } else {
		          vol = Math.min(to, vol);
		        }

		        // Change the volume.
		        if (self._webAudio) {
		          sound._volume = vol;
		        } else {
		          self.volume(vol, sound._id, true);
		        }

		        // Set the group's volume.
		        if (isGroup) {
		          self._volume = vol;
		        }

		        // When the fade is complete, stop it and fire event.
		        if ((to < from && vol <= to) || (to > from && vol >= to)) {
		          clearInterval(sound._interval);
		          sound._interval = null;
		          sound._fadeTo = null;
		          self.volume(to, sound._id);
		          self._emit('fade', sound._id);
		        }
		      }, stepLen);
		    },

		    /**
		     * Internal method that stops the currently playing fade when
		     * a new fade starts, volume is changed or the sound is stopped.
		     * @param  {Number} id The sound id.
		     * @return {Howl}
		     */
		    _stopFade: function(id) {
		      var self = this;
		      var sound = self._soundById(id);

		      if (sound && sound._interval) {
		        if (self._webAudio) {
		          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
		        }

		        clearInterval(sound._interval);
		        sound._interval = null;
		        self.volume(sound._fadeTo, id);
		        sound._fadeTo = null;
		        self._emit('fade', id);
		      }

		      return self;
		    },

		    /**
		     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
		     *   loop() -> Returns the group's loop value.
		     *   loop(id) -> Returns the sound id's loop value.
		     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
		     *   loop(loop, id) -> Sets the loop value of passed sound id.
		     * @return {Howl/Boolean} Returns self or current loop value.
		     */
		    loop: function() {
		      var self = this;
		      var args = arguments;
		      var loop, id, sound;

		      // Determine the values for loop and id.
		      if (args.length === 0) {
		        // Return the grou's loop value.
		        return self._loop;
		      } else if (args.length === 1) {
		        if (typeof args[0] === 'boolean') {
		          loop = args[0];
		          self._loop = loop;
		        } else {
		          // Return this sound's loop value.
		          sound = self._soundById(parseInt(args[0], 10));
		          return sound ? sound._loop : false;
		        }
		      } else if (args.length === 2) {
		        loop = args[0];
		        id = parseInt(args[1], 10);
		      }

		      // If no id is passed, get all ID's to be looped.
		      var ids = self._getSoundIds(id);
		      for (var i=0; i<ids.length; i++) {
		        sound = self._soundById(ids[i]);

		        if (sound) {
		          sound._loop = loop;
		          if (self._webAudio && sound._node && sound._node.bufferSource) {
		            sound._node.bufferSource.loop = loop;
		            if (loop) {
		              sound._node.bufferSource.loopStart = sound._start || 0;
		              sound._node.bufferSource.loopEnd = sound._stop;

		              // If playing, restart playback to ensure looping updates.
		              if (self.playing(ids[i])) {
		                self.pause(ids[i], true);
		                self.play(ids[i], true);
		              }
		            }
		          }
		        }
		      }

		      return self;
		    },

		    /**
		     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
		     *   rate() -> Returns the first sound node's current playback rate.
		     *   rate(id) -> Returns the sound id's current playback rate.
		     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
		     *   rate(rate, id) -> Sets the playback rate of passed sound id.
		     * @return {Howl/Number} Returns self or the current playback rate.
		     */
		    rate: function() {
		      var self = this;
		      var args = arguments;
		      var rate, id;

		      // Determine the values based on arguments.
		      if (args.length === 0) {
		        // We will simply return the current rate of the first node.
		        id = self._sounds[0]._id;
		      } else if (args.length === 1) {
		        // First check if this is an ID, and if not, assume it is a new rate value.
		        var ids = self._getSoundIds();
		        var index = ids.indexOf(args[0]);
		        if (index >= 0) {
		          id = parseInt(args[0], 10);
		        } else {
		          rate = parseFloat(args[0]);
		        }
		      } else if (args.length === 2) {
		        rate = parseFloat(args[0]);
		        id = parseInt(args[1], 10);
		      }

		      // Update the playback rate or return the current value.
		      var sound;
		      if (typeof rate === 'number') {
		        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
		        if (self._state !== 'loaded' || self._playLock) {
		          self._queue.push({
		            event: 'rate',
		            action: function() {
		              self.rate.apply(self, args);
		            }
		          });

		          return self;
		        }

		        // Set the group rate.
		        if (typeof id === 'undefined') {
		          self._rate = rate;
		        }

		        // Update one or all volumes.
		        id = self._getSoundIds(id);
		        for (var i=0; i<id.length; i++) {
		          // Get the sound.
		          sound = self._soundById(id[i]);

		          if (sound) {
		            // Keep track of our position when the rate changed and update the playback
		            // start position so we can properly adjust the seek position for time elapsed.
		            if (self.playing(id[i])) {
		              sound._rateSeek = self.seek(id[i]);
		              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
		            }
		            sound._rate = rate;

		            // Change the playback rate.
		            if (self._webAudio && sound._node && sound._node.bufferSource) {
		              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
		            } else if (sound._node) {
		              sound._node.playbackRate = rate;
		            }

		            // Reset the timers.
		            var seek = self.seek(id[i]);
		            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
		            var timeout = (duration * 1000) / Math.abs(sound._rate);

		            // Start a new end timer if sound is already playing.
		            if (self._endTimers[id[i]] || !sound._paused) {
		              self._clearTimer(id[i]);
		              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
		            }

		            self._emit('rate', sound._id);
		          }
		        }
		      } else {
		        sound = self._soundById(id);
		        return sound ? sound._rate : self._rate;
		      }

		      return self;
		    },

		    /**
		     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
		     *   seek() -> Returns the first sound node's current seek position.
		     *   seek(id) -> Returns the sound id's current seek position.
		     *   seek(seek) -> Sets the seek position of the first sound node.
		     *   seek(seek, id) -> Sets the seek position of passed sound id.
		     * @return {Howl/Number} Returns self or the current seek position.
		     */
		    seek: function() {
		      var self = this;
		      var args = arguments;
		      var seek, id;

		      // Determine the values based on arguments.
		      if (args.length === 0) {
		        // We will simply return the current position of the first node.
		        if (self._sounds.length) {
		          id = self._sounds[0]._id;
		        }
		      } else if (args.length === 1) {
		        // First check if this is an ID, and if not, assume it is a new seek position.
		        var ids = self._getSoundIds();
		        var index = ids.indexOf(args[0]);
		        if (index >= 0) {
		          id = parseInt(args[0], 10);
		        } else if (self._sounds.length) {
		          id = self._sounds[0]._id;
		          seek = parseFloat(args[0]);
		        }
		      } else if (args.length === 2) {
		        seek = parseFloat(args[0]);
		        id = parseInt(args[1], 10);
		      }

		      // If there is no ID, bail out.
		      if (typeof id === 'undefined') {
		        return 0;
		      }

		      // If the sound hasn't loaded, add it to the load queue to seek when capable.
		      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {
		        self._queue.push({
		          event: 'seek',
		          action: function() {
		            self.seek.apply(self, args);
		          }
		        });

		        return self;
		      }

		      // Get the sound.
		      var sound = self._soundById(id);

		      if (sound) {
		        if (typeof seek === 'number' && seek >= 0) {
		          // Pause the sound and update position for restarting playback.
		          var playing = self.playing(id);
		          if (playing) {
		            self.pause(id, true);
		          }

		          // Move the position of the track and cancel timer.
		          sound._seek = seek;
		          sound._ended = false;
		          self._clearTimer(id);

		          // Update the seek position for HTML5 Audio.
		          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {
		            sound._node.currentTime = seek;
		          }

		          // Seek and emit when ready.
		          var seekAndEmit = function() {
		            // Restart the playback if the sound was playing.
		            if (playing) {
		              self.play(id, true);
		            }

		            self._emit('seek', id);
		          };

		          // Wait for the play lock to be unset before emitting (HTML5 Audio).
		          if (playing && !self._webAudio) {
		            var emitSeek = function() {
		              if (!self._playLock) {
		                seekAndEmit();
		              } else {
		                setTimeout(emitSeek, 0);
		              }
		            };
		            setTimeout(emitSeek, 0);
		          } else {
		            seekAndEmit();
		          }
		        } else {
		          if (self._webAudio) {
		            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
		            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
		            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
		          } else {
		            return sound._node.currentTime;
		          }
		        }
		      }

		      return self;
		    },

		    /**
		     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
		     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
		     * @return {Boolean} True if playing and false if not.
		     */
		    playing: function(id) {
		      var self = this;

		      // Check the passed sound ID (if any).
		      if (typeof id === 'number') {
		        var sound = self._soundById(id);
		        return sound ? !sound._paused : false;
		      }

		      // Otherwise, loop through all sounds and check if any are playing.
		      for (var i=0; i<self._sounds.length; i++) {
		        if (!self._sounds[i]._paused) {
		          return true;
		        }
		      }

		      return false;
		    },

		    /**
		     * Get the duration of this sound. Passing a sound id will return the sprite duration.
		     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
		     * @return {Number} Audio duration in seconds.
		     */
		    duration: function(id) {
		      var self = this;
		      var duration = self._duration;

		      // If we pass an ID, get the sound and return the sprite length.
		      var sound = self._soundById(id);
		      if (sound) {
		        duration = self._sprite[sound._sprite][1] / 1000;
		      }

		      return duration;
		    },

		    /**
		     * Returns the current loaded state of this Howl.
		     * @return {String} 'unloaded', 'loading', 'loaded'
		     */
		    state: function() {
		      return this._state;
		    },

		    /**
		     * Unload and destroy the current Howl object.
		     * This will immediately stop all sound instances attached to this group.
		     */
		    unload: function() {
		      var self = this;

		      // Stop playing any active sounds.
		      var sounds = self._sounds;
		      for (var i=0; i<sounds.length; i++) {
		        // Stop the sound if it is currently playing.
		        if (!sounds[i]._paused) {
		          self.stop(sounds[i]._id);
		        }

		        // Remove the source or disconnect.
		        if (!self._webAudio) {
		          // Set the source to 0-second silence to stop any downloading (except in IE).
		          self._clearSound(sounds[i]._node);

		          // Remove any event listeners.
		          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
		          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
		          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);

		          // Release the Audio object back to the pool.
		          Howler._releaseHtml5Audio(sounds[i]._node);
		        }

		        // Empty out all of the nodes.
		        delete sounds[i]._node;

		        // Make sure all timers are cleared out.
		        self._clearTimer(sounds[i]._id);
		      }

		      // Remove the references in the global Howler object.
		      var index = Howler._howls.indexOf(self);
		      if (index >= 0) {
		        Howler._howls.splice(index, 1);
		      }

		      // Delete this sound from the cache (if no other Howl is using it).
		      var remCache = true;
		      for (i=0; i<Howler._howls.length; i++) {
		        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {
		          remCache = false;
		          break;
		        }
		      }

		      if (cache && remCache) {
		        delete cache[self._src];
		      }

		      // Clear global errors.
		      Howler.noAudio = false;

		      // Clear out `self`.
		      self._state = 'unloaded';
		      self._sounds = [];
		      self = null;

		      return null;
		    },

		    /**
		     * Listen to a custom event.
		     * @param  {String}   event Event name.
		     * @param  {Function} fn    Listener to call.
		     * @param  {Number}   id    (optional) Only listen to events for this sound.
		     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
		     * @return {Howl}
		     */
		    on: function(event, fn, id, once) {
		      var self = this;
		      var events = self['_on' + event];

		      if (typeof fn === 'function') {
		        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
		      }

		      return self;
		    },

		    /**
		     * Remove a custom event. Call without parameters to remove all events.
		     * @param  {String}   event Event name.
		     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
		     * @param  {Number}   id    (optional) Only remove events for this sound.
		     * @return {Howl}
		     */
		    off: function(event, fn, id) {
		      var self = this;
		      var events = self['_on' + event];
		      var i = 0;

		      // Allow passing just an event and ID.
		      if (typeof fn === 'number') {
		        id = fn;
		        fn = null;
		      }

		      if (fn || id) {
		        // Loop through event store and remove the passed function.
		        for (i=0; i<events.length; i++) {
		          var isId = (id === events[i].id);
		          if (fn === events[i].fn && isId || !fn && isId) {
		            events.splice(i, 1);
		            break;
		          }
		        }
		      } else if (event) {
		        // Clear out all events of this type.
		        self['_on' + event] = [];
		      } else {
		        // Clear out all events of every type.
		        var keys = Object.keys(self);
		        for (i=0; i<keys.length; i++) {
		          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
		            self[keys[i]] = [];
		          }
		        }
		      }

		      return self;
		    },

		    /**
		     * Listen to a custom event and remove it once fired.
		     * @param  {String}   event Event name.
		     * @param  {Function} fn    Listener to call.
		     * @param  {Number}   id    (optional) Only listen to events for this sound.
		     * @return {Howl}
		     */
		    once: function(event, fn, id) {
		      var self = this;

		      // Setup the event listener.
		      self.on(event, fn, id, 1);

		      return self;
		    },

		    /**
		     * Emit all events of a specific type and pass the sound id.
		     * @param  {String} event Event name.
		     * @param  {Number} id    Sound ID.
		     * @param  {Number} msg   Message to go with event.
		     * @return {Howl}
		     */
		    _emit: function(event, id, msg) {
		      var self = this;
		      var events = self['_on' + event];

		      // Loop through event store and fire all functions.
		      for (var i=events.length-1; i>=0; i--) {
		        // Only fire the listener if the correct ID is used.
		        if (!events[i].id || events[i].id === id || event === 'load') {
		          setTimeout(function(fn) {
		            fn.call(this, id, msg);
		          }.bind(self, events[i].fn), 0);

		          // If this event was setup with `once`, remove it.
		          if (events[i].once) {
		            self.off(event, events[i].fn, events[i].id);
		          }
		        }
		      }

		      // Pass the event type into load queue so that it can continue stepping.
		      self._loadQueue(event);

		      return self;
		    },

		    /**
		     * Queue of actions initiated before the sound has loaded.
		     * These will be called in sequence, with the next only firing
		     * after the previous has finished executing (even if async like play).
		     * @return {Howl}
		     */
		    _loadQueue: function(event) {
		      var self = this;

		      if (self._queue.length > 0) {
		        var task = self._queue[0];

		        // Remove this task if a matching event was passed.
		        if (task.event === event) {
		          self._queue.shift();
		          self._loadQueue();
		        }

		        // Run the task if no event type is passed.
		        if (!event) {
		          task.action();
		        }
		      }

		      return self;
		    },

		    /**
		     * Fired when playback ends at the end of the duration.
		     * @param  {Sound} sound The sound object to work with.
		     * @return {Howl}
		     */
		    _ended: function(sound) {
		      var self = this;
		      var sprite = sound._sprite;

		      // If we are using IE and there was network latency we may be clipping
		      // audio before it completes playing. Lets check the node to make sure it
		      // believes it has completed, before ending the playback.
		      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
		        setTimeout(self._ended.bind(self, sound), 100);
		        return self;
		      }

		      // Should this sound loop?
		      var loop = !!(sound._loop || self._sprite[sprite][2]);

		      // Fire the ended event.
		      self._emit('end', sound._id);

		      // Restart the playback for HTML5 Audio loop.
		      if (!self._webAudio && loop) {
		        self.stop(sound._id, true).play(sound._id);
		      }

		      // Restart this timer if on a Web Audio loop.
		      if (self._webAudio && loop) {
		        self._emit('play', sound._id);
		        sound._seek = sound._start || 0;
		        sound._rateSeek = 0;
		        sound._playStart = Howler.ctx.currentTime;

		        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
		        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
		      }

		      // Mark the node as paused.
		      if (self._webAudio && !loop) {
		        sound._paused = true;
		        sound._ended = true;
		        sound._seek = sound._start || 0;
		        sound._rateSeek = 0;
		        self._clearTimer(sound._id);

		        // Clean up the buffer source.
		        self._cleanBuffer(sound._node);

		        // Attempt to auto-suspend AudioContext if no sounds are still playing.
		        Howler._autoSuspend();
		      }

		      // When using a sprite, end the track.
		      if (!self._webAudio && !loop) {
		        self.stop(sound._id, true);
		      }

		      return self;
		    },

		    /**
		     * Clear the end timer for a sound playback.
		     * @param  {Number} id The sound ID.
		     * @return {Howl}
		     */
		    _clearTimer: function(id) {
		      var self = this;

		      if (self._endTimers[id]) {
		        // Clear the timeout or remove the ended listener.
		        if (typeof self._endTimers[id] !== 'function') {
		          clearTimeout(self._endTimers[id]);
		        } else {
		          var sound = self._soundById(id);
		          if (sound && sound._node) {
		            sound._node.removeEventListener('ended', self._endTimers[id], false);
		          }
		        }

		        delete self._endTimers[id];
		      }

		      return self;
		    },

		    /**
		     * Return the sound identified by this ID, or return null.
		     * @param  {Number} id Sound ID
		     * @return {Object}    Sound object or null.
		     */
		    _soundById: function(id) {
		      var self = this;

		      // Loop through all sounds and find the one with this ID.
		      for (var i=0; i<self._sounds.length; i++) {
		        if (id === self._sounds[i]._id) {
		          return self._sounds[i];
		        }
		      }

		      return null;
		    },

		    /**
		     * Return an inactive sound from the pool or create a new one.
		     * @return {Sound} Sound playback object.
		     */
		    _inactiveSound: function() {
		      var self = this;

		      self._drain();

		      // Find the first inactive node to recycle.
		      for (var i=0; i<self._sounds.length; i++) {
		        if (self._sounds[i]._ended) {
		          return self._sounds[i].reset();
		        }
		      }

		      // If no inactive node was found, create a new one.
		      return new Sound(self);
		    },

		    /**
		     * Drain excess inactive sounds from the pool.
		     */
		    _drain: function() {
		      var self = this;
		      var limit = self._pool;
		      var cnt = 0;
		      var i = 0;

		      // If there are less sounds than the max pool size, we are done.
		      if (self._sounds.length < limit) {
		        return;
		      }

		      // Count the number of inactive sounds.
		      for (i=0; i<self._sounds.length; i++) {
		        if (self._sounds[i]._ended) {
		          cnt++;
		        }
		      }

		      // Remove excess inactive sounds, going in reverse order.
		      for (i=self._sounds.length - 1; i>=0; i--) {
		        if (cnt <= limit) {
		          return;
		        }

		        if (self._sounds[i]._ended) {
		          // Disconnect the audio source when using Web Audio.
		          if (self._webAudio && self._sounds[i]._node) {
		            self._sounds[i]._node.disconnect(0);
		          }

		          // Remove sounds until we have the pool size.
		          self._sounds.splice(i, 1);
		          cnt--;
		        }
		      }
		    },

		    /**
		     * Get all ID's from the sounds pool.
		     * @param  {Number} id Only return one ID if one is passed.
		     * @return {Array}    Array of IDs.
		     */
		    _getSoundIds: function(id) {
		      var self = this;

		      if (typeof id === 'undefined') {
		        var ids = [];
		        for (var i=0; i<self._sounds.length; i++) {
		          ids.push(self._sounds[i]._id);
		        }

		        return ids;
		      } else {
		        return [id];
		      }
		    },

		    /**
		     * Load the sound back into the buffer source.
		     * @param  {Sound} sound The sound object to work with.
		     * @return {Howl}
		     */
		    _refreshBuffer: function(sound) {
		      var self = this;

		      // Setup the buffer source for playback.
		      sound._node.bufferSource = Howler.ctx.createBufferSource();
		      sound._node.bufferSource.buffer = cache[self._src];

		      // Connect to the correct node.
		      if (sound._panner) {
		        sound._node.bufferSource.connect(sound._panner);
		      } else {
		        sound._node.bufferSource.connect(sound._node);
		      }

		      // Setup looping and playback rate.
		      sound._node.bufferSource.loop = sound._loop;
		      if (sound._loop) {
		        sound._node.bufferSource.loopStart = sound._start || 0;
		        sound._node.bufferSource.loopEnd = sound._stop || 0;
		      }
		      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

		      return self;
		    },

		    /**
		     * Prevent memory leaks by cleaning up the buffer source after playback.
		     * @param  {Object} node Sound's audio node containing the buffer source.
		     * @return {Howl}
		     */
		    _cleanBuffer: function(node) {
		      var self = this;
		      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;

		      if (Howler._scratchBuffer && node.bufferSource) {
		        node.bufferSource.onended = null;
		        node.bufferSource.disconnect(0);
		        if (isIOS) {
		          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
		        }
		      }
		      node.bufferSource = null;

		      return self;
		    },

		    /**
		     * Set the source to a 0-second silence to stop any downloading (except in IE).
		     * @param  {Object} node Audio node to clear.
		     */
		    _clearSound: function(node) {
		      var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
		      if (!checkIE) {
		        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
		      }
		    }
		  };

		  /** Single Sound Methods **/
		  /***************************************************************************/

		  /**
		   * Setup the sound object, which each node attached to a Howl group is contained in.
		   * @param {Object} howl The Howl parent group.
		   */
		  var Sound = function(howl) {
		    this._parent = howl;
		    this.init();
		  };
		  Sound.prototype = {
		    /**
		     * Initialize a new Sound object.
		     * @return {Sound}
		     */
		    init: function() {
		      var self = this;
		      var parent = self._parent;

		      // Setup the default parameters.
		      self._muted = parent._muted;
		      self._loop = parent._loop;
		      self._volume = parent._volume;
		      self._rate = parent._rate;
		      self._seek = 0;
		      self._paused = true;
		      self._ended = true;
		      self._sprite = '__default';

		      // Generate a unique ID for this sound.
		      self._id = ++Howler._counter;

		      // Add itself to the parent's pool.
		      parent._sounds.push(self);

		      // Create the new node.
		      self.create();

		      return self;
		    },

		    /**
		     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
		     * @return {Sound}
		     */
		    create: function() {
		      var self = this;
		      var parent = self._parent;
		      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

		      if (parent._webAudio) {
		        // Create the gain node for controlling volume (the source will connect to this).
		        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
		        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
		        self._node.paused = true;
		        self._node.connect(Howler.masterGain);
		      } else if (!Howler.noAudio) {
		        // Get an unlocked Audio object from the pool.
		        self._node = Howler._obtainHtml5Audio();

		        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
		        self._errorFn = self._errorListener.bind(self);
		        self._node.addEventListener('error', self._errorFn, false);

		        // Listen for 'canplaythrough' event to let us know the sound is ready.
		        self._loadFn = self._loadListener.bind(self);
		        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

		        // Listen for the 'ended' event on the sound to account for edge-case where
		        // a finite sound has a duration of Infinity.
		        self._endFn = self._endListener.bind(self);
		        self._node.addEventListener('ended', self._endFn, false);

		        // Setup the new audio node.
		        self._node.src = parent._src;
		        self._node.preload = parent._preload === true ? 'auto' : parent._preload;
		        self._node.volume = volume * Howler.volume();

		        // Begin loading the source.
		        self._node.load();
		      }

		      return self;
		    },

		    /**
		     * Reset the parameters of this sound to the original state (for recycle).
		     * @return {Sound}
		     */
		    reset: function() {
		      var self = this;
		      var parent = self._parent;

		      // Reset all of the parameters of this sound.
		      self._muted = parent._muted;
		      self._loop = parent._loop;
		      self._volume = parent._volume;
		      self._rate = parent._rate;
		      self._seek = 0;
		      self._rateSeek = 0;
		      self._paused = true;
		      self._ended = true;
		      self._sprite = '__default';

		      // Generate a new ID so that it isn't confused with the previous sound.
		      self._id = ++Howler._counter;

		      return self;
		    },

		    /**
		     * HTML5 Audio error listener callback.
		     */
		    _errorListener: function() {
		      var self = this;

		      // Fire an error event and pass back the code.
		      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

		      // Clear the event listener.
		      self._node.removeEventListener('error', self._errorFn, false);
		    },

		    /**
		     * HTML5 Audio canplaythrough listener callback.
		     */
		    _loadListener: function() {
		      var self = this;
		      var parent = self._parent;

		      // Round up the duration to account for the lower precision in HTML5 Audio.
		      parent._duration = Math.ceil(self._node.duration * 10) / 10;

		      // Setup a sprite if none is defined.
		      if (Object.keys(parent._sprite).length === 0) {
		        parent._sprite = {__default: [0, parent._duration * 1000]};
		      }

		      if (parent._state !== 'loaded') {
		        parent._state = 'loaded';
		        parent._emit('load');
		        parent._loadQueue();
		      }

		      // Clear the event listener.
		      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
		    },

		    /**
		     * HTML5 Audio ended listener callback.
		     */
		    _endListener: function() {
		      var self = this;
		      var parent = self._parent;

		      // Only handle the `ended`` event if the duration is Infinity.
		      if (parent._duration === Infinity) {
		        // Update the parent duration to match the real audio duration.
		        // Round up the duration to account for the lower precision in HTML5 Audio.
		        parent._duration = Math.ceil(self._node.duration * 10) / 10;

		        // Update the sprite that corresponds to the real duration.
		        if (parent._sprite.__default[1] === Infinity) {
		          parent._sprite.__default[1] = parent._duration * 1000;
		        }

		        // Run the regular ended method.
		        parent._ended(self);
		      }

		      // Clear the event listener since the duration is now correct.
		      self._node.removeEventListener('ended', self._endFn, false);
		    }
		  };

		  /** Helper Methods **/
		  /***************************************************************************/

		  var cache = {};

		  /**
		   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
		   * @param  {Howl} self
		   */
		  var loadBuffer = function(self) {
		    var url = self._src;

		    // Check if the buffer has already been cached and use it instead.
		    if (cache[url]) {
		      // Set the duration from the cache.
		      self._duration = cache[url].duration;

		      // Load the sound into this Howl.
		      loadSound(self);

		      return;
		    }

		    if (/^data:[^;]+;base64,/.test(url)) {
		      // Decode the base64 data URI without XHR, since some browsers don't support it.
		      var data = atob(url.split(',')[1]);
		      var dataView = new Uint8Array(data.length);
		      for (var i=0; i<data.length; ++i) {
		        dataView[i] = data.charCodeAt(i);
		      }

		      decodeAudioData(dataView.buffer, self);
		    } else {
		      // Load the buffer from the URL.
		      var xhr = new XMLHttpRequest();
		      xhr.open(self._xhr.method, url, true);
		      xhr.withCredentials = self._xhr.withCredentials;
		      xhr.responseType = 'arraybuffer';

		      // Apply any custom headers to the request.
		      if (self._xhr.headers) {
		        Object.keys(self._xhr.headers).forEach(function(key) {
		          xhr.setRequestHeader(key, self._xhr.headers[key]);
		        });
		      }

		      xhr.onload = function() {
		        // Make sure we get a successful response back.
		        var code = (xhr.status + '')[0];
		        if (code !== '0' && code !== '2' && code !== '3') {
		          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
		          return;
		        }

		        decodeAudioData(xhr.response, self);
		      };
		      xhr.onerror = function() {
		        // If there is an error, switch to HTML5 Audio.
		        if (self._webAudio) {
		          self._html5 = true;
		          self._webAudio = false;
		          self._sounds = [];
		          delete cache[url];
		          self.load();
		        }
		      };
		      safeXhrSend(xhr);
		    }
		  };

		  /**
		   * Send the XHR request wrapped in a try/catch.
		   * @param  {Object} xhr XHR to send.
		   */
		  var safeXhrSend = function(xhr) {
		    try {
		      xhr.send();
		    } catch (e) {
		      xhr.onerror();
		    }
		  };

		  /**
		   * Decode audio data from an array buffer.
		   * @param  {ArrayBuffer} arraybuffer The audio data.
		   * @param  {Howl}        self
		   */
		  var decodeAudioData = function(arraybuffer, self) {
		    // Fire a load error if something broke.
		    var error = function() {
		      self._emit('loaderror', null, 'Decoding audio data failed.');
		    };

		    // Load the sound on success.
		    var success = function(buffer) {
		      if (buffer && self._sounds.length > 0) {
		        cache[self._src] = buffer;
		        loadSound(self, buffer);
		      } else {
		        error();
		      }
		    };

		    // Decode the buffer into an audio source.
		    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {
		      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
		    } else {
		      Howler.ctx.decodeAudioData(arraybuffer, success, error);
		    }
		  };

		  /**
		   * Sound is now loaded, so finish setting everything up and fire the loaded event.
		   * @param  {Howl} self
		   * @param  {Object} buffer The decoded buffer sound source.
		   */
		  var loadSound = function(self, buffer) {
		    // Set the duration.
		    if (buffer && !self._duration) {
		      self._duration = buffer.duration;
		    }

		    // Setup a sprite if none is defined.
		    if (Object.keys(self._sprite).length === 0) {
		      self._sprite = {__default: [0, self._duration * 1000]};
		    }

		    // Fire the loaded event.
		    if (self._state !== 'loaded') {
		      self._state = 'loaded';
		      self._emit('load');
		      self._loadQueue();
		    }
		  };

		  /**
		   * Setup the audio context when available, or switch to HTML5 Audio mode.
		   */
		  var setupAudioContext = function() {
		    // If we have already detected that Web Audio isn't supported, don't run this step again.
		    if (!Howler.usingWebAudio) {
		      return;
		    }

		    // Check if we are using Web Audio and setup the AudioContext if we are.
		    try {
		      if (typeof AudioContext !== 'undefined') {
		        Howler.ctx = new AudioContext();
		      } else if (typeof webkitAudioContext !== 'undefined') {
		        Howler.ctx = new webkitAudioContext();
		      } else {
		        Howler.usingWebAudio = false;
		      }
		    } catch(e) {
		      Howler.usingWebAudio = false;
		    }

		    // If the audio context creation still failed, set using web audio to false.
		    if (!Howler.ctx) {
		      Howler.usingWebAudio = false;
		    }

		    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
		    // If it is, disable Web Audio as it causes crashing.
		    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
		    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
		    var version = appVersion ? parseInt(appVersion[1], 10) : null;
		    if (iOS && version && version < 9) {
		      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
		      if (Howler._navigator && !safari) {
		        Howler.usingWebAudio = false;
		      }
		    }

		    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
		    if (Howler.usingWebAudio) {
		      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
		      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);
		      Howler.masterGain.connect(Howler.ctx.destination);
		    }

		    // Re-run the setup on Howler.
		    Howler._setup();
		  };

		  // Add support for CommonJS libraries such as browserify.
		  {
		    exports.Howler = Howler;
		    exports.Howl = Howl;
		  }

		  // Add to global in Node.js (for testing, etc).
		  if (typeof commonjsGlobal !== 'undefined') {
		    commonjsGlobal.HowlerGlobal = HowlerGlobal;
		    commonjsGlobal.Howler = Howler;
		    commonjsGlobal.Howl = Howl;
		    commonjsGlobal.Sound = Sound;
		  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.
		    window.HowlerGlobal = HowlerGlobal;
		    window.Howler = Howler;
		    window.Howl = Howl;
		    window.Sound = Sound;
		  }
		})();


		/*!
		 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
		 *  
		 *  howler.js v2.2.3
		 *  howlerjs.com
		 *
		 *  (c) 2013-2020, James Simpson of GoldFire Studios
		 *  goldfirestudios.com
		 *
		 *  MIT License
		 */

		(function() {

		  // Setup default properties.
		  HowlerGlobal.prototype._pos = [0, 0, 0];
		  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

		  /** Global Methods **/
		  /***************************************************************************/

		  /**
		   * Helper method to update the stereo panning position of all current Howls.
		   * Future Howls will not use this value unless explicitly set.
		   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
		   * @return {Howler/Number}     Self or current stereo panning value.
		   */
		  HowlerGlobal.prototype.stereo = function(pan) {
		    var self = this;

		    // Stop right here if not using Web Audio.
		    if (!self.ctx || !self.ctx.listener) {
		      return self;
		    }

		    // Loop through all Howls and update their stereo panning.
		    for (var i=self._howls.length-1; i>=0; i--) {
		      self._howls[i].stereo(pan);
		    }

		    return self;
		  };

		  /**
		   * Get/set the position of the listener in 3D cartesian space. Sounds using
		   * 3D position will be relative to the listener's position.
		   * @param  {Number} x The x-position of the listener.
		   * @param  {Number} y The y-position of the listener.
		   * @param  {Number} z The z-position of the listener.
		   * @return {Howler/Array}   Self or current listener position.
		   */
		  HowlerGlobal.prototype.pos = function(x, y, z) {
		    var self = this;

		    // Stop right here if not using Web Audio.
		    if (!self.ctx || !self.ctx.listener) {
		      return self;
		    }

		    // Set the defaults for optional 'y' & 'z'.
		    y = (typeof y !== 'number') ? self._pos[1] : y;
		    z = (typeof z !== 'number') ? self._pos[2] : z;

		    if (typeof x === 'number') {
		      self._pos = [x, y, z];

		      if (typeof self.ctx.listener.positionX !== 'undefined') {
		        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
		        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
		        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
		      } else {
		        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
		      }
		    } else {
		      return self._pos;
		    }

		    return self;
		  };

		  /**
		   * Get/set the direction the listener is pointing in the 3D cartesian space.
		   * A front and up vector must be provided. The front is the direction the
		   * face of the listener is pointing, and up is the direction the top of the
		   * listener is pointing. Thus, these values are expected to be at right angles
		   * from each other.
		   * @param  {Number} x   The x-orientation of the listener.
		   * @param  {Number} y   The y-orientation of the listener.
		   * @param  {Number} z   The z-orientation of the listener.
		   * @param  {Number} xUp The x-orientation of the top of the listener.
		   * @param  {Number} yUp The y-orientation of the top of the listener.
		   * @param  {Number} zUp The z-orientation of the top of the listener.
		   * @return {Howler/Array}     Returns self or the current orientation vectors.
		   */
		  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
		    var self = this;

		    // Stop right here if not using Web Audio.
		    if (!self.ctx || !self.ctx.listener) {
		      return self;
		    }

		    // Set the defaults for optional 'y' & 'z'.
		    var or = self._orientation;
		    y = (typeof y !== 'number') ? or[1] : y;
		    z = (typeof z !== 'number') ? or[2] : z;
		    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
		    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
		    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

		    if (typeof x === 'number') {
		      self._orientation = [x, y, z, xUp, yUp, zUp];

		      if (typeof self.ctx.listener.forwardX !== 'undefined') {
		        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
		        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
		        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
		        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);
		        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);
		        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);
		      } else {
		        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
		      }
		    } else {
		      return or;
		    }

		    return self;
		  };

		  /** Group Methods **/
		  /***************************************************************************/

		  /**
		   * Add new properties to the core init.
		   * @param  {Function} _super Core init method.
		   * @return {Howl}
		   */
		  Howl.prototype.init = (function(_super) {
		    return function(o) {
		      var self = this;

		      // Setup user-defined default properties.
		      self._orientation = o.orientation || [1, 0, 0];
		      self._stereo = o.stereo || null;
		      self._pos = o.pos || null;
		      self._pannerAttr = {
		        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
		        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
		        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
		        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
		        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
		        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
		        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
		        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
		      };

		      // Setup event listeners.
		      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
		      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
		      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

		      // Complete initilization with howler.js core's init function.
		      return _super.call(this, o);
		    };
		  })(Howl.prototype.init);

		  /**
		   * Get/set the stereo panning of the audio source for this sound or all in the group.
		   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
		   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
		   * @return {Howl/Number}    Returns self or the current stereo panning value.
		   */
		  Howl.prototype.stereo = function(pan, id) {
		    var self = this;

		    // Stop right here if not using Web Audio.
		    if (!self._webAudio) {
		      return self;
		    }

		    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
		    if (self._state !== 'loaded') {
		      self._queue.push({
		        event: 'stereo',
		        action: function() {
		          self.stereo(pan, id);
		        }
		      });

		      return self;
		    }

		    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
		    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

		    // Setup the group's stereo panning if no ID is passed.
		    if (typeof id === 'undefined') {
		      // Return the group's stereo panning if no parameters are passed.
		      if (typeof pan === 'number') {
		        self._stereo = pan;
		        self._pos = [pan, 0, 0];
		      } else {
		        return self._stereo;
		      }
		    }

		    // Change the streo panning of one or all sounds in group.
		    var ids = self._getSoundIds(id);
		    for (var i=0; i<ids.length; i++) {
		      // Get the sound.
		      var sound = self._soundById(ids[i]);

		      if (sound) {
		        if (typeof pan === 'number') {
		          sound._stereo = pan;
		          sound._pos = [pan, 0, 0];

		          if (sound._node) {
		            // If we are falling back, make sure the panningModel is equalpower.
		            sound._pannerAttr.panningModel = 'equalpower';

		            // Check if there is a panner setup and create a new one if not.
		            if (!sound._panner || !sound._panner.pan) {
		              setupPanner(sound, pannerType);
		            }

		            if (pannerType === 'spatial') {
		              if (typeof sound._panner.positionX !== 'undefined') {
		                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
		                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
		                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
		              } else {
		                sound._panner.setPosition(pan, 0, 0);
		              }
		            } else {
		              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
		            }
		          }

		          self._emit('stereo', sound._id);
		        } else {
		          return sound._stereo;
		        }
		      }
		    }

		    return self;
		  };

		  /**
		   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
		   * @param  {Number} x  The x-position of the audio source.
		   * @param  {Number} y  The y-position of the audio source.
		   * @param  {Number} z  The z-position of the audio source.
		   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
		   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
		   */
		  Howl.prototype.pos = function(x, y, z, id) {
		    var self = this;

		    // Stop right here if not using Web Audio.
		    if (!self._webAudio) {
		      return self;
		    }

		    // If the sound hasn't loaded, add it to the load queue to change position when capable.
		    if (self._state !== 'loaded') {
		      self._queue.push({
		        event: 'pos',
		        action: function() {
		          self.pos(x, y, z, id);
		        }
		      });

		      return self;
		    }

		    // Set the defaults for optional 'y' & 'z'.
		    y = (typeof y !== 'number') ? 0 : y;
		    z = (typeof z !== 'number') ? -0.5 : z;

		    // Setup the group's spatial position if no ID is passed.
		    if (typeof id === 'undefined') {
		      // Return the group's spatial position if no parameters are passed.
		      if (typeof x === 'number') {
		        self._pos = [x, y, z];
		      } else {
		        return self._pos;
		      }
		    }

		    // Change the spatial position of one or all sounds in group.
		    var ids = self._getSoundIds(id);
		    for (var i=0; i<ids.length; i++) {
		      // Get the sound.
		      var sound = self._soundById(ids[i]);

		      if (sound) {
		        if (typeof x === 'number') {
		          sound._pos = [x, y, z];

		          if (sound._node) {
		            // Check if there is a panner setup and create a new one if not.
		            if (!sound._panner || sound._panner.pan) {
		              setupPanner(sound, 'spatial');
		            }

		            if (typeof sound._panner.positionX !== 'undefined') {
		              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
		              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
		              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
		            } else {
		              sound._panner.setPosition(x, y, z);
		            }
		          }

		          self._emit('pos', sound._id);
		        } else {
		          return sound._pos;
		        }
		      }
		    }

		    return self;
		  };

		  /**
		   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
		   * space. Depending on how direction the sound is, based on the `cone` attributes,
		   * a sound pointing away from the listener can be quiet or silent.
		   * @param  {Number} x  The x-orientation of the source.
		   * @param  {Number} y  The y-orientation of the source.
		   * @param  {Number} z  The z-orientation of the source.
		   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
		   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
		   */
		  Howl.prototype.orientation = function(x, y, z, id) {
		    var self = this;

		    // Stop right here if not using Web Audio.
		    if (!self._webAudio) {
		      return self;
		    }

		    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
		    if (self._state !== 'loaded') {
		      self._queue.push({
		        event: 'orientation',
		        action: function() {
		          self.orientation(x, y, z, id);
		        }
		      });

		      return self;
		    }

		    // Set the defaults for optional 'y' & 'z'.
		    y = (typeof y !== 'number') ? self._orientation[1] : y;
		    z = (typeof z !== 'number') ? self._orientation[2] : z;

		    // Setup the group's spatial orientation if no ID is passed.
		    if (typeof id === 'undefined') {
		      // Return the group's spatial orientation if no parameters are passed.
		      if (typeof x === 'number') {
		        self._orientation = [x, y, z];
		      } else {
		        return self._orientation;
		      }
		    }

		    // Change the spatial orientation of one or all sounds in group.
		    var ids = self._getSoundIds(id);
		    for (var i=0; i<ids.length; i++) {
		      // Get the sound.
		      var sound = self._soundById(ids[i]);

		      if (sound) {
		        if (typeof x === 'number') {
		          sound._orientation = [x, y, z];

		          if (sound._node) {
		            // Check if there is a panner setup and create a new one if not.
		            if (!sound._panner) {
		              // Make sure we have a position to setup the node with.
		              if (!sound._pos) {
		                sound._pos = self._pos || [0, 0, -0.5];
		              }

		              setupPanner(sound, 'spatial');
		            }

		            if (typeof sound._panner.orientationX !== 'undefined') {
		              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
		              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
		              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
		            } else {
		              sound._panner.setOrientation(x, y, z);
		            }
		          }

		          self._emit('orientation', sound._id);
		        } else {
		          return sound._orientation;
		        }
		      }
		    }

		    return self;
		  };

		  /**
		   * Get/set the panner node's attributes for a sound or group of sounds.
		   * This method can optionall take 0, 1 or 2 arguments.
		   *   pannerAttr() -> Returns the group's values.
		   *   pannerAttr(id) -> Returns the sound id's values.
		   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
		   *   pannerAttr(o, id) -> Set's the values of passed sound id.
		   *
		   *   Attributes:
		   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
		   *                      inside of which there will be no volume reduction.
		   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
		   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
		   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
		   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
		   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
		   *                     listener. Can be `linear`, `inverse` or `exponential.
		   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
		   *                   will not be reduced any further.
		   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
		   *                   This is simply a variable of the distance model and has a different effect depending on which model
		   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
		   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
		   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
		   *                     with `inverse` and `exponential`.
		   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
		   *                     Can be `HRTF` or `equalpower`.
		   *
		   * @return {Howl/Object} Returns self or current panner attributes.
		   */
		  Howl.prototype.pannerAttr = function() {
		    var self = this;
		    var args = arguments;
		    var o, id, sound;

		    // Stop right here if not using Web Audio.
		    if (!self._webAudio) {
		      return self;
		    }

		    // Determine the values based on arguments.
		    if (args.length === 0) {
		      // Return the group's panner attribute values.
		      return self._pannerAttr;
		    } else if (args.length === 1) {
		      if (typeof args[0] === 'object') {
		        o = args[0];

		        // Set the grou's panner attribute values.
		        if (typeof id === 'undefined') {
		          if (!o.pannerAttr) {
		            o.pannerAttr = {
		              coneInnerAngle: o.coneInnerAngle,
		              coneOuterAngle: o.coneOuterAngle,
		              coneOuterGain: o.coneOuterGain,
		              distanceModel: o.distanceModel,
		              maxDistance: o.maxDistance,
		              refDistance: o.refDistance,
		              rolloffFactor: o.rolloffFactor,
		              panningModel: o.panningModel
		            };
		          }

		          self._pannerAttr = {
		            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
		            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
		            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
		            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
		            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
		            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
		            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
		            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
		          };
		        }
		      } else {
		        // Return this sound's panner attribute values.
		        sound = self._soundById(parseInt(args[0], 10));
		        return sound ? sound._pannerAttr : self._pannerAttr;
		      }
		    } else if (args.length === 2) {
		      o = args[0];
		      id = parseInt(args[1], 10);
		    }

		    // Update the values of the specified sounds.
		    var ids = self._getSoundIds(id);
		    for (var i=0; i<ids.length; i++) {
		      sound = self._soundById(ids[i]);

		      if (sound) {
		        // Merge the new values into the sound.
		        var pa = sound._pannerAttr;
		        pa = {
		          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
		          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
		          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
		          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
		          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
		          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
		          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
		          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
		        };

		        // Update the panner values or create a new panner if none exists.
		        var panner = sound._panner;
		        if (panner) {
		          panner.coneInnerAngle = pa.coneInnerAngle;
		          panner.coneOuterAngle = pa.coneOuterAngle;
		          panner.coneOuterGain = pa.coneOuterGain;
		          panner.distanceModel = pa.distanceModel;
		          panner.maxDistance = pa.maxDistance;
		          panner.refDistance = pa.refDistance;
		          panner.rolloffFactor = pa.rolloffFactor;
		          panner.panningModel = pa.panningModel;
		        } else {
		          // Make sure we have a position to setup the node with.
		          if (!sound._pos) {
		            sound._pos = self._pos || [0, 0, -0.5];
		          }

		          // Create a new panner node.
		          setupPanner(sound, 'spatial');
		        }
		      }
		    }

		    return self;
		  };

		  /** Single Sound Methods **/
		  /***************************************************************************/

		  /**
		   * Add new properties to the core Sound init.
		   * @param  {Function} _super Core Sound init method.
		   * @return {Sound}
		   */
		  Sound.prototype.init = (function(_super) {
		    return function() {
		      var self = this;
		      var parent = self._parent;

		      // Setup user-defined default properties.
		      self._orientation = parent._orientation;
		      self._stereo = parent._stereo;
		      self._pos = parent._pos;
		      self._pannerAttr = parent._pannerAttr;

		      // Complete initilization with howler.js core Sound's init function.
		      _super.call(this);

		      // If a stereo or position was specified, set it up.
		      if (self._stereo) {
		        parent.stereo(self._stereo);
		      } else if (self._pos) {
		        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
		      }
		    };
		  })(Sound.prototype.init);

		  /**
		   * Override the Sound.reset method to clean up properties from the spatial plugin.
		   * @param  {Function} _super Sound reset method.
		   * @return {Sound}
		   */
		  Sound.prototype.reset = (function(_super) {
		    return function() {
		      var self = this;
		      var parent = self._parent;

		      // Reset all spatial plugin properties on this sound.
		      self._orientation = parent._orientation;
		      self._stereo = parent._stereo;
		      self._pos = parent._pos;
		      self._pannerAttr = parent._pannerAttr;

		      // If a stereo or position was specified, set it up.
		      if (self._stereo) {
		        parent.stereo(self._stereo);
		      } else if (self._pos) {
		        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
		      } else if (self._panner) {
		        // Disconnect the panner.
		        self._panner.disconnect(0);
		        self._panner = undefined;
		        parent._refreshBuffer(self);
		      }

		      // Complete resetting of the sound.
		      return _super.call(this);
		    };
		  })(Sound.prototype.reset);

		  /** Helper Methods **/
		  /***************************************************************************/

		  /**
		   * Create a new panner node and save it on the sound.
		   * @param  {Sound} sound Specific sound to setup panning on.
		   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
		   */
		  var setupPanner = function(sound, type) {
		    type = type || 'spatial';

		    // Create the new panner node.
		    if (type === 'spatial') {
		      sound._panner = Howler.ctx.createPanner();
		      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
		      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
		      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
		      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
		      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
		      sound._panner.refDistance = sound._pannerAttr.refDistance;
		      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
		      sound._panner.panningModel = sound._pannerAttr.panningModel;

		      if (typeof sound._panner.positionX !== 'undefined') {
		        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
		        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
		        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
		      } else {
		        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
		      }

		      if (typeof sound._panner.orientationX !== 'undefined') {
		        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
		        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
		        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
		      } else {
		        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
		      }
		    } else {
		      sound._panner = Howler.ctx.createStereoPanner();
		      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
		    }

		    sound._panner.connect(sound._node);

		    // Update the connections.
		    if (!sound._paused) {
		      sound._parent.pause(sound._id, true).play(sound._id, true);
		    }
		  };
		})(); 
	} (howler));
	return howler;
}

var howlerExports = requireHowler();

var now_1;
var hasRequiredNow;

function requireNow () {
	if (hasRequiredNow) return now_1;
	hasRequiredNow = 1;
	var root = require_root();

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	now_1 = now;
	return now_1;
}

/** Used to match a single whitespace character. */

var _trimmedEndIndex;
var hasRequired_trimmedEndIndex;

function require_trimmedEndIndex () {
	if (hasRequired_trimmedEndIndex) return _trimmedEndIndex;
	hasRequired_trimmedEndIndex = 1;
	var reWhitespace = /\s/;

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the last non-whitespace character.
	 */
	function trimmedEndIndex(string) {
	  var index = string.length;

	  while (index-- && reWhitespace.test(string.charAt(index))) {}
	  return index;
	}

	_trimmedEndIndex = trimmedEndIndex;
	return _trimmedEndIndex;
}

var _baseTrim;
var hasRequired_baseTrim;

function require_baseTrim () {
	if (hasRequired_baseTrim) return _baseTrim;
	hasRequired_baseTrim = 1;
	var trimmedEndIndex = require_trimmedEndIndex();

	/** Used to match leading whitespace. */
	var reTrimStart = /^\s+/;

	/**
	 * The base implementation of `_.trim`.
	 *
	 * @private
	 * @param {string} string The string to trim.
	 * @returns {string} Returns the trimmed string.
	 */
	function baseTrim(string) {
	  return string
	    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	    : string;
	}

	_baseTrim = baseTrim;
	return _baseTrim;
}

var isSymbol_1;
var hasRequiredIsSymbol;

function requireIsSymbol () {
	if (hasRequiredIsSymbol) return isSymbol_1;
	hasRequiredIsSymbol = 1;
	var baseGetTag = require_baseGetTag(),
	    isObjectLike = requireIsObjectLike();

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	isSymbol_1 = isSymbol;
	return isSymbol_1;
}

var toNumber_1;
var hasRequiredToNumber;

function requireToNumber () {
	if (hasRequiredToNumber) return toNumber_1;
	hasRequiredToNumber = 1;
	var baseTrim = require_baseTrim(),
	    isObject = requireIsObject(),
	    isSymbol = requireIsSymbol();

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = baseTrim(value);
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	toNumber_1 = toNumber;
	return toNumber_1;
}

var debounce_1;
var hasRequiredDebounce;

function requireDebounce () {
	if (hasRequiredDebounce) return debounce_1;
	hasRequiredDebounce = 1;
	var isObject = requireIsObject(),
	    now = requireNow(),
	    toNumber = requireToNumber();

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	debounce_1 = debounce;
	return debounce_1;
}

var throttle_1;
var hasRequiredThrottle;

function requireThrottle () {
	if (hasRequiredThrottle) return throttle_1;
	hasRequiredThrottle = 1;
	var debounce = requireDebounce(),
	    isObject = requireIsObject();

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}

	throttle_1 = throttle;
	return throttle_1;
}

var throttleExports = requireThrottle();
var throttle = /*@__PURE__*/getDefaultExportFromCjs(throttleExports);

const PUBLIC_DEV_DISABLE_CURSOR_POSITIONS = "false";
function useMachine(machine2, ...[options = {}]) {
  const { guards, actions, actors, delays, ...interpreterOptions } = options;
  const machineConfig = {
    guards,
    actions,
    actors,
    delays
  };
  const resolvedMachine = machine2.provide(machineConfig);
  const service = createActor(resolvedMachine, interpreterOptions).start();
  onDestroy(() => service.stop());
  let snapshot = service.getSnapshot();
  const state = readable(snapshot, (set) => {
    return service.subscribe((nextSnapshot) => {
      if (snapshot !== nextSnapshot) {
        snapshot = nextSnapshot;
        set(snapshot);
      }
    }).unsubscribe;
  });
  return { state, send: service.send, service };
}
const machine = createMachine({
  id: "gameClient",
  context: ({ input }) => input,
  types: {
    // typegen: {} as import('./machine.typegen').Typegen0,
    context: {},
    events: {}
  },
  initial: "Lobby",
  states: {
    Lobby: {
      initial: "Assigning sides",
      states: {
        "Assigning sides": {
          description: "This is the first step of the game setup, where users can join and are assigned to be either attacker or defender.\n\nUsers can also be made administrators.",
          initial: "Incomplete",
          states: {
            Incomplete: {
              always: {
                target: "Ready",
                guard: "allSidesAssigned",
                description: "All users have been assigned a side and there is an admin on both sides",
                reenter: false
              }
            },
            Ready: {
              on: {
                "next step": {
                  target: "Ready",
                  guard: "isAdmin",
                  actions: {
                    type: "forwardToServer"
                  },
                  reenter: false
                }
              }
            }
          },
          always: {
            target: "Assigning roles",
            guard: "finishedAssigningSides"
          },
          on: {
            "assign side": {
              target: "Assigning sides",
              guard: "isAdmin",
              actions: {
                type: "forwardToServer"
              },
              reenter: false
            }
          }
        },
        "Assigning roles": {
          description: "All users have been assigned a side, and now the roles will be configured.",
          initial: "Incomplete",
          states: {
            Incomplete: {
              always: [
                {
                  target: "Ready",
                  guard: "allRolesAssignedOfSide",
                  description: "All users have been assigned a role."
                },
                {
                  target: "Editing player",
                  guard: "isEditingPlayerOfSide"
                }
              ]
            },
            Ready: {
              always: {
                target: "Editing player",
                guard: "isEditingPlayerOfSide"
              },
              on: {
                "next step": {
                  target: "Ready",
                  guard: "isAdmin",
                  actions: {
                    type: "forwardToServer"
                  },
                  reenter: false
                }
              }
            },
            "Editing player": {
              description: "Shows a modal where the admin can select the user, role and face image",
              always: {
                target: "Incomplete",
                guard: "isNotEditingPlayerOfSide"
              },
              on: {
                "assign role": {
                  target: "Editing player",
                  guard: "isAdmin",
                  actions: {
                    type: "forwardToServer"
                  },
                  reenter: false
                }
              }
            }
          },
          always: {
            target: "Waiting for other side",
            guard: "finishedAssigningRolesOfSide"
          },
          on: {
            "start editing player": {
              target: "Assigning roles",
              guard: "isAdmin",
              actions: {
                type: "forwardToServer"
              },
              reenter: false
            },
            "stop editing player": {
              target: "Assigning roles",
              guard: "isAdmin",
              actions: {
                type: "forwardToServer"
              },
              reenter: false
            }
          }
        },
        "Waiting for other side": {}
      },
      always: {
        target: "Playing",
        guard: "finishedAssigningRoles"
      }
    },
    Playing: {
      states: {
        Gameloop: {
          initial: "Waiting",
          states: {
            Waiting: {
              always: {
                target: "Playing",
                guard: "userOnActiveSide"
              }
            },
            Playing: {
              initial: "Initial",
              states: {
                Initial: {
                  always: [
                    {
                      target: "Placing",
                      guard: "requiresPlacement"
                    },
                    {
                      target: "Reacting",
                      guard: "requiresReaction"
                    },
                    {
                      target: "Moving"
                    }
                  ]
                },
                Placing: {
                  description: "The user sees all possible starting positions",
                  always: {
                    target: "Moving",
                    guard: "requiresMove"
                  },
                  on: {
                    "apply game event": {
                      target: "Placing",
                      guard: "userControlsPlayer isPlacementEvent",
                      actions: {
                        type: "forwardToServer"
                      },
                      reenter: false
                    }
                  }
                },
                Reacting: {
                  description: "The defender asked something, and the attacker needs to respond.",
                  always: {
                    target: "Moving",
                    guard: "requiresMove"
                  }
                },
                Moving: {
                  description: "The board displays possible squares to move to",
                  always: {
                    target: "Action",
                    guard: "requiresAction"
                  },
                  on: {
                    "apply game event": {
                      target: "Moving",
                      guard: "userControlsPlayer isMoveEvent",
                      actions: {
                        type: "forwardToServer"
                      },
                      reenter: false
                    }
                  }
                },
                Action: {
                  description: "The user gets presented with a list of possible actions to perform",
                  always: {
                    target: "Moving",
                    guard: "requiresMove"
                  },
                  on: {
                    "apply game event": {
                      target: "Action",
                      guard: "userControlsPlayer isActionEvent",
                      actions: {
                        type: "forwardToServer"
                      },
                      reenter: false
                    },
                    "cancel game event": {
                      target: "Action",
                      guard: "userControlsPlayer lastEventIsAction lastEventNotFinalized",
                      actions: {
                        type: "forwardToServer"
                      },
                      reenter: false
                    }
                  }
                }
              },
              always: {
                target: "Waiting",
                guard: "userNotOnActiveSide"
              }
            }
          },
          on: {
            "rollback game event": {
              target: "Gameloop",
              guard: "isAdmin",
              actions: {
                type: "forwardToServer"
              },
              reenter: false
            },
            "switch sides": {
              target: "Gameloop",
              guard: "isAdmin",
              actions: {
                type: "forwardToServer"
              },
              reenter: false
            },
            "apply game event": {
              target: "Gameloop",
              guard: "isValidGameEvent",
              actions: {
                type: "forwardToServer"
              },
              reenter: false
            }
          }
        },
        "Global Attack": {
          initial: "Showing current global attack",
          states: {
            "Showing current global attack": {
              on: {
                "dismiss global attack": {
                  target: "Dismissed"
                }
              }
            },
            Dismissed: {
              on: {
                "new global attack": {
                  target: "Showing current global attack"
                },
                "show global attack": {
                  target: "Showing current global attack"
                }
              }
            }
          }
        }
      },
      always: {
        target: "Finished",
        guard: "gameFinished"
      },
      type: "parallel"
    },
    Finished: {
      description: "The game finished, but the users can still communicate by sending emojis."
    },
    "Server stopped": {
      type: "final"
    }
  },
  always: {
    target: ".Server stopped",
    guard: "isServerStopped",
    reenter: false
  },
  on: {
    "shared game context update": {
      target: "#gameClient",
      actions: {
        type: "updateSharedGameContext"
      },
      reenter: false
    },
    "send emoji": {
      target: "#gameClient",
      actions: {
        type: "forwardToServer"
      },
      reenter: false
    },
    "show emoji": {
      target: "#gameClient",
      actions: {
        type: "showEmoji"
      },
      reenter: false
    }
  }
});
const getClientGameMachine = ({
  send,
  actions
}) => machine.provide({
  actions: {
    updateSharedGameContext: assign(({ event: e }) => {
      const event = e;
      return {
        ...event.sharedGameContext
      };
    }),
    showEmoji: ({ event: e }) => {
      const event = e;
      actions.showEmoji({ userId: event.userId, emoji: event.emoji });
    },
    forwardToServer: ({ event: e }) => {
      const event = e;
      send({ ...event, type: `user: ${event.type}` });
    }
  },
  actors: {},
  guards: {
    isHost: ({ context }) => context.hostUserId === context.userId,
    isAdmin: ({ context }) => !!context.users.find((user) => user.id === context.userId && user.isAdmin),
    isPlayer: ({ context }) => context.hostUserId !== context.userId,
    allRolesAssignedOfSide: ({ context }) => {
      const { side } = getCurrentUser(context);
      if (!side)
        return false;
      if (side === "attack") {
        return context.attack.attacker.isConfigured;
      } else {
        return context.defense.defenders.filter((defender) => defender.isConfigured).length === 4;
      }
    },
    finishedAssigningRolesOfSide: ({ context }) => {
      const { side } = getCurrentUser(context);
      if (!side)
        return false;
      return (side === "attack" ? context.attack : context.defense).finishedAssigning;
    },
    isEditingPlayerOfSide: ({ context }) => {
      const { side } = getCurrentUser(context);
      if (!side)
        return false;
      const editingPlayer = (side === "attack" ? context.attack : context.defense).editingPlayerId;
      return editingPlayer !== void 0;
    },
    isNotEditingPlayerOfSide: not("isEditingPlayerOfSide"),
    userControlsPlayer: ({ context }) => {
      const user = getCurrentUser(context);
      return user.isAdmin || user.id === GameState.fromContext(context).activePlayer.userId;
    },
    isMoveEvent: ({ event: e }) => {
      const event = e;
      return event.gameEvent.type === "move";
    },
    isActionEvent: ({ event: e }) => {
      const event = e;
      return event.gameEvent.type === "action";
    },
    isPlacementEvent: ({ event: e }) => {
      const event = e;
      return event.gameEvent.type === "placement";
    },
    lastEventIsAction: ({ context }) => {
      const gameState = GameState.fromContext(context);
      return !!gameState.lastEvent && gameState.lastEvent.type === "action";
    },
    lastEventNotFinalized: ({ context }) => {
      const gameState = GameState.fromContext(context);
      return !!gameState.lastEvent && !gameState.lastEvent.finalized;
    },
    isValidGameEvent: ({ context }) => {
      return userIsAdmin(context.userId, context);
    },
    "userControlsPlayer isMoveEvent": and(["userControlsPlayer", "isMoveEvent"]),
    "userControlsPlayer isActionEvent": and(["userControlsPlayer", "isActionEvent"]),
    "userControlsPlayer lastEventIsAction lastEventNotFinalized": and([
      "userControlsPlayer",
      "lastEventIsAction",
      "lastEventNotFinalized"
    ]),
    "userControlsPlayer isPlacementEvent": and(["userControlsPlayer", "isPlacementEvent"]),
    userOnActiveSide: ({ context }) => getCurrentUser(context).side === GameState.fromContext(context).activeSide,
    userNotOnActiveSide: not("userOnActiveSide"),
    requiresPlacement: ({ context }) => GameState.fromContext(context).nextEventType === "placement",
    requiresAction: ({ context }) => GameState.fromContext(context).nextEventType === "action",
    requiresMove: ({ context }) => GameState.fromContext(context).nextEventType === "move",
    requiresReaction: ({ context }) => GameState.fromContext(context).nextEventType === "reaction",
    userIsDefender: () => false,
    isServerStopped: () => false,
    ...sharedGuards
  }
});
const createWebSocketConnection = ({
  gameId,
  userId,
  onMessage,
  debug
}) => {
  const webSocketConnection = writable({ status: "opening", log: [] });
  const logEvent = (message, consoleData) => {
    if (!debug)
      return;
    console.debug("[websocket]", message, consoleData);
    return webSocketConnection.update((connection) => ({
      ...connection,
      log: [...connection.log, `[websocket] ${message}`]
    }));
  };
  const updateStatus = (status) => webSocketConnection.update((connection) => ({ ...connection, status }));
  let ws;
  const open = () => {
    logEvent("connecting");
    const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
    ws = new WebSocket(
      `${protocol}//${window.location.host}/websocket?gameId=${gameId}&userId=${userId}`
    );
    ws.addEventListener("open", () => {
      updateStatus("opened");
      logEvent("connection open");
    });
    ws.addEventListener("close", () => {
      updateStatus("closed");
      logEvent("connection closed");
    });
    ws.addEventListener("message", (event) => {
      try {
        const message = JSON.parse(event.data);
        if (message.type !== "mouse position")
          logEvent(`message received: ${event.data}`, event);
        onMessage(message);
      } catch (error) {
        logEvent(`error parsing message`, error);
      }
    });
  };
  const send = (message) => {
    ws?.send(JSON.stringify(message));
  };
  return { subscribe: webSocketConnection.subscribe, open, close: () => ws?.close(), send };
};
const css$U = {
  code: ".cursor.svelte-vmcbeh.svelte-vmcbeh{height:1px;width:1px}.cursor.svelte-vmcbeh.svelte-vmcbeh,.cursor.svelte-vmcbeh svg.svelte-vmcbeh{left:0;position:absolute;top:0}.cursor.svelte-vmcbeh svg.svelte-vmcbeh{display:block;height:1.5rem!important;max-width:none;translate:-15% -20%;width:1.5rem!important}.cursor.svelte-vmcbeh .name.svelte-vmcbeh{background:rgba(0,0,0,.667);border-radius:var(--radius-sm);display:inline-block;font-size:var(--scale-000);left:1.5rem;max-width:7rem;overflow:hidden;padding:.25rem .5rem;position:absolute;text-overflow:ellipsis;top:.5rem;white-space:nowrap}",
  map: null
};
const Cursor = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { position } = $$props;
  let el;
  if ($$props.position === void 0 && $$bindings.position && position !== void 0)
    $$bindings.position(position);
  $$result.css.add(css$U);
  return `<div class="cursor svelte-vmcbeh"${add_attribute("this", el, 0)}><svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="white" stroke-linecap="round" stroke-linejoin="round" class="svelte-vmcbeh"><path d="M7.904 17.563a1.2 1.2 0 0 0 2.228 .308l2.09 -3.093l4.907 4.907a1.067 1.067 0 0 0 1.509 0l1.047 -1.047a1.067 1.067 0 0 0 0 -1.509l-4.907 -4.907l3.113 -2.09a1.2 1.2 0 0 0 -.309 -2.228l-13.582 -3.904l3.904 13.563z"></path></svg> <span class="name svelte-vmcbeh">${escape(position.name)}</span> </div>`;
});
const css$T = {
  code: ".cursor-overlays.svelte-1n4ax7h{bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:0;z-index:var(--layer-top)}",
  map: null
};
const CursorOverlays = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let userMousePositions;
  let $users, $$unsubscribe_users;
  let $user, $$unsubscribe_user;
  let { mousePositions = {} } = $$props;
  const { user, machine: machine2 } = getGameContext();
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  let gameWidth = 1;
  let gameHeight = 1;
  const users = useSelector(machine2.service, (state) => {
    const showAllUsers = state.matches("Lobby.Assigning sides") || state.matches("Finished");
    const allUsers = state.context.users.filter((user2) => user2.isConnected);
    return showAllUsers ? allUsers : allUsers.filter((otherUser) => otherUser.side === $user.side);
  });
  $$unsubscribe_users = subscribe(users, (value) => $users = value);
  const getMousePositions = (users2, mousePositions2) => {
    return users2.filter((user2) => user2.isConnected && !!mousePositions2[user2.id]).map((user2) => {
      const percentages = mousePositions2[user2.id];
      return {
        id: user2.id,
        name: user2.name,
        position: [percentages[0] * gameWidth, percentages[1] * gameHeight]
      };
    });
  };
  if ($$props.mousePositions === void 0 && $$bindings.mousePositions && mousePositions !== void 0)
    $$bindings.mousePositions(mousePositions);
  $$result.css.add(css$T);
  userMousePositions = getMousePositions($users, mousePositions);
  $$unsubscribe_users();
  $$unsubscribe_user();
  return `<div class="cursor-overlays svelte-1n4ax7h">${each(userMousePositions, (position) => {
    return `${validate_component(Cursor, "Cursor").$$render($$result, { position }, {}, {})}`;
  })} </div>`;
});
const css$S = {
  code: ".overlays-container.svelte-j0dcti.svelte-j0dcti{bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:0}.displayed-emoji.svelte-j0dcti.svelte-j0dcti{--_width:5rem;--_height:5rem;align-items:center;display:flex;flex-direction:column;font-size:4rem;height:5rem;height:var(--_height);justify-content:center;left:calc(var(--_x)*(100% - 5rem));left:calc(var(--_x)*(100% - var(--_width)));line-height:1.1;position:fixed;top:-5rem;top:calc(0px - var(--_height));width:5rem;width:var(--_width)}.displayed-emoji.svelte-j0dcti .name.svelte-j0dcti{background:#000;border-radius:var(--radius-sm);bottom:-1.75em;font-size:1rem;padding:0 .5rem;position:absolute}",
  map: null
};
const EmojiOverlays = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $users, $$unsubscribe_users;
  const context = getGameContext();
  const users = useSelector(context.machine.service, (state) => state.context.users);
  $$unsubscribe_users = subscribe(users, (value) => $users = value);
  let emojis = {};
  let i = 0;
  const showEmoji = ({ userId, emoji }) => {
    const name = $users.find((user) => user.id === userId)?.name ?? "Unknown";
    emojis[`${i++}`] = {
      emoji,
      userName: name,
      position: [Math.random(), Math.random()]
    };
    emojis = emojis;
    i++;
  };
  if ($$props.showEmoji === void 0 && $$bindings.showEmoji && showEmoji !== void 0)
    $$bindings.showEmoji(showEmoji);
  $$result.css.add(css$S);
  $$unsubscribe_users();
  return `<div class="overlays-container svelte-j0dcti">${each(Object.entries(emojis), ([i2, emoji]) => {
    return `<div class="displayed-emoji svelte-j0dcti"${add_styles({ "--_x": emoji.position[0] })}><span class="emjoi">${escape(emoji.emoji)}</span> <span class="name svelte-j0dcti">${escape(emoji.userName)}</span> </div>`;
  })} </div>`;
});
let toastsCounter = 0;
class Observer {
  subscribers;
  toasts;
  constructor() {
    this.subscribers = [];
    this.toasts = [];
  }
  // We use arrow functions to maintain the correct `this` reference
  subscribe = (subscriber) => {
    this.subscribers.push(subscriber);
    return () => {
      const index = this.subscribers.indexOf(subscriber);
      this.subscribers.splice(index, 1);
    };
  };
  publish = (data) => {
    this.subscribers.forEach((subscriber) => subscriber(data));
  };
  addToast = (data) => {
    this.publish(data);
    this.toasts = [...this.toasts, data];
  };
  create = (data) => {
    const { message, ...rest } = data;
    const id = typeof data?.id === "number" || data.id && data.id?.length > 0 ? data.id : toastsCounter++;
    const alreadyExists = this.toasts.find((toast) => {
      return toast.id === id;
    });
    if (alreadyExists) {
      this.toasts = this.toasts.map((toast) => {
        if (toast.id === id) {
          this.publish({ ...toast, ...data, id, title: message });
          return { ...toast, ...data, id, title: message };
        }
        return toast;
      });
    } else {
      this.addToast({ title: message, ...rest, id });
    }
    return id;
  };
  dismiss = (id) => {
    if (!id) {
      this.toasts.forEach((toast) => {
        this.subscribers.forEach((subscriber) => subscriber({ id: toast.id, dismiss: true }));
      });
    }
    this.subscribers.forEach((subscriber) => subscriber({ id, dismiss: true }));
    return id;
  };
  message = (message, data) => {
    return this.create({ ...data, message });
  };
  error = (message, data) => {
    return this.create({ ...data, message, type: "error" });
  };
  success = (message, data) => {
    return this.create({ ...data, type: "success", message });
  };
  info = (message, data) => {
    return this.create({ ...data, type: "info", message });
  };
  warning = (message, data) => {
    return this.create({ ...data, type: "warning", message });
  };
  loading = (message, data) => {
    return this.create({ ...data, type: "loading", message });
  };
  promise = (promise, data) => {
    const id = this.create({ ...data, promise, type: "loading", message: data?.loading });
    const p = typeof promise === "function" ? promise() : promise;
    if (data?.success) {
      p.then((promiseData) => {
        const message = typeof data?.success === "function" ? data.success(promiseData) : data?.success;
        this.create({ id, type: "success", message });
      });
    }
    if (data?.error) {
      p.catch((error) => {
        const message = typeof data?.error === "function" ? data.error(error) : data?.error;
        this.create({ id, type: "error", message });
      });
    }
    return id;
  };
  // We can't provide the toast we just created as a prop as we didn't creat it yet, so we can create a default toast object, I just don't know how to use function in argument when calling()?
  custom = (component, data) => {
    const id = data?.id || toastsCounter++;
    this.publish({ component, id, ...data });
  };
}
const ToastState = new Observer();
function toastFunction(message, data) {
  const id = data?.id || toastsCounter++;
  ToastState.addToast({
    title: message,
    ...data,
    id
  });
  return id;
}
const basicToast = toastFunction;
Object.assign(basicToast, {
  success: ToastState.success,
  info: ToastState.info,
  warning: ToastState.warning,
  error: ToastState.error,
  custom: ToastState.custom,
  message: ToastState.message,
  promise: ToastState.promise,
  dismiss: ToastState.dismiss,
  loading: ToastState.loading
});
const useEffect = (subscribe2) => ({ subscribe: subscribe2 });
const Loader = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { visible } = $$props;
  const bars = Array(12).fill(0);
  if ($$props.visible === void 0 && $$bindings.visible && visible !== void 0)
    $$bindings.visible(visible);
  return `<div class="sonner-loading-wrapper"${add_attribute("data-visible", visible, 0)}><div class="sonner-spinner">${each(bars, (_bar, i) => {
    return `<div class="sonner-loading-bar"></div>`;
  })}</div></div>`;
});
const Icon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { type = "success" } = $$props;
  if ($$props.type === void 0 && $$bindings.type && type !== void 0)
    $$bindings.type(type);
  return `${type === "success" ? `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path></svg>` : `${type === "error" ? `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>` : `${type === "info" ? `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd"></path></svg>` : `${type === "warning" ? `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>` : ``}`}`}`}`;
});
const TOAST_LIFETIME = 4e3;
const GAP$1 = 14;
const TIME_BEFORE_UNMOUNT = 200;
const Toast = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isFront;
  let isVisible;
  let toastType;
  let toastClass;
  let toastDescriptionClass;
  let heightIndex;
  let coords;
  let toastsHeightBefore;
  let disabled;
  let isPromiseLoadingOrInfiniteDuration;
  let $$unsubscribe_effect = noop, $$subscribe_effect = () => ($$unsubscribe_effect(), $$unsubscribe_effect = subscribe(effect, ($$value) => $$value), effect);
  let { toast } = $$props;
  let { toasts } = $$props;
  let { index } = $$props;
  let { expanded } = $$props;
  let { invert } = $$props;
  let { heights } = $$props;
  let { position } = $$props;
  let { visibleToasts } = $$props;
  let { expandByDefault } = $$props;
  let { closeButton } = $$props;
  let { interacting } = $$props;
  let { duration } = $$props;
  let { descriptionClass = "" } = $$props;
  let mounted = false;
  let removed = false;
  let swiping = false;
  let swipeOut = false;
  let offsetBeforeRemove = 0;
  let initialHeight = 0;
  let toastRef;
  let offset2 = 0;
  let closeTimerStartTimeRef = 0;
  let closeTimerRemainingTimeRef = toast.duration || duration || TOAST_LIFETIME;
  let lastCloseTimerStartTimeRef = 0;
  const dispatch = createEventDispatcher();
  const deleteToast = () => {
    removed = true;
    offsetBeforeRemove = offset2;
    dispatch("setHeights", heights.filter((height) => height.toastId !== toast.id));
    setTimeout(
      () => {
        dispatch("removeToast", toast);
      },
      TIME_BEFORE_UNMOUNT
    );
  };
  let timeoutId;
  const pauseTimer = () => {
    if (lastCloseTimerStartTimeRef < closeTimerStartTimeRef) {
      const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef;
      closeTimerRemainingTimeRef = closeTimerRemainingTimeRef - elapsedTime;
    }
    lastCloseTimerStartTimeRef = (/* @__PURE__ */ new Date()).getTime();
  };
  const startTimer = () => {
    closeTimerStartTimeRef = (/* @__PURE__ */ new Date()).getTime();
    timeoutId = setTimeout(
      () => {
        toast.onAutoClose?.(toast);
        deleteToast();
      },
      closeTimerRemainingTimeRef
    );
  };
  let effect;
  onDestroy(() => {
    dispatch("setHeights", heights.filter((height) => height.toastId !== toast.id));
  });
  if ($$props.toast === void 0 && $$bindings.toast && toast !== void 0)
    $$bindings.toast(toast);
  if ($$props.toasts === void 0 && $$bindings.toasts && toasts !== void 0)
    $$bindings.toasts(toasts);
  if ($$props.index === void 0 && $$bindings.index && index !== void 0)
    $$bindings.index(index);
  if ($$props.expanded === void 0 && $$bindings.expanded && expanded !== void 0)
    $$bindings.expanded(expanded);
  if ($$props.invert === void 0 && $$bindings.invert && invert !== void 0)
    $$bindings.invert(invert);
  if ($$props.heights === void 0 && $$bindings.heights && heights !== void 0)
    $$bindings.heights(heights);
  if ($$props.position === void 0 && $$bindings.position && position !== void 0)
    $$bindings.position(position);
  if ($$props.visibleToasts === void 0 && $$bindings.visibleToasts && visibleToasts !== void 0)
    $$bindings.visibleToasts(visibleToasts);
  if ($$props.expandByDefault === void 0 && $$bindings.expandByDefault && expandByDefault !== void 0)
    $$bindings.expandByDefault(expandByDefault);
  if ($$props.closeButton === void 0 && $$bindings.closeButton && closeButton !== void 0)
    $$bindings.closeButton(closeButton);
  if ($$props.interacting === void 0 && $$bindings.interacting && interacting !== void 0)
    $$bindings.interacting(interacting);
  if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0)
    $$bindings.duration(duration);
  if ($$props.descriptionClass === void 0 && $$bindings.descriptionClass && descriptionClass !== void 0)
    $$bindings.descriptionClass(descriptionClass);
  isFront = index === 0;
  isVisible = index + 1 <= visibleToasts;
  toastType = toast.type;
  toastClass = toast.class || "";
  toastDescriptionClass = toast.descriptionClass || "";
  heightIndex = heights.findIndex((height) => height.toastId === toast.id) || 0;
  coords = position.split("-");
  toastsHeightBefore = heights.reduce(
    (prev, curr, reducerIndex) => {
      if (reducerIndex >= heightIndex)
        return prev;
      return prev + curr.height;
    },
    0
  );
  invert = toast.invert || invert;
  disabled = toastType === "loading";
  {
    {
      offset2 = heightIndex * GAP$1 + toastsHeightBefore;
    }
  }
  isPromiseLoadingOrInfiniteDuration = toast.promise && toastType === "loading" || toast.duration === Number.POSITIVE_INFINITY;
  $$subscribe_effect(effect = useEffect(() => {
    if (!isPromiseLoadingOrInfiniteDuration) {
      if (expanded || interacting) {
        pauseTimer();
      } else {
        startTimer();
      }
    }
    return () => clearTimeout(timeoutId);
  }));
  {
    if (toast.delete) {
      deleteToast();
    }
  }
  $$unsubscribe_effect();
  return `<li${add_attribute("aria-live", toast.important ? "assertive" : "polite", 0)} aria-atomic="true" role="status"${add_attribute("tabindex", 0, 0)}${add_attribute("class", `${$$props.class} ${toastClass}`, 0)} data-sonner-toast=""${add_attribute("data-styled", !toast.component, 0)}${add_attribute("data-mounted", mounted, 0)}${add_attribute("data-promise", Boolean(toast.promise), 0)}${add_attribute("data-removed", removed, 0)}${add_attribute("data-visible", isVisible, 0)}${add_attribute("data-y-position", coords[0], 0)}${add_attribute("data-x-position", coords[1], 0)}${add_attribute("data-index", index, 0)}${add_attribute("data-front", isFront, 0)}${add_attribute("data-swiping", swiping, 0)}${add_attribute("data-type", toastType, 0)}${add_attribute("data-invert", invert, 0)}${add_attribute("data-swipe-out", swipeOut, 0)}${add_attribute("data-expanded", Boolean(expanded || expandByDefault && mounted), 0)}${add_styles(merge_ssr_styles(escape(`${$$props.style} ${toast.style}`, true), {
    "--index": index,
    "--toasts-before": index,
    "--z-index": toasts.length - index,
    "--offset": `${removed ? offsetBeforeRemove : offset2}px`,
    "--initial-height": expandByDefault ? "auto" : `${initialHeight}px`
  }))}${add_attribute("this", toastRef, 0)}>${closeButton && !toast.component ? `<button aria-label="Close toast"${add_attribute("data-disabled", disabled, 0)} data-close-button><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></button>` : ``} ${toast.component ? `${validate_component(toast.component || missing_component, "svelte:component").$$render($$result, {}, {}, {})}` : `${toast.title && typeof toast.title !== "string" ? `${validate_component(toast.title || missing_component, "svelte:component").$$render($$result, {}, {}, {})}` : `${toastType || toast.icon || toast.promise ? `<div data-icon="">${toast.promise || toastType === "loading" ? `${validate_component(Loader, "Loader").$$render($$result, { visible: toastType === "loading" }, {}, {})}` : ``} ${toast.icon ? `${validate_component(toast.icon || missing_component, "svelte:component").$$render($$result, {}, {}, {})}` : `${validate_component(Icon, "Icon").$$render($$result, { type: toastType }, {}, {})}`}</div>` : ``} <div data-content=""><div data-title="">${escape(toast.title)}</div> ${toast.description ? `<div data-description=""${add_attribute("class", descriptionClass + toastDescriptionClass, 0)}>${escape(toast.description)}</div>` : ``}</div> ${toast.cancel ? `<button data-button data-cancel>${escape(toast.cancel.label)}</button>` : ``} ${toast.action ? `<button data-button="">${escape(toast.action.label)}</button>` : ``}`}`}</li>`;
});
const css$R = {
  code: "[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial,\n      Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:6px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999}[data-sonner-toaster][data-x-position='right']{right:max(var(--offset), env(safe-area-inset-right))}[data-sonner-toaster][data-x-position='left']{left:max(var(--offset), env(safe-area-inset-left))}[data-sonner-toaster][data-x-position='center']{left:50%;transform:translateX(-50%)}[data-sonner-toaster][data-y-position='top']{top:max(var(--offset), env(safe-area-inset-top))}[data-sonner-toaster][data-y-position='bottom']{bottom:max(var(--offset), env(safe-area-inset-bottom))}[data-sonner-toast]{--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;will-change:transform, opacity, height;-webkit-transition:transform 400ms, opacity 400ms, height 400ms, box-shadow 200ms;-moz-transition:transform 400ms, opacity 400ms, height 400ms, box-shadow 200ms;transition:transform 400ms, opacity 400ms, height 400ms, box-shadow 200ms;box-sizing:border-box;outline:none}[data-sonner-toast][data-styled='true']{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0px 4px 12px rgba(0, 0, 0, 0.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0px 4px 12px rgba(0, 0, 0, 0.1), 0 0 0 2px rgba(0, 0, 0, 0.2)}[data-sonner-toast][data-y-position='top']{top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}[data-sonner-toast][data-y-position='bottom']{bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}[data-sonner-toast] [data-description]{font-weight:400;line-height:1.4;color:inherit}[data-sonner-toast] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:-3px;margin-right:4px}[data-sonner-toast][data-promise='true'] [data-icon]>svg{opacity:0;transform:scale(0.8);transform-origin:center;animation:sonner-fade-in 300ms ease forwards}[data-sonner-toast] [data-icon]>*{flex-shrink:0}[data-sonner-toast] [data-icon] svg{margin-left:-1px}[data-sonner-toast] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:auto;border:none;cursor:pointer;outline:none;transition:opacity 400ms, box-shadow 200ms}[data-sonner-toast] [data-button]:focus-visible{box-shadow:0 0 0 2px rgba(0, 0, 0, 0.4)}[data-sonner-toast] [data-button]:first-of-type{margin-left:auto}[data-sonner-toast] [data-cancel]{color:var(--color);background:var(--border-color)}[data-sonner-toast] [data-close-button]{position:absolute;left:0;top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;background:var(--gray1);color:var(--gray12);border:1px solid var(--gray4);transform:translate(-35%, -35%);border-radius:50%;opacity:0;cursor:pointer;z-index:1;transition:opacity 100ms, background 200ms, border-color 200ms}[data-sonner-toast] [data-close-button]:focus-visible{box-shadow:0px 4px 12px rgba(0, 0, 0, 0.1), 0 0 0 2px rgba(0, 0, 0, 0.2)}[data-sonner-toast] [data-disabled='true']{cursor:not-allowed}[data-sonner-toast]:hover [data-close-button]{opacity:1}[data-sonner-toast]:focus [data-close-button]{opacity:1}[data-sonner-toast]:focus-within [data-close-button]{opacity:1}[data-sonner-toast]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping='true']:before{content:'';position:absolute;left:0;right:0;height:100%}[data-sonner-toast][data-y-position='top'][data-swiping='true']:before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position='bottom'][data-swiping='true']:before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping='false'][data-removed='true']:before{content:'';position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast]:after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted='true']{--y:translateY(0);opacity:1}[data-sonner-toast][data-expanded='false'][data-front='false']{--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity 400ms}[data-sonner-toast][data-expanded='false'][data-front='false'][data-styled='true']>*{opacity:0}[data-sonner-toast][data-visible='false']{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted='true'][data-expanded='true']{--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed='true'][data-front='true'][data-swipe-out='false']{--y:translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='true']{--y:translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='false']{--y:translateY(40%);opacity:0;transition:transform 500ms, opacity 200ms}[data-sonner-toast][data-removed='true'][data-front='false']:before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping='true']{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swipe-out='true'][data-y-position='bottom'],[data-sonner-toast][data-swipe-out='true'][data-y-position='top']{animation:swipe-out 200ms ease-out forwards}@keyframes swipe-out{from{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount)));opacity:1}to{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount) + var(--lift) * -100%));opacity:0}}@media(max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset:16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - 32px)}[data-sonner-toaster][data-x-position='left']{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position='bottom']{bottom:20px}[data-sonner-toaster][data-y-position='top']{top:20px}[data-sonner-toaster][data-x-position='center']{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme='light']{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 91%);--success-text:hsl(140, 100%, 27%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%);--info-bg:hsl(210, 85%, 96%);--info-border:hsl(210, 92%, 91%);--info-text:hsl(210, 100%, 27%);--warning-bg:hsl(60, 85%, 96%);--warning-border:hsl(60, 92%, 91%);--warning-text:hsl(60, 100%, 19%)}[data-sonner-toaster][data-theme='light'] [data-sonner-toast][data-invert='true']{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-theme='dark'] [data-sonner-toast][data-invert='true']{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-theme='dark']{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%);--info-bg:hsl(210, 100%, 6%);--info-border:hsl(207, 100%, 12%);--info-text:hsl(210, 86%, 65%);--warning-bg:hsl(60, 100%, 6%);--warning-border:hsl(57, 100%, 12%);--warning-text:hsl(60, 86%, 65%)}[data-rich-colors='true'] [data-sonner-toast][data-type='success']{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='success'] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='error']{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='error'] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='info']{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='info'] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='warning']{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors='true'] [data-sonner-toast][data-type='warning'] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible='false']{transform-origin:center;animation:sonner-fade-out 0.2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(0.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-0.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-0.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-0.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-0.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-0.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-0.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-0.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-0.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-0.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:0.15}}@media(prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none !important;animation:none !important}}",
  map: null
};
const VISIBLE_TOASTS_AMOUNT = 3;
const VIEWPORT_OFFSET = "32px";
const TOAST_WIDTH = 356;
const GAP = 14;
function getInitialTheme(t) {
  if (t !== "system") {
    return t;
  }
  if (typeof window !== "undefined") {
    if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  }
  return "light";
}
const Toaster = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let coords;
  let hotkeyLabel;
  let { invert = false } = $$props;
  let { theme = "light" } = $$props;
  let { position = "bottom-right" } = $$props;
  let { hotkey = ["altKey", "KeyT"] } = $$props;
  let { richColors = false } = $$props;
  let { expand = false } = $$props;
  let { duration = null } = $$props;
  let { visibleToasts = VISIBLE_TOASTS_AMOUNT } = $$props;
  let { closeButton = false } = $$props;
  let { toastOptions = {} } = $$props;
  let { offset: offset2 = null } = $$props;
  let toasts = [];
  let heights = [];
  let expanded = false;
  let interacting = false;
  getInitialTheme(theme);
  let listRef;
  onDestroy(() => {
  });
  if ($$props.invert === void 0 && $$bindings.invert && invert !== void 0)
    $$bindings.invert(invert);
  if ($$props.theme === void 0 && $$bindings.theme && theme !== void 0)
    $$bindings.theme(theme);
  if ($$props.position === void 0 && $$bindings.position && position !== void 0)
    $$bindings.position(position);
  if ($$props.hotkey === void 0 && $$bindings.hotkey && hotkey !== void 0)
    $$bindings.hotkey(hotkey);
  if ($$props.richColors === void 0 && $$bindings.richColors && richColors !== void 0)
    $$bindings.richColors(richColors);
  if ($$props.expand === void 0 && $$bindings.expand && expand !== void 0)
    $$bindings.expand(expand);
  if ($$props.duration === void 0 && $$bindings.duration && duration !== void 0)
    $$bindings.duration(duration);
  if ($$props.visibleToasts === void 0 && $$bindings.visibleToasts && visibleToasts !== void 0)
    $$bindings.visibleToasts(visibleToasts);
  if ($$props.closeButton === void 0 && $$bindings.closeButton && closeButton !== void 0)
    $$bindings.closeButton(closeButton);
  if ($$props.toastOptions === void 0 && $$bindings.toastOptions && toastOptions !== void 0)
    $$bindings.toastOptions(toastOptions);
  if ($$props.offset === void 0 && $$bindings.offset && offset2 !== void 0)
    $$bindings.offset(offset2);
  $$result.css.add(css$R);
  coords = position.split("-");
  hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
  {
    if (toasts.length <= 1) {
      expanded = false;
    }
  }
  return `${toasts.length > 0 ? `<section${add_attribute("aria-label", `Notifications ${hotkeyLabel}`, 0)}${add_attribute("tabindex", -1, 0)}><ol${add_attribute("tabindex", -1, 0)}${add_attribute("class", $$props.class, 0)} data-sonner-toaster${add_attribute("data-theme", theme, 0)}${add_attribute("data-rich-colors", richColors, 0)}${add_attribute("data-y-position", coords[0], 0)}${add_attribute("data-x-position", coords[1], 0)}${add_styles(merge_ssr_styles(escape($$props.style, true), {
    "--front-toast-height": `${heights[0]?.height}px`,
    "--offset": typeof offset2 === "number" ? `${offset2}px` : offset2 || VIEWPORT_OFFSET,
    "--width": `${TOAST_WIDTH}px`,
    "--gap": `${GAP}px`
  }))}${add_attribute("this", listRef, 0)}>${each(toasts, (toast, index) => {
    return `${validate_component(Toast, "Toast").$$render(
      $$result,
      {
        index,
        toast,
        duration,
        class: toastOptions?.class,
        descriptionClass: toastOptions?.descriptionClass,
        invert: Boolean(invert),
        visibleToasts,
        closeButton: Boolean(closeButton),
        interacting,
        position,
        style: toastOptions?.style ?? "",
        toasts,
        heights,
        expandByDefault: Boolean(expand),
        expanded
      },
      {},
      {}
    )}`;
  })}</ol></section>` : ``}`;
});
const css$Q = {
  code: "svg.svelte-1j9izwh{display:block;height:100%;width:100%}",
  map: null
};
const StageStatus = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { status } = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  $$result.css.add(css$Q);
  return `${status === "attacked" ? `<svg viewBox="0 0 24 24" width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svelte-1j9izwh"><circle cx="12" cy="12" r="10" fill="#F03A50"></circle><path d="M14.5 17.5 3 6V3h3l11.5 11.5M13 19l6-6m-3 3 4 4m-1 1 2-2M14.5 6.5 18 3h3v3l-3.5 3.5M5 14l4 4m-2-1-3 3m-1-1 2 2" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg>` : `<svg viewBox="0 0 24 24" width="24" height="24" fill="none" xmlns="http://www.w3.org/2000/svg" class="svelte-1j9izwh"><circle cx="12" cy="12" r="10" fill="#B5BF39"></circle><path fill-rule="evenodd" clip-rule="evenodd" d="M12.4 1a1 1 0 0 0-.8 0l-8 3A1 1 0 0 0 3 5v7c0 3.4 2.3 6.2 4.3 8a22.7 22.7 0 0 0 4.2 2.9l.5-.9-.4.9c.2.1.6.1.8 0L12 22l.4.9a8.3 8.3 0 0 0 .4-.2 21 21 0 0 0 3.9-2.7c2-1.8 4.3-4.6 4.3-8V5a1 1 0 0 0-.6-1l-8-3Zm.3 19.4-.7.5a19.9 19.9 0 0 1-3.3-2.4c-2-1.7-3.7-4-3.7-6.5V5.7L12 3l7 2.6V12c0 2.6-1.7 4.8-3.7 6.5l-2.6 2Zm3-9.7a1 1 0 0 0-1.4-1.4L11 12.6l-1.3-1.3a1 1 0 0 0-1.4 1.4l2 2c.4.4 1 .4 1.4 0l4-4Z" fill="#fff"></path></svg>`}`;
});
const css$P = {
  code: '.score-board.svelte-wstck2.svelte-wstck2{align-items:center;align-self:start;background-color:var(--color-blue-spielbrett);border-radius:var(--radius-md);border-top-left-radius:0;border-top-right-radius:0;display:grid;grid-area:score;grid-template-areas:"title attack separator defense";padding:.25rem 1rem}.score-board.svelte-wstck2 h2.svelte-wstck2{font-size:.875rem;font-weight:700;grid-area:title;margin-right:1.5rem;text-align:center}.score-board.svelte-wstck2 .separator.svelte-wstck2{align-self:center;font-size:var(--scale-3);grid-area:separator;text-align:center}.score.attack.svelte-wstck2.svelte-wstck2{grid-area:attack}.score.defense.svelte-wstck2.svelte-wstck2{grid-area:defense}.score.svelte-wstck2.svelte-wstck2{display:flex;gap:1rem;justify-content:center}.score.defense.svelte-wstck2.svelte-wstck2,.score.defense.svelte-wstck2 .label.svelte-wstck2{flex-direction:row-reverse}.score.svelte-wstck2 .label.svelte-wstck2{align-items:center;display:flex;flex-direction:row;gap:.25rem}.score.svelte-wstck2 h3.svelte-wstck2{font-size:var(--scale-0000);font-weight:400}.score.svelte-wstck2 .icon.svelte-wstck2{height:1.5rem;width:1.5rem}.score.svelte-wstck2 .number.svelte-wstck2{font-size:var(--scale-3)}',
  map: null
};
const Score = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $score, $$unsubscribe_score;
  const { machine: machine2 } = getGameContext();
  const score = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).score, lodashExports.isEqual);
  $$unsubscribe_score = subscribe(score, (value) => $score = value);
  $$result.css.add(css$P);
  $$unsubscribe_score();
  return `<div class="score-board svelte-wstck2"><h2 class="svelte-wstck2" data-svelte-h="svelte-n9sjkv">Spielstand</h2> <div class="score attack svelte-wstck2"><div class="label svelte-wstck2"><h3 class="svelte-wstck2" data-svelte-h="svelte-q6sfia">Schaden</h3> <div class="icon svelte-wstck2">${validate_component(StageStatus, "StageStatus").$$render($$result, { status: "attacked" }, {}, {})}</div></div> <div class="number svelte-wstck2">${escape($score.attack)}</div></div> <div class="separator svelte-wstck2" data-svelte-h="svelte-i5llug">:</div> <div class="score defense svelte-wstck2"><div class="label svelte-wstck2"><h3 class="svelte-wstck2" data-svelte-h="svelte-b7kydp">Resilienz</h3> <div class="icon svelte-wstck2">${validate_component(StageStatus, "StageStatus").$$render($$result, { status: "defended" }, {}, {})}</div></div> <div class="number svelte-wstck2">${escape($score.defense)}</div></div> </div>`;
});
const Finished = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let sharedContextData;
  let $sharedContext, $$unsubscribe_sharedContext;
  let $isAdmin, $$unsubscribe_isAdmin;
  const { machine: machine2 } = getGameContext();
  const isAdmin = useSelector(machine2.service, ({ context }) => getCurrentUser(context).isAdmin);
  $$unsubscribe_isAdmin = subscribe(isAdmin, (value) => $isAdmin = value);
  const sharedContext = useSelector(machine2.service, ({ context }) => getSharedGameContext(context));
  $$unsubscribe_sharedContext = subscribe(sharedContext, (value) => $sharedContext = value);
  sharedContextData = $sharedContext ? "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(getGameSummary($sharedContext), void 0, 2)) : null;
  $$unsubscribe_sharedContext();
  $$unsubscribe_isAdmin();
  return `${validate_component(Score, "Score").$$render($$result, {}, {}, {})} ${$isAdmin && $sharedContext && sharedContextData ? (() => {
    let filename = getGameSummaryFilename($sharedContext);
    return `
  Download Data:
  <a${add_attribute("href", sharedContextData, 0)}${add_attribute("download", filename, 0)}>${escape(filename)}</a>`;
  })() : ``}`;
});
const Joker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg width="32" height="32" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 9.9s1.6-3 3.6-3.4c2-.4 2.9.3 3.6 1 .7.8 1.1 2.5 1.1 2.5M4.7 20.5c0-.6-.5-1.1-1.3-1.1S2 19.8 2 20.6c0 .7.6 1.3 1.3 1.3.8 0 1.3-.5 1.3-1.4h0Zm25.5.3c0-.6-.5-1.1-1.3-1.1s-1.3.4-1.3 1.2c0 .7.6 1.3 1.3 1.3.8 0 1.3-.5 1.3-1.4h0Z" stroke="currentColor" stroke-width=".8" stroke-linecap="round" stroke-linejoin="round"></path><path d="M15.6 12.9c0-1-1.2-1.8-1.2-1.8-1.8-1.3-4.4-2-7.9-1.7-3.5.3-5 4.8-5.5 6-.6 1 .5 2.8 1.5 4l.1.1c.2 0 .5-.2.8-.1h.2s0 0 0 0v-3.2c0-.9.5-1.2 1.7-1.8 1.2-.7 2.2 0 2.8.3.6.3-.7 3.1-1.3 4.3-.6 1.2.5 3.5.5 3.5s0 1.8.4 2.8c.3 1 1.8.4 3.8.2 2-.1 10.2-.3 12.6 0 0 0 .5 0 .4-2.6v-.7c.3-1 1-4 .3-6.3-.6-2 .3-2 1.3-2s3.3 1.7 2.6 5.8h.2c.3 0 .6 0 .8.2.3-.2.7-.5 1-1.2.6-1.7 1-3.1-.6-5.8-1.6-2.7-4-5-8.5-3.2l-2.4 1" stroke="currentColor" stroke-width=".8" stroke-linecap="round" stroke-linejoin="round"></path><path d="M8.3 23s.7-2.4 1.4-3c.7-.5 1.8 2.5 1.8 2.5s1.3-1.5 1.4-2c0 0 1.3.5 2 1.7l1.2-2c.3-.1 2.2 2 2.2 2s1.3-1.3 1.5-1.9c.2-.5 1.3.6 1.7 1.6.4 1 1.8-1.1 1.8-1.1s1 .2 1.2 2.1m-17 1.7s5-1 14.2-.6m-18-11.7s1.2-2 3.6-2m15.2.5s2-1 4.4.2M15.6 7.8s2-.3 2.5 1" stroke="currentColor" stroke-width=".8" stroke-linecap="round" stroke-linejoin="round"></path></svg>`;
});
const css$O = {
  code: ".jokers.svelte-b88rhg.svelte-b88rhg{grid-area:jokers;justify-content:center}.jokers.svelte-b88rhg.svelte-b88rhg,.jokers.svelte-b88rhg button.svelte-b88rhg{align-items:center;display:flex;position:relative}.jokers.svelte-b88rhg button.svelte-b88rhg{font-size:var(--scale-00);gap:.5rem}",
  map: null
};
const Jokers = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $side, $$unsubscribe_side;
  let $jokers, $$unsubscribe_jokers;
  const { machine: machine2 } = getGameContext();
  const jokers = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).jokers);
  $$unsubscribe_jokers = subscribe(jokers, (value) => $jokers = value);
  const side = useSelector(machine2.service, (state) => getCurrentUser(state.context).side);
  $$unsubscribe_side = subscribe(side, (value) => $side = value);
  $$result.css.add(css$O);
  $$unsubscribe_side();
  $$unsubscribe_jokers();
  return `${$side === "attack" ? `<div class="jokers svelte-b88rhg"><button class="unstyled svelte-b88rhg">${validate_component(Joker, "Joker").$$render($$result, {}, {}, {})}
      Jokerkarten <strong>(${escape($jokers)})</strong> ${validate_component(Tooltip, "Tooltip").$$render($$result, { position: "bottom", click: true }, {}, {
    default: () => {
      return `${validate_component(Heading, "Heading").$$render($$result, { size: "sm", spacing: "none" }, {}, {
        default: () => {
          return `Joker`;
        }
      })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
        default: () => {
          return `Kann während des Spielzugablaufs gegen einen Gegenstand eurer Wahl, der für einen
          gezielten Angriff benötigt wird, eingetauscht werden.`;
        }
      })} <strong data-svelte-h="svelte-15ffdek">oder</strong> ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
        default: () => {
          return `Ermöglicht es, die Antwort auf eine Frage von der Verteidigung zu verweigern.`;
        }
      })}`;
    }
  })}</button></div>` : ``}`;
});
const Arrow_right_left = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m16 3l4 4l-4 4m4-4H4m4 14l-4-4l4-4m-4 4h16"/>`}<!-- HTML_TAG_END --></svg>`;
});
const Arrow_left_right = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 3L4 7l4 4M4 7h16m-4 14l4-4l-4-4m4 4H4"/>`}<!-- HTML_TAG_END --></svg>`;
});
const css$N = {
  code: "button.svelte-15c37tb.svelte-15c37tb{text-wrap:nowrap;align-items:center;display:flex;gap:.5rem;height:1.375rem;padding-left:1rem;padding-right:1rem;width:100%}button.svelte-15c37tb.svelte-15c37tb:hover{background:rgba(213,217,227,.302)}button.svelte-15c37tb .icons.svelte-15c37tb{flex-shrink:0}button.svelte-15c37tb .icons.svelte-15c37tb svg{display:block}",
  map: null
};
const ExpandableButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$slots = compute_slots(slots);
  let { disabled = false } = $$props;
  if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
    $$bindings.disabled(disabled);
  $$result.css.add(css$N);
  return `<button ${disabled ? "disabled" : ""} class="unstyled svelte-15c37tb">${$$slots.icon ? `<div class="icons svelte-15c37tb">${slots.icon ? slots.icon({}) : ``}</div>` : ``} ${slots.default ? slots.default({}) : ``} </button>`;
});
const SwitchSidesButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isAdmin;
  let side;
  let $user, $$unsubscribe_user;
  let $isActive, $$unsubscribe_isActive;
  const { machine: machine2 } = getGameContext();
  const user = useSelector(machine2.service, ({ context }) => getCurrentUser(context));
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  const isActive = useSelector(machine2.service, (state) => state.matches("Playing.Gameloop"));
  $$unsubscribe_isActive = subscribe(isActive, (value) => $isActive = value);
  isAdmin = $user.isAdmin;
  side = $user.side;
  $$unsubscribe_user();
  $$unsubscribe_isActive();
  return `${isAdmin ? `${validate_component(ExpandableButton, "ExpandableButton").$$render($$result, { disabled: !isAdmin || !$isActive }, {}, {
    default: () => {
      return `${side === "attack" ? `${validate_component(Arrow_right_left, "IconRightLeft").$$render($$result, { slot: "icon" }, {}, {})}` : `${validate_component(Arrow_left_right, "IconLeftRight").$$render($$result, { slot: "icon" }, {}, {})}`}
    Zu ${escape(side === "attack" ? "Verteidigung" : "Angriff")} wechseln`;
    }
  })}` : ``}`;
});
const Settings = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></g>`}<!-- HTML_TAG_END --></svg>`;
});
const File_text = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><path d="M14 2v6h6m-4 5H8m8 4H8m2-8H8"/></g>`}<!-- HTML_TAG_END --></svg>`;
});
const Volume_2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5L6 9H2v6h4l5 4V5zm4.54 3.46a5 5 0 0 1 0 7.07m3.53-10.6a10 10 0 0 1 0 14.14"/>`}<!-- HTML_TAG_END --></svg>`;
});
const Volume_x = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5L6 9H2v6h4l5 4V5zm11 4l-6 6m0-6l6 6"/>`}<!-- HTML_TAG_END --></svg>`;
});
const css$M = {
  code: ".open-button.svelte-821f7k{align-content:center;background:#fff;border-radius:var(--radius-full);color:#000;display:grid;height:1.5rem;justify-content:center;padding:.25rem;place-content:center;width:1.5rem}.open-button.svelte-821f7k svg{display:block;height:100%;width:100%}",
  map: null
};
const OpenButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$restProps = compute_rest_props($$props, ["href"]);
  let { href = void 0 } = $$props;
  if ($$props.href === void 0 && $$bindings.href && href !== void 0)
    $$bindings.href(href);
  $$result.css.add(css$M);
  return `${href ? `<a${spread(
    [
      { class: "unstyled icon open-button" },
      { href: escape_attribute_value(href) },
      escape_object($$restProps)
    ],
    { classes: "svelte-821f7k" }
  )}>${slots.default ? slots.default({}) : ``}</a>` : `<button class="unstyled icon open-button svelte-821f7k">${slots.default ? slots.default({}) : ``}</button>`}`;
});
const css$L = {
  code: ".expandable.svelte-1hwzqlm.svelte-1hwzqlm{color:#000;isolation:isolate;position:relative;z-index:var(--layer-top)}.expandable.svelte-1hwzqlm .content.svelte-1hwzqlm{align-items:center;background:#fff;border-radius:var(--radius-sm);display:flex;flex-direction:column;gap:1rem;min-width:16rem;padding-bottom:.5rem;padding-top:.5rem;position:absolute;right:0;top:2rem}",
  map: null
};
const Expandable = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$L);
  return `<div class="${["expandable svelte-1hwzqlm", ""].join(" ").trim()}">${validate_component(OpenButton, "OpenButton").$$render($$result, {}, {}, {
    default: () => {
      return `${slots.icon ? slots.icon({}) : ``}`;
    }
  })} ${``} </div>`;
});
const Undo_2 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M9 14L4 9l5-5"/><path d="M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11"/></g>`}<!-- HTML_TAG_END --></svg>`;
});
const RollbackButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isAdmin, $$unsubscribe_isAdmin;
  let $lastGameEvent, $$unsubscribe_lastGameEvent;
  let $isActive, $$unsubscribe_isActive;
  const { machine: machine2 } = getGameContext();
  const isAdmin = useSelector(machine2.service, ({ context }) => getCurrentUser(context).isAdmin);
  $$unsubscribe_isAdmin = subscribe(isAdmin, (value) => $isAdmin = value);
  const isActive = useSelector(machine2.service, (state) => state.matches("Playing.Gameloop"));
  $$unsubscribe_isActive = subscribe(isActive, (value) => $isActive = value);
  const lastGameEvent = useSelector(machine2.service, ({ context }) => {
    return context.events[context.events.length - 1];
  });
  $$unsubscribe_lastGameEvent = subscribe(lastGameEvent, (value) => $lastGameEvent = value);
  $$unsubscribe_isAdmin();
  $$unsubscribe_lastGameEvent();
  $$unsubscribe_isActive();
  return `${$isAdmin ? `${validate_component(ExpandableButton, "ExpandableButton").$$render($$result, { disabled: !$lastGameEvent || !$isActive }, {}, {
    icon: () => {
      return `${validate_component(Undo_2, "Icon").$$render($$result, { slot: "icon" }, {}, {})}`;
    },
    default: () => {
      return `Aktion zurücksetzen`;
    }
  })}` : ``}`;
});
let howl;
const sprite = {
  capture: [0, 204],
  move: [704, 316],
  select: [1519, 153],
  silence: [2172, 500]
};
const getHowl = () => {
  if (!howl) {
    const spriteVersion = Object.values(sprite).map((value) => window.btoa(`${value[0]}:${value[1]}`)).join("-");
    howl ??= new howlerExports.Howl({
      src: [`/audio/sprite.mp3?v=${spriteVersion}`],
      sprite
    });
  }
  return howl;
};
const enabled = writable(true);
const didWarmup = writable(false);
const play = (sound) => {
  if (!get_store_value(enabled))
    return;
  getHowl().play(sound);
};
const css$K = {
  code: ".actions.svelte-1e7z9um{display:flex;gap:1rem;grid-area:options}",
  map: null
};
const InGame = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $playing, $$unsubscribe_playing;
  let $enabled, $$unsubscribe_enabled;
  $$unsubscribe_enabled = subscribe(enabled, (value) => $enabled = value);
  const { machine: machine2 } = getGameContext();
  const playing = useSelector(machine2.service, (state) => state.matches("Playing"));
  $$unsubscribe_playing = subscribe(playing, (value) => $playing = value);
  $$result.css.add(css$K);
  $$unsubscribe_playing();
  $$unsubscribe_enabled();
  return `${$playing ? `${validate_component(Score, "Score").$$render($$result, {}, {}, {})} ${validate_component(Jokers, "Jokers").$$render($$result, {}, {}, {})}` : ``} <div class="actions svelte-1e7z9um">${validate_component(OpenButton, "OpenButton").$$render($$result, { href: "/manual", target: "_blank" }, {}, {
    default: () => {
      return `${validate_component(File_text, "HelpIcon").$$render($$result, {}, {}, {})}`;
    }
  })} ${validate_component(OpenButton, "OpenButton").$$render($$result, {}, {}, {
    default: () => {
      return `${$enabled ? `${validate_component(Volume_2, "AudioIcon").$$render($$result, {}, {}, {})}` : `${validate_component(Volume_x, "AudioOffIcon").$$render($$result, {}, {}, {})}`}`;
    }
  })} ${validate_component(Expandable, "Expandable").$$render($$result, {}, {}, {
    icon: () => {
      return `${validate_component(Settings, "SettingsIcon").$$render($$result, { slot: "icon" }, {}, {})}`;
    },
    default: () => {
      return `${validate_component(SwitchSidesButton, "SwitchSidesButton").$$render($$result, {}, {}, {})} ${validate_component(RollbackButton, "RollbackButton").$$render($$result, {}, {}, {})}`;
    }
  })} </div>`;
});
const css$J = {
  code: ".assigned.svelte-167n10j.svelte-167n10j{background-color:var(--color-blue-transp-760);border-radius:var(--radius-md);display:flex;flex-direction:column;gap:.5rem;padding:.5rem 1.25rem 1.25rem}.users.svelte-167n10j.svelte-167n10j{background:var(--color-bg);border-radius:var(--radius-sm);padding:.5rem .8rem .8rem;text-align:center}.users.svelte-167n10j .user-list.svelte-167n10j{grid-gap:.5rem;display:grid;gap:.5rem;grid-template-columns:repeat(1,1fr);grid-template-columns:repeat(var(--column-count,1),1fr);margin-top:.5rem}.users.players.svelte-167n10j.svelte-167n10j{flex:1}.users.admins.svelte-167n10j.svelte-167n10j{min-height:5.5rem}.users.target.svelte-167n10j.svelte-167n10j{outline:2px solid var(--color-orange-dark)}.user.svelte-167n10j.svelte-167n10j{word-wrap:nowrap;background:var(--color-blue-transp-760);border-radius:var(--radius-xs);height:2rem;line-height:2rem;overflow:hidden;padding:0 .5rem;text-align:center;text-overflow:ellipsis}.user[draggable=true].svelte-167n10j.svelte-167n10j{cursor:grab}",
  map: null
};
const AssigningSidesColumn = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let usersColumnCount;
  let $users, $$unsubscribe_users;
  let $canAssignSides, $$unsubscribe_canAssignSides;
  let { side } = $$props;
  const { userId, machine: machine2 } = getGameContext();
  const canAssignSides = useSelector(machine2.service, (snapshot) => snapshot.can({
    type: "assign side",
    otherUserId: "",
    side: "attack",
    isAdmin: true
  }));
  $$unsubscribe_canAssignSides = subscribe(canAssignSides, (value) => $canAssignSides = value);
  const users = useSelector(machine2.service, (snapshot) => snapshot.context.users.filter((user) => user.side === side && user.isSideAssigned).sort((a, b) => a.name.localeCompare(b.name)));
  $$unsubscribe_users = subscribe(users, (value) => $users = value);
  if ($$props.side === void 0 && $$bindings.side && side !== void 0)
    $$bindings.side(side);
  $$result.css.add(css$J);
  usersColumnCount = Math.ceil(($users.length + (Math.ceil($users.length / 5) - 1)) / 5);
  $$unsubscribe_users();
  $$unsubscribe_canAssignSides();
  return ` <div class="${[
    "assigned " + escape(side, true) + " svelte-167n10j",
    $canAssignSides ? "can-assign" : ""
  ].join(" ").trim()}"${add_styles({ "--column-count": usersColumnCount })}>${validate_component(Heading, "Heading").$$render(
    $$result,
    {
      centered: true,
      size: "lg",
      spacing: "none"
    },
    {},
    {
      default: () => {
        return `${side === "defense" ? `Verteidigung` : `Angriff`}`;
      }
    }
  )} <div class="${["users players svelte-167n10j", ""].join(" ").trim()}">${validate_component(Heading, "Heading").$$render(
    $$result,
    {
      centered: true,
      size: "sm",
      spacing: "none"
    },
    {},
    {
      default: () => {
        return `Spieler:innen`;
      }
    }
  )} <div class="user-list svelte-167n10j">${each($users.filter((user) => !user.isAdmin), (user) => {
    return `<div class="user svelte-167n10j"${add_attribute("draggable", $canAssignSides ? "true" : "false", 0)}>${escape(user.name)} </div>`;
  })}</div></div> <div class="${["users admins svelte-167n10j", ""].join(" ").trim()}">${validate_component(Heading, "Heading").$$render(
    $$result,
    {
      centered: true,
      size: "sm",
      spacing: "none"
    },
    {},
    {
      default: () => {
        return `Spielleitung`;
      }
    }
  )} <div class="user-list svelte-167n10j">${each($users.filter((user) => user.isAdmin), (user) => {
    return `<div class="user svelte-167n10j"${add_attribute("draggable", $canAssignSides ? "true" : "false", 0)}>${escape(user.name)} </div>`;
  })}</div></div> </div>`;
});
const css$I = {
  code: ".columns.svelte-r26asw{grid-gap:3rem;display:grid;gap:3rem;grid-template-columns:1.5fr 1fr 1.5fr;height:27.5rem;margin-bottom:1rem;margin-top:1rem}.unassigned.svelte-r26asw{display:flex;flex-direction:column;gap:.5rem}.user.svelte-r26asw{word-wrap:nowrap;background:var(--color-white-80);border-radius:var(--radius-xs);color:var(--color-blue-spielbrett);height:2rem;line-height:2rem;overflow:hidden;padding:0 .5rem;text-align:center;text-overflow:ellipsis}.user[draggable=true].svelte-r26asw{cursor:grab}",
  map: null
};
const AssigningSides = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $unassignedUsers, $$unsubscribe_unassignedUsers;
  let $canAssignSides, $$unsubscribe_canAssignSides;
  let $canContinue, $$unsubscribe_canContinue;
  let $user, $$unsubscribe_user;
  const { user, machine: machine2 } = getGameContext();
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  const canAssignSides = useSelector(machine2.service, (snapshot) => snapshot.can({
    type: "assign side",
    otherUserId: "",
    side: "attack",
    isAdmin: true
  }));
  $$unsubscribe_canAssignSides = subscribe(canAssignSides, (value) => $canAssignSides = value);
  const canContinue = useSelector(machine2.service, (snapshot) => snapshot.can({ type: "next step" }));
  $$unsubscribe_canContinue = subscribe(canContinue, (value) => $canContinue = value);
  const unassignedUsers = useSelector(machine2.service, (snapshot) => snapshot.context.users.filter((user2) => !user2.isSideAssigned));
  $$unsubscribe_unassignedUsers = subscribe(unassignedUsers, (value) => $unassignedUsers = value);
  $$result.css.add(css$I);
  $$unsubscribe_unassignedUsers();
  $$unsubscribe_canAssignSides();
  $$unsubscribe_canContinue();
  $$unsubscribe_user();
  return `${validate_component(Heading, "Heading").$$render($$result, { separator: true }, {}, {
    info: () => {
      return `Schritt 2 von 3`;
    },
    default: () => {
      return `Einteilung in Teams`;
    }
  })} <p data-svelte-h="svelte-ugtca6">Gleich geht’s los. Sobald alle Teilnehmende sich eingeloggt haben, kann die Spielleitung alle in
  Teams einteilen.</p> <div class="columns svelte-r26asw">${validate_component(AssigningSidesColumn, "AssigningSidesColumn").$$render($$result, { side: "defense" }, {}, {})} <div class="unassigned svelte-r26asw">${each($unassignedUsers, (user2) => {
    return ` <div class="user svelte-r26asw"${add_attribute("draggable", $canAssignSides ? "true" : "false", 0)}>${escape(user2.name)} </div>`;
  })}</div> ${validate_component(AssigningSidesColumn, "AssigningSidesColumn").$$render($$result, { side: "attack" }, {}, {})}</div> ${validate_component(Actions$1, "Actions").$$render($$result, { spacing: "none" }, {}, {
    default: () => {
      return `${validate_component(Button, "Button").$$render(
        $$result,
        {
          primary: true,
          disabled: !$canContinue,
          disabledReason: $user.isAdmin ? "Alle Spieler:innen müssen einer Seite zugewiesen sein" : "Nur Administrator:innen dürfen bestätigen"
        },
        {},
        {
          default: () => {
            return `Bestätigen und weiter`;
          }
        }
      )}`;
    }
  })}`;
});
const Close = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="currentColor"></path><path d="M20.8002 11.1997L11.2002 20.7997M11.2002 11.1997L20.8002 20.7997" stroke="currentColor" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"></path></svg>`;
});
const css$H = {
  code: ".dialog-wrapper.svelte-1elty70{align-content:center;display:grid;justify-content:center;place-content:center;position:fixed}.backdrop.svelte-1elty70,.dialog-wrapper.svelte-1elty70{bottom:0;left:0;right:0;top:0}.backdrop.svelte-1elty70{background-color:var(--color-bg);opacity:.85;position:absolute}.dialog.svelte-1elty70{background-color:var(--color-bg-secondary);border:none;border-radius:var(--radius-md);box-shadow:0 0 30px 0 var(--color-shadow-secondary);margin:auto;max-width:90%;padding:1.5rem;position:relative}.close-button.svelte-1elty70 svg{display:block}",
  map: null
};
const Dialog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { title = "" } = $$props;
  createEventDispatcher();
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css$H);
  return `<div class="dialog-wrapper svelte-1elty70">  <div class="backdrop svelte-1elty70"></div> <div class="dialog svelte-1elty70">${validate_component(Heading, "Heading").$$render($$result, { separator: true }, {}, {
    info: () => {
      return `<button class="unstyled close-button svelte-1elty70" slot="info">${validate_component(Close, "CloseIcon").$$render($$result, {}, {}, {})}</button>`;
    },
    default: () => {
      return `${title ? `${escape(title)}` : ``}`;
    }
  })} ${slots.default ? slots.default({}) : ``}</div></div> `;
});
const FACES = [
  { id: 0 },
  { id: 1 },
  { id: 2 },
  { id: 3 },
  { id: 4 },
  { id: 5 },
  { id: 6 },
  { id: 7 },
  { id: 8 }
];
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v) => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
const oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
      continue;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x,
    y
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
const flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
const offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      const {
        x,
        y
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
const shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css2 = getComputedStyle(element);
  return css2.transform !== "none" || css2.perspective !== "none" || (css2.containerType ? css2.containerType !== "normal" : false) || !webkit && (css2.backdropFilter ? css2.backdropFilter !== "none" : false) || !webkit && (css2.filter ? css2.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css2.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css2.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
}
function getCssDimensions(element) {
  const css2 = getComputedStyle(element);
  let width = parseFloat(css2.width) || 0;
  let height = parseFloat(css2.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css2 = getComputedStyle(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  return getCssDimensions(element);
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
const getElementRects = async function(_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...await getDimensionsFn(floating)
    }
  };
};
function isRTL(element) {
  return getComputedStyle(element).direction === "rtl";
}
const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId);
    io && io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const computePosition = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};
function createFloatingActions(initOptions) {
  let referenceElement;
  let floatingElement;
  const defaultOptions = {
    autoUpdate: true
  };
  let options = initOptions;
  const getOptions = (mixin) => {
    return { ...defaultOptions, ...initOptions || {}, ...mixin || {} };
  };
  const updatePosition = (updateOptions) => {
    if (referenceElement && floatingElement) {
      options = getOptions(updateOptions);
      computePosition(referenceElement, floatingElement, options).then((v) => {
        Object.assign(floatingElement.style, {
          position: v.strategy,
          left: `${v.x}px`,
          top: `${v.y}px`
        });
        options?.onComputed && options.onComputed(v);
      });
    }
  };
  const referenceAction = (node) => {
    if ("subscribe" in node) {
      setupVirtualElementObserver(node);
      return {};
    } else {
      referenceElement = node;
      updatePosition();
    }
  };
  const contentAction = (node, contentOptions) => {
    let autoUpdateDestroy;
    floatingElement = node;
    options = getOptions(contentOptions);
    setTimeout(() => updatePosition(contentOptions), 0);
    updatePosition(contentOptions);
    const destroyAutoUpdate = () => {
      if (autoUpdateDestroy) {
        autoUpdateDestroy();
        autoUpdateDestroy = void 0;
      }
    };
    const initAutoUpdate = ({ autoUpdate: autoUpdate$1 } = options || {}) => {
      destroyAutoUpdate();
      if (autoUpdate$1 !== false) {
        return autoUpdate(referenceElement, floatingElement, () => updatePosition(options), autoUpdate$1 === true ? {} : autoUpdate$1);
      }
      return;
    };
    autoUpdateDestroy = initAutoUpdate();
    return {
      update(contentOptions2) {
        updatePosition(contentOptions2);
        autoUpdateDestroy = initAutoUpdate(contentOptions2);
      },
      destroy() {
        destroyAutoUpdate();
      }
    };
  };
  const setupVirtualElementObserver = (node) => {
    const unsubscribe = node.subscribe(($node) => {
      if (referenceElement === void 0) {
        referenceElement = $node;
        updatePosition();
      } else {
        Object.assign(referenceElement, $node);
        updatePosition();
      }
    });
    onDestroy(unsubscribe);
  };
  return [
    referenceAction,
    contentAction,
    updatePosition
  ];
}
function filter({
  loadOptions,
  filterText,
  items,
  multiple,
  value,
  itemId,
  groupBy,
  filterSelectedItems,
  itemFilter,
  convertStringItemsToObjects: convertStringItemsToObjects2,
  filterGroupedItems,
  label
}) {
  if (items && loadOptions)
    return items;
  if (!items)
    return [];
  if (items && items.length > 0 && typeof items[0] !== "object") {
    items = convertStringItemsToObjects2(items);
  }
  let filterResults = items.filter((item) => {
    let matchesFilter = itemFilter(item[label], filterText, item);
    if (matchesFilter && multiple && value?.length) {
      matchesFilter = !value.some((x) => {
        return filterSelectedItems ? x[itemId] === item[itemId] : false;
      });
    }
    return matchesFilter;
  });
  if (groupBy) {
    filterResults = filterGroupedItems(filterResults);
  }
  return filterResults;
}
async function getItems({ dispatch, loadOptions, convertStringItemsToObjects: convertStringItemsToObjects2, filterText }) {
  let res = await loadOptions(filterText).catch((err) => {
    console.warn("svelte-select loadOptions error :>> ", err);
    dispatch("error", { type: "loadOptions", details: err });
  });
  if (res && !res.cancelled) {
    if (res) {
      if (res && res.length > 0 && typeof res[0] !== "object") {
        res = convertStringItemsToObjects2(res);
      }
      dispatch("loaded", { items: res });
    } else {
      res = [];
    }
    return {
      filteredItems: res,
      loading: false,
      focused: true,
      listOpen: true
    };
  }
}
const css$G = {
  code: "svg.svelte-qbd276{width:var(--chevron-icon-width, 20px);height:var(--chevron-icon-width, 20px);color:var(--chevron-icon-colour, currentColor)}",
  map: null
};
const ChevronIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$G);
  return `<svg width="100%" height="100%" viewBox="0 0 20 20" focusable="false" aria-hidden="true" class="svelte-qbd276"><path fill="currentColor" d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747
          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0
          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502
          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0
          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"></path></svg>`;
});
const css$F = {
  code: "svg.svelte-whdbu1{width:var(--clear-icon-width, 20px);height:var(--clear-icon-width, 20px);color:var(--clear-icon-color, currentColor)}",
  map: null
};
const ClearIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$F);
  return `<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" aria-hidden="true" role="presentation" class="svelte-whdbu1"><path fill="currentColor" d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124
    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>`;
});
const css$E = {
  code: ".loading.svelte-1p3nqvd{width:var(--spinner-width, 20px);height:var(--spinner-height, 20px);color:var(--spinner-color, var(--icons-color));animation:svelte-1p3nqvd-rotate 0.75s linear infinite;transform-origin:center center;transform:none}.circle_path.svelte-1p3nqvd{stroke-dasharray:90;stroke-linecap:round}@keyframes svelte-1p3nqvd-rotate{100%{transform:rotate(360deg)}}",
  map: null
};
const LoadingIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$E);
  return `<svg class="loading svelte-1p3nqvd" viewBox="25 25 50 50"><circle class="circle_path svelte-1p3nqvd" cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-miterlimit="10"></circle></svg>`;
});
const css$D = {
  code: ".svelte-select.svelte-apvs86.svelte-apvs86.svelte-apvs86{--borderRadius:var(--border-radius);--clearSelectColor:var(--clear-select-color);--clearSelectWidth:var(--clear-select-width);--disabledBackground:var(--disabled-background);--disabledBorderColor:var(--disabled-border-color);--disabledColor:var(--disabled-color);--disabledPlaceholderColor:var(--disabled-placeholder-color);--disabledPlaceholderOpacity:var(--disabled-placeholder-opacity);--errorBackground:var(--error-background);--errorBorder:var(--error-border);--groupItemPaddingLeft:var(--group-item-padding-left);--groupTitleColor:var(--group-title-color);--groupTitleFontSize:var(--group-title-font-size);--groupTitleFontWeight:var(--group-title-font-weight);--groupTitlePadding:var(--group-title-padding);--groupTitleTextTransform:var(--group-title-text-transform);--indicatorColor:var(--chevron-color);--indicatorHeight:var(--chevron-height);--indicatorWidth:var(--chevron-width);--inputColor:var(--input-color);--inputLeft:var(--input-left);--inputLetterSpacing:var(--input-letter-spacing);--inputMargin:var(--input-margin);--inputPadding:var(--input-padding);--itemActiveBackground:var(--item-active-background);--itemColor:var(--item-color);--itemFirstBorderRadius:var(--item-first-border-radius);--itemHoverBG:var(--item-hover-bg);--itemHoverColor:var(--item-hover-color);--itemIsActiveBG:var(--item-is-active-bg);--itemIsActiveColor:var(--item-is-active-color);--itemIsNotSelectableColor:var(--item-is-not-selectable-color);--itemPadding:var(--item-padding);--listBackground:var(--list-background);--listBorder:var(--list-border);--listBorderRadius:var(--list-border-radius);--listEmptyColor:var(--list-empty-color);--listEmptyPadding:var(--list-empty-padding);--listEmptyTextAlign:var(--list-empty-text-align);--listMaxHeight:var(--list-max-height);--listPosition:var(--list-position);--listShadow:var(--list-shadow);--listZIndex:var(--list-z-index);--multiItemBG:var(--multi-item-bg);--multiItemBorderRadius:var(--multi-item-border-radius);--multiItemDisabledHoverBg:var(--multi-item-disabled-hover-bg);--multiItemDisabledHoverColor:var(--multi-item-disabled-hover-color);--multiItemHeight:var(--multi-item-height);--multiItemMargin:var(--multi-item-margin);--multiItemPadding:var(--multi-item-padding);--multiSelectInputMargin:var(--multi-select-input-margin);--multiSelectInputPadding:var(--multi-select-input-padding);--multiSelectPadding:var(--multi-select-padding);--placeholderColor:var(--placeholder-color);--placeholderOpacity:var(--placeholder-opacity);--selectedItemPadding:var(--selected-item-padding);--spinnerColor:var(--spinner-color);--spinnerHeight:var(--spinner-height);--spinnerWidth:var(--spinner-width);--internal-padding:0 0 0 16px;border:var(--border, 1px solid #d8dbdf);border-radius:var(--border-radius, 6px);min-height:var(--height, 42px);position:relative;display:flex;align-items:stretch;padding:var(--padding, var(--internal-padding));background:var(--background, #fff);margin:var(--margin, 0);width:var(--width, 100%);font-size:var(--font-size, 16px);max-height:var(--max-height)}.svelte-apvs86.svelte-apvs86.svelte-apvs86{box-sizing:var(--box-sizing, border-box)}.svelte-select.svelte-apvs86.svelte-apvs86.svelte-apvs86:hover{border:var(--border-hover, 1px solid #b2b8bf)}.value-container.svelte-apvs86.svelte-apvs86.svelte-apvs86{display:flex;flex:1 1 0%;flex-wrap:wrap;align-items:center;gap:5px 10px;padding:var(--value-container-padding, 5px 0);position:relative;overflow:var(--value-container-overflow, hidden);align-self:stretch}.prepend.svelte-apvs86.svelte-apvs86.svelte-apvs86,.indicators.svelte-apvs86.svelte-apvs86.svelte-apvs86{display:flex;flex-shrink:0;align-items:center}.indicators.svelte-apvs86.svelte-apvs86.svelte-apvs86{position:var(--indicators-position);top:var(--indicators-top);right:var(--indicators-right);bottom:var(--indicators-bottom)}input.svelte-apvs86.svelte-apvs86.svelte-apvs86{position:absolute;cursor:default;border:none;color:var(--input-color, var(--item-color));padding:var(--input-padding, 0);letter-spacing:var(--input-letter-spacing, inherit);margin:var(--input-margin, 0);min-width:10px;top:0;right:0;bottom:0;left:0;background:transparent;font-size:var(--font-size, 16px)}.svelte-apvs86:not(.multi)>.value-container.svelte-apvs86>input.svelte-apvs86{width:100%;height:100%}input.svelte-apvs86.svelte-apvs86.svelte-apvs86::placeholder{color:var(--placeholder-color, #78848f);opacity:var(--placeholder-opacity, 1)}input.svelte-apvs86.svelte-apvs86.svelte-apvs86:focus{outline:none}.svelte-select.focused.svelte-apvs86.svelte-apvs86.svelte-apvs86{border:var(--border-focused, 1px solid #006fe8);border-radius:var(--border-radius-focused, var(--border-radius, 6px))}.disabled.svelte-apvs86.svelte-apvs86.svelte-apvs86{background:var(--disabled-background, #ebedef);border-color:var(--disabled-border-color, #ebedef);color:var(--disabled-color, #c1c6cc)}.disabled.svelte-apvs86 input.svelte-apvs86.svelte-apvs86::placeholder{color:var(--disabled-placeholder-color, #c1c6cc);opacity:var(--disabled-placeholder-opacity, 1)}.selected-item.svelte-apvs86.svelte-apvs86.svelte-apvs86{position:relative;overflow:var(--selected-item-overflow, hidden);padding:var(--selected-item-padding, 0 20px 0 0);text-overflow:ellipsis;white-space:nowrap;color:var(--selected-item-color, inherit);font-size:var(--font-size, 16px)}.multi.svelte-apvs86 .selected-item.svelte-apvs86.svelte-apvs86{position:absolute;line-height:var(--height, 42px);height:var(--height, 42px)}.selected-item.svelte-apvs86.svelte-apvs86.svelte-apvs86:focus{outline:none}.hide-selected-item.svelte-apvs86.svelte-apvs86.svelte-apvs86{opacity:0}.icon.svelte-apvs86.svelte-apvs86.svelte-apvs86{display:flex;align-items:center;justify-content:center}.clear-select.svelte-apvs86.svelte-apvs86.svelte-apvs86{all:unset;display:flex;align-items:center;justify-content:center;width:var(--clear-select-width, 40px);height:var(--clear-select-height, 100%);color:var(--clear-select-color, var(--icons-color));margin:var(--clear-select-margin, 0);pointer-events:all;flex-shrink:0}.clear-select.svelte-apvs86.svelte-apvs86.svelte-apvs86:focus{outline:var(--clear-select-focus-outline, 1px solid #006fe8)}.loading.svelte-apvs86.svelte-apvs86.svelte-apvs86{width:var(--loading-width, 40px);height:var(--loading-height);color:var(--loading-color, var(--icons-color));margin:var(--loading--margin, 0);flex-shrink:0}.chevron.svelte-apvs86.svelte-apvs86.svelte-apvs86{width:var(--chevron-width, 40px);height:var(--chevron-height, 40px);background:var(--chevron-background, transparent);pointer-events:var(--chevron-pointer-events, none);color:var(--chevron-color, var(--icons-color));border:var(--chevron-border, 0 0 0 1px solid #d8dbdf);flex-shrink:0}.multi.svelte-apvs86.svelte-apvs86.svelte-apvs86{padding:var(--multi-select-padding, var(--internal-padding))}.multi.svelte-apvs86 input.svelte-apvs86.svelte-apvs86{padding:var(--multi-select-input-padding, 0);position:relative;margin:var(--multi-select-input-margin, 5px 0);flex:1 1 40px}.svelte-select.error.svelte-apvs86.svelte-apvs86.svelte-apvs86{border:var(--error-border, 1px solid #ff2d55);background:var(--error-background, #fff)}.a11y-text.svelte-apvs86.svelte-apvs86.svelte-apvs86{z-index:9999;border:0px;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0px;white-space:nowrap}.multi-item.svelte-apvs86.svelte-apvs86.svelte-apvs86{background:var(--multi-item-bg, #ebedef);margin:var(--multi-item-margin, 0);outline:var(--multi-item-outline, 1px solid #ddd);border-radius:var(--multi-item-border-radius, 4px);height:var(--multi-item-height, 25px);line-height:var(--multi-item-height, 25px);display:flex;cursor:default;padding:var(--multi-item-padding, 0 5px);overflow:hidden;gap:var(--multi-item-gap, 4px);outline-offset:-1px;max-width:var(--multi-max-width, none);color:var(--multi-item-color, var(--item-color))}.multi-item.disabled.svelte-apvs86.svelte-apvs86.svelte-apvs86:hover{background:var(--multi-item-disabled-hover-bg, #ebedef);color:var(--multi-item-disabled-hover-color, #c1c6cc)}.multi-item-text.svelte-apvs86.svelte-apvs86.svelte-apvs86{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.multi-item-clear.svelte-apvs86.svelte-apvs86.svelte-apvs86{display:flex;align-items:center;justify-content:center;--clear-icon-color:var(--multi-item-clear-icon-color, #000)}.multi-item.active.svelte-apvs86.svelte-apvs86.svelte-apvs86{outline:var(--multi-item-active-outline, 1px solid #006fe8)}.svelte-select-list.svelte-apvs86.svelte-apvs86.svelte-apvs86{box-shadow:var(--list-shadow, 0 2px 3px 0 rgba(44, 62, 80, 0.24));border-radius:var(--list-border-radius, 4px);max-height:var(--list-max-height, 252px);overflow-y:auto;background:var(--list-background, #fff);position:var(--list-position, absolute);z-index:var(--list-z-index, 2);border:var(--list-border)}.prefloat.svelte-apvs86.svelte-apvs86.svelte-apvs86{opacity:0;pointer-events:none}.list-group-title.svelte-apvs86.svelte-apvs86.svelte-apvs86{color:var(--group-title-color, #8f8f8f);cursor:default;font-size:var(--group-title-font-size, 16px);font-weight:var(--group-title-font-weight, 600);height:var(--height, 42px);line-height:var(--height, 42px);padding:var(--group-title-padding, 0 20px);text-overflow:ellipsis;overflow-x:hidden;white-space:nowrap;text-transform:var(--group-title-text-transform, uppercase)}.empty.svelte-apvs86.svelte-apvs86.svelte-apvs86{text-align:var(--list-empty-text-align, center);padding:var(--list-empty-padding, 20px 0);color:var(--list-empty-color, #78848f)}.item.svelte-apvs86.svelte-apvs86.svelte-apvs86{cursor:default;height:var(--item-height, var(--height, 42px));line-height:var(--item-line-height, var(--height, 42px));padding:var(--item-padding, 0 20px);color:var(--item-color, inherit);text-overflow:ellipsis;overflow:hidden;white-space:nowrap;transition:var(--item-transition, all 0.2s);align-items:center;width:100%}.item.group-item.svelte-apvs86.svelte-apvs86.svelte-apvs86{padding-left:var(--group-item-padding-left, 40px)}.item.svelte-apvs86.svelte-apvs86.svelte-apvs86:active{background:var(--item-active-background, #b9daff)}.item.active.svelte-apvs86.svelte-apvs86.svelte-apvs86{background:var(--item-is-active-bg, #007aff);color:var(--item-is-active-color, #fff)}.item.first.svelte-apvs86.svelte-apvs86.svelte-apvs86{border-radius:var(--item-first-border-radius, 4px 4px 0 0)}.item.hover.svelte-apvs86.svelte-apvs86.svelte-apvs86:not(.active){background:var(--item-hover-bg, #e7f2ff);color:var(--item-hover-color, inherit)}.item.not-selectable.svelte-apvs86.svelte-apvs86.svelte-apvs86,.item.hover.item.not-selectable.svelte-apvs86.svelte-apvs86.svelte-apvs86,.item.active.item.not-selectable.svelte-apvs86.svelte-apvs86.svelte-apvs86,.item.not-selectable.svelte-apvs86.svelte-apvs86.svelte-apvs86:active{color:var(--item-is-not-selectable-color, #999);background:transparent}.required.svelte-apvs86.svelte-apvs86.svelte-apvs86{opacity:0;z-index:-1;position:absolute;top:0;left:0;bottom:0;right:0}",
  map: null
};
function convertStringItemsToObjects(_items) {
  return _items.map((item, index) => {
    return { index, value: item, label: `${item}` };
  });
}
function isItemFirst(itemIndex) {
  return itemIndex === 0;
}
const Select = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let hasValue;
  let hideSelectedItem;
  let showClear;
  let placeholderText;
  let ariaSelection;
  let ariaContext;
  let filteredItems;
  let $$slots = compute_slots(slots);
  const dispatch = createEventDispatcher();
  let { justValue = null } = $$props;
  let { filter: filter$1 = filter } = $$props;
  let { getItems: getItems$1 = getItems } = $$props;
  let { id = null } = $$props;
  let { name = null } = $$props;
  let { container = void 0 } = $$props;
  let { input = void 0 } = $$props;
  let { multiple = false } = $$props;
  let { multiFullItemClearable = false } = $$props;
  let { disabled = false } = $$props;
  let { focused = false } = $$props;
  let { value = null } = $$props;
  let { filterText = "" } = $$props;
  let { placeholder = "Please select" } = $$props;
  let { placeholderAlwaysShow = false } = $$props;
  let { items = null } = $$props;
  let { label = "label" } = $$props;
  let { itemFilter = (label2, filterText2, option) => `${label2}`.toLowerCase().includes(filterText2.toLowerCase()) } = $$props;
  let { groupBy = void 0 } = $$props;
  let { groupFilter = (groups) => groups } = $$props;
  let { groupHeaderSelectable = false } = $$props;
  let { itemId = "value" } = $$props;
  let { loadOptions = void 0 } = $$props;
  let { containerStyles = "" } = $$props;
  let { hasError = false } = $$props;
  let { filterSelectedItems = true } = $$props;
  let { required = false } = $$props;
  let { closeListOnChange = true } = $$props;
  let { createGroupHeaderItem = (groupValue, item) => {
    return { value: groupValue, [label]: groupValue };
  } } = $$props;
  const getFilteredItems = () => {
    return filteredItems;
  };
  let { searchable = true } = $$props;
  let { inputStyles = "" } = $$props;
  let { clearable = true } = $$props;
  let { loading = false } = $$props;
  let { listOpen = false } = $$props;
  let timeout;
  let { debounce = (fn, wait = 1) => {
    clearTimeout(timeout);
    timeout = setTimeout(fn, wait);
  } } = $$props;
  let { debounceWait = 300 } = $$props;
  let { hideEmptyState = false } = $$props;
  let { inputAttributes = {} } = $$props;
  let { listAutoWidth = true } = $$props;
  let { showChevron = false } = $$props;
  let { listOffset = 5 } = $$props;
  let { hoverItemIndex = 0 } = $$props;
  let { floatingConfig = {} } = $$props;
  let { class: containerClasses = "" } = $$props;
  let activeValue;
  let prev_value;
  let prev_filterText;
  function setValue() {
    if (typeof value === "string") {
      let item = (items || []).find((item2) => item2[itemId] === value);
      value = item || { [itemId]: value, label: value };
    } else if (multiple && Array.isArray(value) && value.length > 0) {
      value = value.map((item) => typeof item === "string" ? { value: item, label: item } : item);
    }
  }
  let _inputAttributes;
  function assignInputAttributes() {
    _inputAttributes = Object.assign(
      {
        autocapitalize: "none",
        autocomplete: "off",
        autocorrect: "off",
        spellcheck: false,
        tabindex: 0,
        type: "text",
        "aria-autocomplete": "list"
      },
      inputAttributes
    );
    if (id) {
      _inputAttributes["id"] = id;
    }
    if (!searchable) {
      _inputAttributes["readonly"] = true;
    }
  }
  function filterGroupedItems(_items) {
    const groupValues = [];
    const groups = {};
    _items.forEach((item) => {
      const groupValue = groupBy(item);
      if (!groupValues.includes(groupValue)) {
        groupValues.push(groupValue);
        groups[groupValue] = [];
        if (groupValue) {
          groups[groupValue].push(Object.assign(createGroupHeaderItem(groupValue, item), {
            id: groupValue,
            groupHeader: true,
            selectable: groupHeaderSelectable
          }));
        }
      }
      groups[groupValue].push(Object.assign({ groupItem: !!groupValue }, item));
    });
    const sortedGroupedItems = [];
    groupFilter(groupValues).forEach((groupValue) => {
      if (groups[groupValue])
        sortedGroupedItems.push(...groups[groupValue]);
    });
    return sortedGroupedItems;
  }
  function dispatchSelectedItem() {
    if (multiple) {
      if (JSON.stringify(value) !== JSON.stringify(prev_value)) {
        if (checkValueForDuplicates()) {
          dispatch("input", value);
        }
      }
      return;
    }
    {
      dispatch("input", value);
    }
  }
  function setupMulti() {
    if (value) {
      if (Array.isArray(value)) {
        value = [...value];
      } else {
        value = [value];
      }
    }
  }
  function setValueIndexAsHoverIndex() {
    const valueIndex = filteredItems.findIndex((i) => {
      return i[itemId] === value[itemId];
    });
    checkHoverSelectable(valueIndex, true);
  }
  function dispatchHover(i) {
    dispatch("hoverItem", i);
  }
  function checkHoverSelectable(startingIndex = 0, ignoreGroup) {
    hoverItemIndex = startingIndex < 0 ? 0 : startingIndex;
    if (!ignoreGroup && groupBy && filteredItems[hoverItemIndex] && !filteredItems[hoverItemIndex].selectable) {
      setHoverIndex(1);
    }
  }
  function setupFilterText() {
    if (!loadOptions && filterText.length === 0)
      return;
    if (loadOptions) {
      debounce(
        async function() {
          loading = true;
          let res = await getItems$1({
            dispatch,
            loadOptions,
            convertStringItemsToObjects,
            filterText
          });
          if (res) {
            loading = res.loading;
            listOpen = listOpen ? res.listOpen : filterText.length > 0 ? true : false;
            focused = listOpen && res.focused;
            items = groupBy ? filterGroupedItems(res.filteredItems) : res.filteredItems;
          } else {
            loading = false;
            focused = true;
            listOpen = true;
          }
        },
        debounceWait
      );
    } else {
      listOpen = true;
      if (multiple) {
        activeValue = void 0;
      }
    }
  }
  function handleFilterEvent(items2) {
    if (listOpen)
      dispatch("filter", items2);
  }
  function computeJustValue() {
    if (multiple)
      return value ? value.map((item) => item[itemId]) : null;
    return value ? value[itemId] : value;
  }
  function checkValueForDuplicates() {
    let noDuplicates = true;
    if (value) {
      const ids = [];
      const uniqueValues = [];
      value.forEach((val) => {
        if (!ids.includes(val[itemId])) {
          ids.push(val[itemId]);
          uniqueValues.push(val);
        } else {
          noDuplicates = false;
        }
      });
      if (!noDuplicates)
        value = uniqueValues;
    }
    return noDuplicates;
  }
  function findItem(selection) {
    let matchTo = selection ? selection[itemId] : value[itemId];
    return items.find((item) => item[itemId] === matchTo);
  }
  function updateValueDisplay(items2) {
    if (!items2 || items2.length === 0 || items2.some((item) => typeof item !== "object"))
      return;
    if (!value || (multiple ? value.some((selection) => !selection || !selection[itemId]) : !value[itemId]))
      return;
    if (Array.isArray(value)) {
      value = value.map((selection) => findItem(selection) || selection);
    } else {
      value = findItem() || value;
    }
  }
  function handleFocus(e) {
    if (focused && input === document?.activeElement)
      return;
    if (e)
      dispatch("focus", e);
    input.focus();
    focused = true;
  }
  function handleClear() {
    dispatch("clear", value);
    value = void 0;
    closeList();
    handleFocus();
  }
  function closeList() {
    filterText = "";
    listOpen = false;
  }
  let { ariaValues = (values) => {
    return `Option ${values}, selected.`;
  } } = $$props;
  let { ariaListOpen = (label2, count) => {
    return `You are currently focused on option ${label2}. There are ${count} results available.`;
  } } = $$props;
  let { ariaFocused = () => {
    return `Select is focused, type to refine list, press down to open the menu.`;
  } } = $$props;
  function handleAriaSelection(_multiple) {
    let selected = void 0;
    if (_multiple && value.length > 0) {
      selected = value.map((v) => v[label]).join(", ");
    } else {
      selected = value[label];
    }
    return ariaValues(selected);
  }
  function handleAriaContent() {
    if (!filteredItems || filteredItems.length === 0)
      return "";
    let _item = filteredItems[hoverItemIndex];
    if (listOpen && _item) {
      let count = filteredItems ? filteredItems.length : 0;
      return ariaListOpen(_item[label], count);
    } else {
      return ariaFocused();
    }
  }
  let list = null;
  onDestroy(() => {
  });
  function setHoverIndex(increment) {
    let selectableFilteredItems = filteredItems.filter((item) => !Object.hasOwn(item, "selectable") || item.selectable === true);
    if (selectableFilteredItems.length === 0) {
      return hoverItemIndex = 0;
    }
    if (increment > 0 && hoverItemIndex === filteredItems.length - 1) {
      hoverItemIndex = 0;
    } else if (increment < 0 && hoverItemIndex === 0) {
      hoverItemIndex = filteredItems.length - 1;
    } else {
      hoverItemIndex = hoverItemIndex + increment;
    }
    const hover = filteredItems[hoverItemIndex];
    if (hover && hover.selectable === false) {
      if (increment === 1 || increment === -1)
        setHoverIndex(increment);
      return;
    }
  }
  function isItemActive(item, value2, itemId2) {
    if (multiple)
      return;
    return value2 && value2[itemId2] === item[itemId2];
  }
  function setListWidth() {
    const { width } = container.getBoundingClientRect();
    list.style.width = listAutoWidth ? width + "px" : "auto";
  }
  let _floatingConfig = {
    strategy: "absolute",
    placement: "bottom-start",
    middleware: [offset(listOffset), flip(), shift()],
    autoUpdate: false
  };
  const [floatingRef, floatingContent, floatingUpdate] = createFloatingActions(_floatingConfig);
  let prefloat = true;
  function listMounted(list2, listOpen2) {
    if (!list2 || !listOpen2)
      return prefloat = true;
    setTimeout(
      () => {
        prefloat = false;
      },
      0
    );
  }
  if ($$props.justValue === void 0 && $$bindings.justValue && justValue !== void 0)
    $$bindings.justValue(justValue);
  if ($$props.filter === void 0 && $$bindings.filter && filter$1 !== void 0)
    $$bindings.filter(filter$1);
  if ($$props.getItems === void 0 && $$bindings.getItems && getItems$1 !== void 0)
    $$bindings.getItems(getItems$1);
  if ($$props.id === void 0 && $$bindings.id && id !== void 0)
    $$bindings.id(id);
  if ($$props.name === void 0 && $$bindings.name && name !== void 0)
    $$bindings.name(name);
  if ($$props.container === void 0 && $$bindings.container && container !== void 0)
    $$bindings.container(container);
  if ($$props.input === void 0 && $$bindings.input && input !== void 0)
    $$bindings.input(input);
  if ($$props.multiple === void 0 && $$bindings.multiple && multiple !== void 0)
    $$bindings.multiple(multiple);
  if ($$props.multiFullItemClearable === void 0 && $$bindings.multiFullItemClearable && multiFullItemClearable !== void 0)
    $$bindings.multiFullItemClearable(multiFullItemClearable);
  if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
    $$bindings.disabled(disabled);
  if ($$props.focused === void 0 && $$bindings.focused && focused !== void 0)
    $$bindings.focused(focused);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.filterText === void 0 && $$bindings.filterText && filterText !== void 0)
    $$bindings.filterText(filterText);
  if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0)
    $$bindings.placeholder(placeholder);
  if ($$props.placeholderAlwaysShow === void 0 && $$bindings.placeholderAlwaysShow && placeholderAlwaysShow !== void 0)
    $$bindings.placeholderAlwaysShow(placeholderAlwaysShow);
  if ($$props.items === void 0 && $$bindings.items && items !== void 0)
    $$bindings.items(items);
  if ($$props.label === void 0 && $$bindings.label && label !== void 0)
    $$bindings.label(label);
  if ($$props.itemFilter === void 0 && $$bindings.itemFilter && itemFilter !== void 0)
    $$bindings.itemFilter(itemFilter);
  if ($$props.groupBy === void 0 && $$bindings.groupBy && groupBy !== void 0)
    $$bindings.groupBy(groupBy);
  if ($$props.groupFilter === void 0 && $$bindings.groupFilter && groupFilter !== void 0)
    $$bindings.groupFilter(groupFilter);
  if ($$props.groupHeaderSelectable === void 0 && $$bindings.groupHeaderSelectable && groupHeaderSelectable !== void 0)
    $$bindings.groupHeaderSelectable(groupHeaderSelectable);
  if ($$props.itemId === void 0 && $$bindings.itemId && itemId !== void 0)
    $$bindings.itemId(itemId);
  if ($$props.loadOptions === void 0 && $$bindings.loadOptions && loadOptions !== void 0)
    $$bindings.loadOptions(loadOptions);
  if ($$props.containerStyles === void 0 && $$bindings.containerStyles && containerStyles !== void 0)
    $$bindings.containerStyles(containerStyles);
  if ($$props.hasError === void 0 && $$bindings.hasError && hasError !== void 0)
    $$bindings.hasError(hasError);
  if ($$props.filterSelectedItems === void 0 && $$bindings.filterSelectedItems && filterSelectedItems !== void 0)
    $$bindings.filterSelectedItems(filterSelectedItems);
  if ($$props.required === void 0 && $$bindings.required && required !== void 0)
    $$bindings.required(required);
  if ($$props.closeListOnChange === void 0 && $$bindings.closeListOnChange && closeListOnChange !== void 0)
    $$bindings.closeListOnChange(closeListOnChange);
  if ($$props.createGroupHeaderItem === void 0 && $$bindings.createGroupHeaderItem && createGroupHeaderItem !== void 0)
    $$bindings.createGroupHeaderItem(createGroupHeaderItem);
  if ($$props.getFilteredItems === void 0 && $$bindings.getFilteredItems && getFilteredItems !== void 0)
    $$bindings.getFilteredItems(getFilteredItems);
  if ($$props.searchable === void 0 && $$bindings.searchable && searchable !== void 0)
    $$bindings.searchable(searchable);
  if ($$props.inputStyles === void 0 && $$bindings.inputStyles && inputStyles !== void 0)
    $$bindings.inputStyles(inputStyles);
  if ($$props.clearable === void 0 && $$bindings.clearable && clearable !== void 0)
    $$bindings.clearable(clearable);
  if ($$props.loading === void 0 && $$bindings.loading && loading !== void 0)
    $$bindings.loading(loading);
  if ($$props.listOpen === void 0 && $$bindings.listOpen && listOpen !== void 0)
    $$bindings.listOpen(listOpen);
  if ($$props.debounce === void 0 && $$bindings.debounce && debounce !== void 0)
    $$bindings.debounce(debounce);
  if ($$props.debounceWait === void 0 && $$bindings.debounceWait && debounceWait !== void 0)
    $$bindings.debounceWait(debounceWait);
  if ($$props.hideEmptyState === void 0 && $$bindings.hideEmptyState && hideEmptyState !== void 0)
    $$bindings.hideEmptyState(hideEmptyState);
  if ($$props.inputAttributes === void 0 && $$bindings.inputAttributes && inputAttributes !== void 0)
    $$bindings.inputAttributes(inputAttributes);
  if ($$props.listAutoWidth === void 0 && $$bindings.listAutoWidth && listAutoWidth !== void 0)
    $$bindings.listAutoWidth(listAutoWidth);
  if ($$props.showChevron === void 0 && $$bindings.showChevron && showChevron !== void 0)
    $$bindings.showChevron(showChevron);
  if ($$props.listOffset === void 0 && $$bindings.listOffset && listOffset !== void 0)
    $$bindings.listOffset(listOffset);
  if ($$props.hoverItemIndex === void 0 && $$bindings.hoverItemIndex && hoverItemIndex !== void 0)
    $$bindings.hoverItemIndex(hoverItemIndex);
  if ($$props.floatingConfig === void 0 && $$bindings.floatingConfig && floatingConfig !== void 0)
    $$bindings.floatingConfig(floatingConfig);
  if ($$props.class === void 0 && $$bindings.class && containerClasses !== void 0)
    $$bindings.class(containerClasses);
  if ($$props.handleClear === void 0 && $$bindings.handleClear && handleClear !== void 0)
    $$bindings.handleClear(handleClear);
  if ($$props.ariaValues === void 0 && $$bindings.ariaValues && ariaValues !== void 0)
    $$bindings.ariaValues(ariaValues);
  if ($$props.ariaListOpen === void 0 && $$bindings.ariaListOpen && ariaListOpen !== void 0)
    $$bindings.ariaListOpen(ariaListOpen);
  if ($$props.ariaFocused === void 0 && $$bindings.ariaFocused && ariaFocused !== void 0)
    $$bindings.ariaFocused(ariaFocused);
  $$result.css.add(css$D);
  {
    if (value)
      setValue();
  }
  {
    if (inputAttributes || !searchable)
      assignInputAttributes();
  }
  {
    if (multiple)
      setupMulti();
  }
  {
    if (multiple && value && value.length > 1)
      checkValueForDuplicates();
  }
  {
    if (value)
      dispatchSelectedItem();
  }
  {
    if (!value && multiple && prev_value)
      dispatch("input", value);
  }
  {
    if (!focused && input)
      closeList();
  }
  {
    if (filterText !== prev_filterText)
      setupFilterText();
  }
  filteredItems = filter$1({
    loadOptions,
    filterText,
    items,
    multiple,
    value,
    itemId,
    groupBy,
    label,
    filterSelectedItems,
    itemFilter,
    convertStringItemsToObjects,
    filterGroupedItems
  });
  {
    if (!multiple && listOpen && value && filteredItems)
      setValueIndexAsHoverIndex();
  }
  {
    if (listOpen && multiple)
      hoverItemIndex = 0;
  }
  {
    if (filterText)
      hoverItemIndex = 0;
  }
  {
    dispatchHover(hoverItemIndex);
  }
  hasValue = multiple ? value && value.length > 0 : value;
  hideSelectedItem = hasValue && filterText.length > 0;
  showClear = hasValue && clearable && !disabled && !loading;
  placeholderText = placeholderAlwaysShow && multiple ? placeholder : multiple && value?.length === 0 ? placeholder : value ? "" : placeholder;
  ariaSelection = value ? handleAriaSelection(multiple) : "";
  ariaContext = handleAriaContent();
  {
    updateValueDisplay(items);
  }
  justValue = computeJustValue();
  {
    if (!multiple && prev_value && !value)
      dispatch("input", value);
  }
  {
    if (listOpen && filteredItems && !multiple && !value)
      checkHoverSelectable();
  }
  {
    handleFilterEvent(filteredItems);
  }
  {
    if (container && floatingConfig?.autoUpdate === void 0) {
      _floatingConfig.autoUpdate = true;
    }
  }
  {
    if (container && floatingConfig)
      floatingUpdate(Object.assign(_floatingConfig, floatingConfig));
  }
  {
    listMounted(list, listOpen);
  }
  {
    if (listOpen && container && list)
      setListWidth();
  }
  {
    if (input && listOpen && !focused)
      handleFocus();
  }
  return ` <div class="${[
    "svelte-select " + escape(containerClasses, true) + " svelte-apvs86",
    (multiple ? "multi" : "") + " " + (disabled ? "disabled" : "") + " " + (focused ? "focused" : "") + " " + (listOpen ? "list-open" : "") + " " + (showChevron ? "show-chevron" : "") + " " + (hasError ? "error" : "")
  ].join(" ").trim()}"${add_attribute("style", containerStyles, 0)}${add_attribute("this", container, 0)}>${listOpen ? `<div class="${["svelte-select-list svelte-apvs86", prefloat ? "prefloat" : ""].join(" ").trim()}"${add_attribute("this", list, 0)}>${$$slots["list-prepend"] ? `${slots["list-prepend"] ? slots["list-prepend"]({}) : ``}` : ``} ${$$slots.list ? `${slots.list ? slots.list({ filteredItems }) : ``}` : `${filteredItems.length > 0 ? `${each(filteredItems, (item, i) => {
    return `<div class="list-item svelte-apvs86" tabindex="-1"><div class="${[
      "item svelte-apvs86",
      (item.groupHeader ? "list-group-title" : "") + " " + (isItemActive(item, value, itemId) ? "active" : "") + " " + (isItemFirst(i) ? "first" : "") + " " + (hoverItemIndex === i ? "hover" : "") + " " + (item.groupItem ? "group-item" : "") + " " + (item?.selectable === false ? "not-selectable" : "")
    ].join(" ").trim()}">${slots.item ? slots.item({ item, index: i }) : ` ${escape(item?.[label])} `}</div> </div>`;
  })}` : `${!hideEmptyState ? `${slots.empty ? slots.empty({}) : ` <div class="empty svelte-apvs86" data-svelte-h="svelte-16ffy3h">No options</div> `}` : ``}`}`} ${$$slots["list-append"] ? `${slots["list-append"] ? slots["list-append"]({}) : ``}` : ``}</div>` : ``} <span aria-live="polite" aria-atomic="false" aria-relevant="additions text" class="a11y-text svelte-apvs86">${focused ? `<span id="aria-selection" class="svelte-apvs86">${escape(ariaSelection)}</span> <span id="aria-context" class="svelte-apvs86">${escape(ariaContext)}</span>` : ``}</span> <div class="prepend svelte-apvs86">${slots.prepend ? slots.prepend({}) : ``}</div> <div class="value-container svelte-apvs86">${hasValue ? `${multiple ? `${each(value, (item, i) => {
    return `<div class="${[
      "multi-item svelte-apvs86",
      (activeValue === i ? "active" : "") + " " + (disabled ? "disabled" : "")
    ].join(" ").trim()}"><span class="multi-item-text svelte-apvs86">${slots.selection ? slots.selection({ selection: item, index: i }) : ` ${escape(item[label])} `}</span> ${!disabled && !multiFullItemClearable && ClearIcon ? `<div class="multi-item-clear svelte-apvs86">${slots["multi-clear-icon"] ? slots["multi-clear-icon"]({}) : ` ${validate_component(ClearIcon, "ClearIcon").$$render($$result, {}, {}, {})} `} </div>` : ``} </div>`;
  })}` : `<div class="${[
    "selected-item svelte-apvs86",
    hideSelectedItem ? "hide-selected-item" : ""
  ].join(" ").trim()}">${slots.selection ? slots.selection({ selection: value }) : ` ${escape(value[label])} `}</div>`}` : ``} <input${spread(
    [
      { readonly: !searchable || null },
      escape_object(_inputAttributes),
      {
        placeholder: escape_attribute_value(placeholderText)
      },
      {
        style: escape_attribute_value(inputStyles)
      },
      { disabled: disabled || null }
    ],
    { classes: "svelte-apvs86" }
  )}${add_attribute("this", input, 0)}${add_attribute("value", filterText, 0)}></div> <div class="indicators svelte-apvs86">${loading ? `<div class="icon loading svelte-apvs86" aria-hidden="true">${slots["loading-icon"] ? slots["loading-icon"]({}) : ` ${validate_component(LoadingIcon, "LoadingIcon").$$render($$result, {}, {}, {})} `}</div>` : ``} ${showClear ? `<button type="button" class="icon clear-select svelte-apvs86">${slots["clear-icon"] ? slots["clear-icon"]({}) : ` ${validate_component(ClearIcon, "ClearIcon").$$render($$result, {}, {}, {})} `}</button>` : ``} ${showChevron ? `<div class="icon chevron svelte-apvs86" aria-hidden="true">${slots["chevron-icon"] ? slots["chevron-icon"]({ listOpen }) : ` ${validate_component(ChevronIcon, "ChevronIcon").$$render($$result, {}, {}, {})} `}</div>` : ``}</div> ${slots["input-hidden"] ? slots["input-hidden"]({ value }) : ` <input${add_attribute("name", name, 0)} type="hidden"${add_attribute("value", value ? JSON.stringify(value) : null, 0)} class="svelte-apvs86"> `} ${required && (!value || value.length === 0) ? `${slots.required ? slots.required({ value }) : ` <select class="required svelte-apvs86" required tabindex="-1" aria-hidden="true"></select> `}` : ``} </div>`;
});
const css$C = {
  code: `.tabs.svelte-1xgjha9.svelte-1xgjha9{align-items:flex-end;display:flex;gap:.25rem}.tabs.svelte-1xgjha9 .tab.svelte-1xgjha9{background:var(--color-blue-spielbrett);border-radius:var(--radius-md);border-bottom-left-radius:0;border-bottom-right-radius:0;display:flex;font-family:var(--font-display);font-size:var(--scale-2);gap:.5rem;line-height:150%;padding:.38rem 1.5rem;text-transform:uppercase;white-space:nowrap}.tabs.svelte-1xgjha9 .tab.svelte-1xgjha9:after{background:url('data:image/svg+xml;utf8,<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18Z" fill="#1B253A"/></svg>');content:"";display:block;height:1.5rem;width:1.5rem}.tabs.svelte-1xgjha9 .tab.active.svelte-1xgjha9{font-size:var(--scale-3);line-height:2.25rem}.content.svelte-1xgjha9.svelte-1xgjha9,.tabs.svelte-1xgjha9 .tab.active.svelte-1xgjha9{background:var(--color-bg-strong-secondary);color:var(--color-text-onstrong-secondary)}.content.svelte-1xgjha9.svelte-1xgjha9{border-radius:var(--radius-md);border-top-left-radius:0;border-top-right-radius:0;display:flex;gap:1rem;min-height:10rem;padding:1rem 1.5rem}`,
  map: null
};
const PlayerConfiguratorCharacter = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let side;
  let characters;
  let activeCharacter;
  let { player } = $$props;
  getGameContext();
  if ($$props.player === void 0 && $$bindings.player && player !== void 0)
    $$bindings.player(player);
  $$result.css.add(css$C);
  side = player.id === "attacker" ? "attack" : "defense";
  characters = CHARACTERS.filter((character) => character.side === side);
  activeCharacter = characters.find((character) => character.id === player.character);
  return `<div class="roles"><div class="tabs svelte-1xgjha9">${each(characters, (character) => {
    return `<button class="${[
      "unstyled tab svelte-1xgjha9",
      player.character === character.id ? "active" : ""
    ].join(" ").trim()}">${escape(character.name)} </button>`;
  })}</div> <div class="content svelte-1xgjha9"><div>${validate_component(Heading, "Heading").$$render($$result, { spacing: "none", size: "sm" }, {}, {
    default: () => {
      return `Beschreibung`;
    }
  })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { spacing: "none" }, {}, {
    default: () => {
      return `${activeCharacter ? `${escape(activeCharacter.description)}` : ``}`;
    }
  })}</div> ${activeCharacter && isDefenseCharacter(activeCharacter) ? `<div>${validate_component(Heading, "Heading").$$render($$result, { spacing: "none", size: "sm" }, {}, {
    default: () => {
      return `Fähigkeit`;
    }
  })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { spacing: "none" }, {}, {
    default: () => {
      return `${escape(ABILITIES[activeCharacter.ability])}`;
    }
  })}</div>` : ``}</div> </div>`;
});
const css$B = {
  code: ".configurator.svelte-dcfhai.svelte-dcfhai{grid-gap:1rem;align-content:center;display:grid;gap:1rem;justify-content:center;place-content:center}.user-select.svelte-dcfhai.svelte-dcfhai{width:36rem}.faces.svelte-dcfhai.svelte-dcfhai{display:flex;gap:1rem;margin-top:1rem}.faces.svelte-dcfhai .face.svelte-dcfhai{background:var(--color-blue-spielbrett);border:1px solid transparent;border-radius:var(--radius-md);height:5rem;padding:.25rem;width:5rem}.faces.svelte-dcfhai .face.svelte-dcfhai svg{height:100%;width:100%}.faces.svelte-dcfhai .face.active.svelte-dcfhai{background:var(--color-bg-strong);color:var(--color-text-onstrong)}.faces-actions.svelte-dcfhai.svelte-dcfhai{align-items:center;display:flex;gap:1rem;justify-content:space-between}",
  map: null
};
const PlayerConfigurator = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let userId;
  let faceId;
  let character;
  let userItems;
  let $usersOnThisSide, $$unsubscribe_usersOnThisSide;
  let $player, $$unsubscribe_player;
  let $canUpdate, $$unsubscribe_canUpdate;
  let { playerId } = $$props;
  const side = isDefenderId(playerId) ? "defense" : "attack";
  const { machine: machine2 } = getGameContext();
  const player = useSelector(machine2.service, ({ context }) => getPlayer(playerId, context));
  $$unsubscribe_player = subscribe(player, (value) => $player = value);
  const usersOnThisSide = useSelector(machine2.service, ({ context }) => context.users.filter((user) => user.side === side));
  $$unsubscribe_usersOnThisSide = subscribe(usersOnThisSide, (value) => $usersOnThisSide = value);
  const canUpdate = useSelector(machine2.service, (snapshot) => snapshot.can({
    type: "assign role",
    character,
    playerId,
    playingUserId: userId,
    faceId
  }));
  $$unsubscribe_canUpdate = subscribe(canUpdate, (value) => $canUpdate = value);
  if ($$props.playerId === void 0 && $$bindings.playerId && playerId !== void 0)
    $$bindings.playerId(playerId);
  $$result.css.add(css$B);
  userId = $player.userId;
  faceId = $player.faceId;
  character = $player.character;
  userItems = $usersOnThisSide.map((user) => ({ value: user.id, label: user.name }));
  $$unsubscribe_usersOnThisSide();
  $$unsubscribe_player();
  $$unsubscribe_canUpdate();
  return `${validate_component(Dialog, "Dialog").$$render($$result, { title: "Rolle bestimmen" }, {}, {
    default: () => {
      return `<div class="configurator svelte-dcfhai">${validate_component(Heading, "Heading").$$render($$result, { size: "md", spacing: "none" }, {}, {
        default: () => {
          return `1. Bestimme eine:n Spieler:in`;
        }
      })} <div class="user-select svelte-dcfhai">${validate_component(Select, "Select").$$render(
        $$result,
        {
          items: userItems,
          value: userId,
          required: true
        },
        {},
        {}
      )}</div> <div class="spacer"></div> ${validate_component(Heading, "Heading").$$render($$result, { size: "md", spacing: "none" }, {}, {
        default: () => {
          return `2. Wähle einen Charakter aus`;
        }
      })} ${validate_component(PlayerConfiguratorCharacter, "PlayerConfiguratorCharacter").$$render($$result, { player: $player }, {}, {})} <div class="spacer"></div> <div class="faces-actions svelte-dcfhai"><div>${validate_component(Heading, "Heading").$$render($$result, { size: "md", spacing: "none" }, {}, {
        default: () => {
          return `3. Wähle einen Avatar für deinen Charakter`;
        }
      })} <div class="faces svelte-dcfhai">${each(FACES.slice(0, 3), (face) => {
        return `<button ${!$canUpdate ? "disabled" : ""} class="${["unstyled face svelte-dcfhai", face.id === faceId ? "active" : ""].join(" ").trim()}">${validate_component(Face, "Face").$$render($$result, { faceId: face.id }, {}, {})} </button>`;
      })}</div></div> ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render($$result, { primary: true, disabled: !$canUpdate }, {}, {
            default: () => {
              return `Bestätigen und weiter`;
            }
          })}`;
        }
      })}</div></div>`;
    }
  })}`;
});
const css$A = {
  code: "section.svelte-qevcdl.svelte-qevcdl{background:var(--color-bg-secondary);border-radius:var(--radius-md);margin-top:1.5rem;padding:1rem 1.25rem}.players.svelte-qevcdl.svelte-qevcdl{grid-gap:1rem;align-items:start;display:grid;grid-template-columns:repeat(4,1fr);margin-top:1.25rem}.players.svelte-qevcdl .player.svelte-qevcdl{grid-gap:1rem;background:var(--color-bg);border-radius:var(--radius-md);display:grid;gap:1rem;justify-items:center;padding:1.25rem}.players.svelte-qevcdl .player .face.svelte-qevcdl{height:6rem;width:6rem}",
  map: null
};
const AssigningRoles = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $user, $$unsubscribe_user;
  let $players, $$unsubscribe_players;
  let $users, $$unsubscribe_users;
  let $canEdit, $$unsubscribe_canEdit;
  let $canContinue, $$unsubscribe_canContinue;
  let $editingPlayerId, $$unsubscribe_editingPlayerId;
  const { machine: machine2, user } = getGameContext();
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  const editingPlayerId = useSelector(machine2.service, ({ context }) => ($user.side === "attack" ? context.attack : context.defense).editingPlayerId);
  $$unsubscribe_editingPlayerId = subscribe(editingPlayerId, (value) => $editingPlayerId = value);
  const players = useSelector(machine2.service, ({ context }) => $user.side === "attack" ? [context.attack.attacker] : context.defense.defenders);
  $$unsubscribe_players = subscribe(players, (value) => $players = value);
  const canEdit = useSelector(machine2.service, (snapshot) => snapshot.can({
    type: "start editing player",
    playerId: "attacker"
  }));
  $$unsubscribe_canEdit = subscribe(canEdit, (value) => $canEdit = value);
  const canContinue = useSelector(machine2.service, (snapshot) => snapshot.can({ type: "next step" }));
  $$unsubscribe_canContinue = subscribe(canContinue, (value) => $canContinue = value);
  const users = useSelector(machine2.service, ({ context }) => context.users);
  $$unsubscribe_users = subscribe(users, (value) => $users = value);
  $$result.css.add(css$A);
  $$unsubscribe_user();
  $$unsubscribe_players();
  $$unsubscribe_users();
  $$unsubscribe_canEdit();
  $$unsubscribe_canContinue();
  $$unsubscribe_editingPlayerId();
  return `${validate_component(Heading, "Heading").$$render($$result, { separator: true }, {}, {
    info: () => {
      return `Schritt 3 von 3`;
    },
    default: () => {
      return `Rollenverteilung`;
    }
  })} <section class="svelte-qevcdl">${validate_component(Heading, "Heading").$$render($$result, { centered: true }, {}, {
    default: () => {
      return `${escape($user.side === "attack" ? "Angriff" : "Verteidigung")}`;
    }
  })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { width: "full" }, {}, {
    default: () => {
      return `Die Rollenverteilung wird von der Spielleitung übernommen. Es müssen für jede Rolle ein:e
    Spieler:in bestimmt und bestätigt werden. Die restlichen Teilnehmenden können das Spielgeschehen
    beobachten und das Team beraten.`;
    }
  })} <div class="players svelte-qevcdl">${each($players, (player, i) => {
    return `<div class="player svelte-qevcdl">${player.isConfigured ? `${validate_component(Heading, "Heading").$$render(
      $$result,
      {
        centered: true,
        spacing: "none",
        size: "sm"
      },
      {},
      {
        default: () => {
          return `${escape(getCharacter(player.character).name)}`;
        }
      }
    )} ${escape($users.find((user2) => user2.id === player.userId)?.name)} <div class="face svelte-qevcdl">${validate_component(Face, "Face").$$render($$result, { faceId: player.faceId }, {}, {})} </div>` : ``} ${validate_component(Button, "Button").$$render($$result, { size: "small", disabled: !$canEdit }, {}, {
      default: () => {
        return `Rolle ${escape(player.isConfigured ? "wechseln" : `${i + 1} bestimmen`)} `;
      }
    })} </div>`;
  })}</div></section> ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
    default: () => {
      return `${validate_component(Button, "Button").$$render(
        $$result,
        {
          primary: true,
          disabled: !$canContinue,
          disabledReason: $user.isAdmin ? "Alle Rollen müssen zugewiesen sein" : "Nur Administrator:innen dürfen bestätigen"
        },
        {},
        {
          default: () => {
            return `Weiter zum Spiel`;
          }
        }
      )}`;
    }
  })} ${$editingPlayerId !== void 0 ? ` ${validate_component(PlayerConfigurator, "PlayerConfigurator").$$render($$result, { playerId: $editingPlayerId }, {}, {})}` : ``}`;
});
const css$z = {
  code: ".waiting.svelte-uz1j5t{align-content:center;display:grid;height:100%;justify-content:center;place-content:center;width:100%}",
  map: null
};
const Lobby = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $section, $$unsubscribe_section;
  const { machine: machine2 } = getGameContext();
  const section = useSelector(machine2.service, (snapshot) => {
    let section2 = void 0;
    if (snapshot.matches("Lobby.Assigning sides")) {
      section2 = "Assigning sides";
    } else if (snapshot.matches("Lobby.Assigning roles")) {
      section2 = "Assigning roles";
    } else if (snapshot.matches("Lobby.Waiting for other side")) {
      section2 = "Waiting for other side";
    }
    return section2;
  });
  $$unsubscribe_section = subscribe(section, (value) => $section = value);
  $$result.css.add(css$z);
  $$unsubscribe_section();
  return `${$section === "Assigning sides" ? `${validate_component(AssigningSides, "AssigningSides").$$render($$result, {}, {}, {})}` : `${$section === "Assigning roles" ? `${validate_component(AssigningRoles, "AssigningRoles").$$render($$result, {}, {}, {})}` : `${$section === "Waiting for other side" ? `<div class="waiting svelte-uz1j5t">${validate_component(Heading, "Heading").$$render($$result, {}, {}, {
    default: () => {
      return `Sobald die andere Seite fertig ist, geht es weiter.`;
    }
  })}</div>` : `Unknown lobby state`}`}`}`;
});
const X = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 6L6 18M6 6l12 12"/>`}<!-- HTML_TAG_END --></svg>`;
});
const css$y = {
  code: "h2.svelte-9xqe37{font-family:var(--font-display);font-size:1.25rem;font-weight:500;margin-bottom:.5rem;text-transform:uppercase}.dialog-wrapper.svelte-9xqe37{align-content:center;display:grid;justify-content:center;padding-left:var(--player-status-width);padding-right:7.5rem;place-content:center;position:fixed;z-index:var(--layer-top)}.backdrop.svelte-9xqe37,.dialog-wrapper.svelte-9xqe37{bottom:0;left:0;right:0;top:0}.backdrop.svelte-9xqe37{background-color:var(--color-bg);opacity:.5;position:absolute}.dialog.svelte-9xqe37{background-color:#fff;border:none;border-radius:var(--radius-sm);box-shadow:0 0 30px 0 var(--color-shadow-secondary);color:#000;padding:.75rem 1.5rem;position:relative;width:28.125rem}.close-button.svelte-9xqe37{position:absolute;right:.5rem;top:.5rem}.close-button.svelte-9xqe37 svg{display:block;height:1.5rem;width:1.5rem}",
  map: null
};
const GameDialog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$slots = compute_slots(slots);
  let { title = "" } = $$props;
  createEventDispatcher();
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css$y);
  return `<div class="dialog-wrapper svelte-9xqe37">  <div class="backdrop svelte-9xqe37"></div> <div class="dialog svelte-9xqe37">${title ? `<h2 class="svelte-9xqe37">${escape(title)}</h2>` : ``} <button class="unstyled close-button svelte-9xqe37">${validate_component(X, "CloseIcon").$$render($$result, {}, {}, {})}</button> ${$$slots.default ? `<div class="content">${slots.default ? slots.default({}) : ``}</div>` : ``}</div></div> `;
});
const css$x = {
  code: '.radio-container.svelte-1ckhy6x.svelte-1ckhy6x{background:var(--color-white-80);border-radius:var(--radius-sm);cursor:pointer;display:flex;gap:.5rem;padding:.5rem;position:relative}@supports (color:color-mix(in lch,red,blue)) and (top:var(--f )){.radio-container.svelte-1ckhy6x.svelte-1ckhy6x{background:color-mix(in oklab,var(--color-white-80),transparent 60%)}}.radio-container.disabled.svelte-1ckhy6x.svelte-1ckhy6x{cursor:not-allowed;opacity:.5}.radio-container.svelte-1ckhy6x .content.svelte-1ckhy6x{background-color:var(--color-bg-strong);border-radius:var(--radius-xs);flex:1;padding:.25rem}.radio-container.svelte-1ckhy6x:not(.with-title) input.svelte-1ckhy6x{margin-top:.75rem}.radio-container.svelte-1ckhy6x .title.svelte-1ckhy6x{margin-right:1.5rem}.radio-container.with-title.svelte-1ckhy6x.svelte-1ckhy6x{flex-direction:column}.radio-container.with-title.svelte-1ckhy6x input.svelte-1ckhy6x{position:absolute;right:.5rem;top:.7rem}input.svelte-1ckhy6x.svelte-1ckhy6x{--_border-width:0.0875rem;--_size:1rem;--_checked-size:0.5rem;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:#fff;border:var(--_border-width) solid var(--color-blue-spielbrett);border-radius:var(--radius-full);height:1rem;height:var(--_size);margin:0;outline:none;position:relative;width:1rem;width:var(--_size)}input.svelte-1ckhy6x.svelte-1ckhy6x:checked{--_border-width:0.125rem}input.svelte-1ckhy6x.svelte-1ckhy6x:checked:before{background:var(--color-blue-spielbrett);border-radius:var(--radius-full);content:"";display:block;height:var(--_checked-size);left:calc((var(--_size) - var(--_border-width)*2 - var(--_checked-size))/2);position:absolute;top:calc((var(--_size) - var(--_border-width)*2 - var(--_checked-size))/2);width:var(--_checked-size)}',
  map: null
};
const RadioButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let checked;
  let $$restProps = compute_rest_props($$props, ["group", "value", "disabled"]);
  let $$slots = compute_slots(slots);
  let { group = void 0 } = $$props;
  let { value } = $$props;
  let { disabled = false } = $$props;
  if ($$props.group === void 0 && $$bindings.group && group !== void 0)
    $$bindings.group(group);
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
    $$bindings.disabled(disabled);
  $$result.css.add(css$x);
  checked = value == group;
  return `<label class="${[
    "radio-container svelte-1ckhy6x",
    ($$slots.title ? "with-title" : "") + " " + (disabled ? "disabled" : "")
  ].join(" ").trim()}"><input${spread(
    [
      { type: "radio" },
      { value: escape_attribute_value(value) },
      { checked: checked || null },
      { disabled: disabled || null },
      escape_object($$restProps)
    ],
    { classes: "svelte-1ckhy6x" }
  )}${value === group ? add_attribute("checked", true, 1) : ""}> ${$$slots.title ? `<div class="title svelte-1ckhy6x">${slots.title ? slots.title({}) : ``}</div>` : ``} <div class="content svelte-1ckhy6x">${slots.default ? slots.default({}) : ``}</div> </label>`;
});
const css$w = {
  code: ".radio-buttons.svelte-1a8teoc{grid-column-gap:.75rem;grid-row-gap:.25rem;-moz-column-gap:.75rem;column-gap:.75rem;display:grid;grid-template-columns:1fr 1fr;max-width:36rem;row-gap:.25rem}.radio-buttons.vertical.svelte-1a8teoc{grid-template-columns:1fr}",
  map: null
};
const RadioOptions = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { vertical = false } = $$props;
  if ($$props.vertical === void 0 && $$bindings.vertical && vertical !== void 0)
    $$bindings.vertical(vertical);
  $$result.css.add(css$w);
  return `<div class="${["radio-buttons svelte-1a8teoc", vertical ? "vertical" : ""].join(" ").trim()}">${slots.default ? slots.default({}) : ``} </div>`;
});
const Arrow_right = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14m-7-7l7 7l-7 7"/>`}<!-- HTML_TAG_END --></svg>`;
});
const css$v = {
  code: ".title.svelte-yfoweg.svelte-yfoweg{font-size:var(--scale-0000)}.title.svelte-yfoweg.svelte-yfoweg,button.svelte-yfoweg.svelte-yfoweg{display:block;text-align:left;white-space:nowrap;width:100%}button.svelte-yfoweg.svelte-yfoweg{padding:.5rem 1rem}button.svelte-yfoweg.svelte-yfoweg:has(.title){border-top:var(--px) solid #eee}button.svelte-yfoweg .arrow.svelte-yfoweg{opacity:0;transition:all .2s ease-out;translate:-.5rem 0}button.svelte-yfoweg .arrow.svelte-yfoweg svg{display:block}button.svelte-yfoweg.svelte-yfoweg:hover{background:rgba(213,217,227,.302)}button.svelte-yfoweg:hover:not([disabled]) .arrow.svelte-yfoweg{opacity:1;translate:0 0}.content.svelte-yfoweg.svelte-yfoweg{align-items:center;display:flex;justify-content:space-between}",
  map: null
};
const Action = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { disabled = false } = $$props;
  let { title = "" } = $$props;
  if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
    $$bindings.disabled(disabled);
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css$v);
  return `<button class="unstyled svelte-yfoweg" ${disabled ? "disabled" : ""}>${title ? `<div class="title svelte-yfoweg">${escape(title)}</div>` : ``} <div class="content svelte-yfoweg">${slots.default ? slots.default({}) : ``} <div class="arrow svelte-yfoweg">${validate_component(Arrow_right, "ArrowRight").$$render($$result, {}, {}, {})}</div></div> </button>`;
});
const createActionHandler = (action, {
  createEvent,
  enabledCheck,
  extractSelectedOption
}) => {
  const { machine: machine2 } = getGameContext();
  const inProgressEvent = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    if (isActionEventOf(gameState.lastEvent, action)) {
      return gameState.lastEvent;
    } else
      return void 0;
  });
  const isEnabled = enabledCheck ? useSelector(machine2.service, ({ context }) => {
    return enabledCheck(GameState.fromContext(context));
  }) : readable(true);
  const getActionEvent = (finalized = false) => {
    const gameState = GameState.fromContext(machine2.service.getSnapshot().context);
    return {
      type: "apply game event",
      gameEvent: {
        ...createEvent(gameState, get_store_value(internalSelectedOption)),
        finalized,
        type: "action",
        action,
        playerId: gameState.activePlayer.id
      }
    };
  };
  const internalSelectedOption = writable(void 0, () => {
    const updateFromEvent = (event) => {
      if (extractSelectedOption) {
        internalSelectedOption.set(event ? extractSelectedOption(event) : void 0);
      }
    };
    if (extractSelectedOption) {
      const event = get_store_value(inProgressEvent);
      updateFromEvent(event);
    }
    return inProgressEvent.subscribe(updateFromEvent);
  });
  const applyEventOnOptionChange = () => {
    if (!extractSelectedOption)
      return;
    const event = get_store_value(inProgressEvent);
    const eventOption = event ? extractSelectedOption(event) : void 0;
    const selectedOption2 = get_store_value(internalSelectedOption);
    if (eventOption != selectedOption2) {
      applyAction(false);
    }
  };
  const canApplyAction = useSelector(machine2.service, (state) => state.can(getActionEvent()));
  const applyAction = (finalized = false) => {
    machine2.send(getActionEvent(finalized));
  };
  const cancel = () => machine2.send({ type: "cancel game event" });
  const buttonDisabled = derived(
    [canApplyAction, internalSelectedOption],
    ([$canApplyAction, $selectedOption]) => !$canApplyAction || extractSelectedOption && $selectedOption === void 0
  );
  const buttonDisabledReason = derived(
    canApplyAction,
    ($canApplyAction) => !$canApplyAction ? "Du bist nicht am Zug" : "Bitte triff eine Auswahl"
  );
  const formAction = (form) => {
    form.addEventListener("submit", (event) => {
      event.preventDefault();
      if (get_store_value(canApplyAction) && get_store_value(isEnabled)) {
        if (!extractSelectedOption || get_store_value(internalSelectedOption) != void 0) {
          applyAction(true);
        }
      }
    });
  };
  const selectedOption = {
    subscribe: internalSelectedOption.subscribe,
    update: (updater) => {
      internalSelectedOption.update(updater);
      applyEventOnOptionChange();
    },
    set: (value) => {
      internalSelectedOption.set(value);
      applyEventOnOptionChange();
    }
  };
  return {
    isEnabled,
    applyAction,
    inProgressEvent,
    cancel,
    canApplyAction,
    selectedOption,
    formAction,
    buttonDisabled,
    buttonDisabledReason
  };
};
const css$u = {
  code: ".intro.svelte-15troph.svelte-15troph{margin-bottom:1.5rem;margin-top:0}.item-choice.svelte-15troph.svelte-15troph{display:flex;gap:.5rem}.item-choice.svelte-15troph .icon.svelte-15troph{flex-shrink:0;height:3rem;width:3rem}.item-choice.svelte-15troph .name.svelte-15troph{font-weight:700}.item-choice.svelte-15troph .content.svelte-15troph{max-height:15rem;overflow-y:auto}",
  map: null
};
const CollectItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $collectableItems, $$unsubscribe_collectableItems;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $canApplyAction, $$unsubscribe_canApplyAction;
  let $selectedOption, $$unsubscribe_selectedOption;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { machine: machine2 } = getGameContext();
  const { inProgressEvent, applyAction, cancel, canApplyAction, selectedOption, formAction, buttonDisabled, buttonDisabledReason } = createActionHandler("collect", {
    extractSelectedOption: (event) => event.itemId,
    createEvent: (gameState, itemId) => ({
      itemId,
      position: gameState.activePlayerPosition
    })
  });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_canApplyAction = subscribe(canApplyAction, (value) => $canApplyAction = value);
  $$unsubscribe_selectedOption = subscribe(selectedOption, (value) => $selectedOption = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  const collectableItems = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    const playerPosition = gameState.activePlayerPosition;
    return gameState.getItemsForCoordinate(playerPosition).filter((item) => isItemIdOfSide(item.item.id, gameState.activeSide));
  });
  $$unsubscribe_collectableItems = subscribe(collectableItems, (value) => $collectableItems = value);
  $$result.css.add(css$u);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `${validate_component(Action, "Action").$$render($$result, { disabled: $collectableItems.length === 0 }, {}, {
      default: () => {
        return `Gegenstand einsammeln`;
      }
    })} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Gegenstand einsammeln" }, {}, {
      default: () => {
        return `<p class="intro text-xs svelte-15troph" data-svelte-h="svelte-1q9aqq4">Bitte wähle einen Gegenstand aus</p> <form>${validate_component(RadioOptions, "RadioOptions").$$render($$result, { vertical: true }, {}, {
          default: () => {
            return `${each($collectableItems, (collectableItem) => {
              return `${validate_component(RadioButton, "RadioButton").$$render(
                $$result,
                {
                  disabled: !$canApplyAction,
                  value: collectableItem.item.id,
                  group: $selectedOption
                },
                {
                  group: ($$value) => {
                    $selectedOption = $$value;
                    $$settled = false;
                  }
                },
                {
                  default: () => {
                    let item = getItem(collectableItem.item.id);
                    return `<div class="item-choice svelte-15troph"><div class="icon svelte-15troph">${validate_component(Item, "Item").$$render($$result, { itemId: collectableItem.item.id }, {}, {})}</div> <div class="content svelte-15troph"><div class="name svelte-15troph">${escape(item.name)}</div> <div class="description">${escape(item.description.split(".")[0])}.</div> </div></div> `;
                  }
                }
              )}`;
            })}`;
          }
        })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
          default: () => {
            return `${validate_component(Button, "Button").$$render(
              $$result,
              {
                type: "submit",
                size: "small",
                inverse: true,
                disabled: $buttonDisabled,
                disabledReason: $buttonDisabledReason
              },
              {},
              {
                default: () => {
                  return `Auswahl bestätigen`;
                }
              }
            )}`;
          }
        })}</form>`;
      }
    })}` : ``}`;
  } while (!$$settled);
  $$unsubscribe_collectableItems();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_canApplyAction();
  $$unsubscribe_selectedOption();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return $$rendered;
});
const css$t = {
  code: ".item-choice.svelte-joc78d.svelte-joc78d{align-items:center;display:flex;gap:.25rem}.item-choice.svelte-joc78d .icon.svelte-joc78d{height:2rem;width:2rem}",
  map: null
};
const ExchangeJoker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isEnabled, $$unsubscribe_isEnabled;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $selectedOption, $$unsubscribe_selectedOption;
  let $canApplyAction, $$unsubscribe_canApplyAction;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { inProgressEvent, applyAction, cancel, canApplyAction, isEnabled, buttonDisabled, buttonDisabledReason, selectedOption, formAction } = createActionHandler("exchange-joker", {
    extractSelectedOption: (event) => event.itemId,
    createEvent: (gameState, itemId) => ({
      itemId,
      position: gameState.activePlayerPosition
    }),
    enabledCheck: (gameState) => gameState.jokers > 0
  });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_canApplyAction = subscribe(canApplyAction, (value) => $canApplyAction = value);
  $$unsubscribe_isEnabled = subscribe(isEnabled, (value) => $isEnabled = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  $$unsubscribe_selectedOption = subscribe(selectedOption, (value) => $selectedOption = value);
  $$result.css.add(css$t);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `${validate_component(Action, "Action").$$render($$result, { disabled: !$isEnabled }, {}, {
      default: () => {
        return `Joker einsetzen`;
      }
    })} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Joker einsetzen" }, {}, {
      default: () => {
        return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
          default: () => {
            return `Tausche den Joker gegen einen anderen Schadensgegenstand indem du einen Gegenstand aus der
      Liste wählst.`;
          }
        })} <form>${validate_component(RadioOptions, "RadioOptions").$$render($$result, {}, {}, {
          default: () => {
            return `${each(ITEMS.filter((item) => isAttackItemId(item.id)), (item) => {
              return `${validate_component(RadioButton, "RadioButton").$$render(
                $$result,
                {
                  disabled: !$canApplyAction,
                  value: item.id,
                  group: $selectedOption
                },
                {
                  group: ($$value) => {
                    $selectedOption = $$value;
                    $$settled = false;
                  }
                },
                {
                  default: () => {
                    return `<div class="item-choice svelte-joc78d"><div class="icon svelte-joc78d">${validate_component(Item, "Item").$$render($$result, { itemId: item.id }, {}, {})}</div> <div class="name">${escape(item.name)} </div></div> `;
                  }
                }
              )}`;
            })}`;
          }
        })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
          default: () => {
            return `${validate_component(Button, "Button").$$render(
              $$result,
              {
                size: "small",
                inverse: true,
                disabled: $buttonDisabled,
                disabledReason: $buttonDisabledReason,
                type: "submit"
              },
              {},
              {
                default: () => {
                  return `Auswahl bestätigen`;
                }
              }
            )}`;
          }
        })}</form>`;
      }
    })}` : ``}`;
  } while (!$$settled);
  $$unsubscribe_isEnabled();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_selectedOption();
  $$unsubscribe_canApplyAction();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return $$rendered;
});
const AskQuestion = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $canAskForItems, $$unsubscribe_canAskForItems;
  let $canApplyAction, $$unsubscribe_canApplyAction;
  let $question, $$unsubscribe_question;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { machine: machine2 } = getGameContext();
  const { inProgressEvent, applyAction, cancel, canApplyAction, selectedOption: question, formAction, buttonDisabled, buttonDisabledReason } = createActionHandler("ask-question", {
    extractSelectedOption: (event) => event.question,
    createEvent: (gameState, question2) => ({
      question: question2,
      position: gameState.activePlayerPosition
    }),
    enabledCheck: (gameState) => gameState.jokers > 0
  });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_canApplyAction = subscribe(canApplyAction, (value) => $canApplyAction = value);
  $$unsubscribe_question = subscribe(question, (value) => $question = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  const canAskForItems = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    return !findStageAt(gameState.activePlayerPosition);
  });
  $$unsubscribe_canAskForItems = subscribe(canAskForItems, (value) => $canAskForItems = value);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `${validate_component(Action, "Action").$$render($$result, {}, {}, {
      default: () => {
        return `Frage stellen`;
      }
    })} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Frage stellen" }, {}, {
      default: () => {
        return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
          default: () => {
            return `Stelle dem/der Angreifer:in eine der folgenden Fragen:`;
          }
        })} <form>${validate_component(RadioOptions, "RadioOptions").$$render($$result, { vertical: true }, {}, {
          default: () => {
            return `${validate_component(RadioButton, "RadioButton").$$render(
              $$result,
              {
                disabled: !$canAskForItems || !$canApplyAction,
                value: "has-collected-items",
                group: $question
              },
              {
                group: ($$value) => {
                  $question = $$value;
                  $$settled = false;
                }
              },
              {
                default: () => {
                  return `Nach Gegenstand

          ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
                    default: () => {
                      return `Hat der/die Angreifer:in den Gegenstand, der auf dem Feld abgebildet ist, wo sich der
            Verteidiger befindet, schon gesammelt?`;
                    }
                  })}`;
                }
              }
            )} ${validate_component(RadioButton, "RadioButton").$$render(
              $$result,
              {
                disabled: !$canApplyAction,
                value: "is-on-field",
                group: $question
              },
              {
                group: ($$value) => {
                  $question = $$value;
                  $$settled = false;
                }
              },
              {
                default: () => {
                  return `Nach Standort

          ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
                    default: () => {
                      return `Befindet sich der/die Angreifer:in auf dem gleichen Feld?`;
                    }
                  })}`;
                }
              }
            )}`;
          }
        })} ${validate_component(Actions$1, "Actions").$$render($$result, { spacing: "dialog" }, {}, {
          default: () => {
            return `${validate_component(Button, "Button").$$render(
              $$result,
              {
                size: "small",
                inverse: true,
                type: "submit",
                disabled: $buttonDisabled,
                disabledReason: $buttonDisabledReason
              },
              {},
              {
                default: () => {
                  return `Bestätigen`;
                }
              }
            )}`;
          }
        })}</form>`;
      }
    })}` : ``}`;
  } while (!$$settled);
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_canAskForItems();
  $$unsubscribe_canApplyAction();
  $$unsubscribe_question();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return $$rendered;
});
const css$s = {
  code: "svg.svelte-1j9izwh{display:block;height:100%;width:100%}",
  map: null
};
const Stage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { stageId } = $$props;
  if ($$props.stageId === void 0 && $$bindings.stageId && stageId !== void 0)
    $$bindings.stageId(stageId);
  $$result.css.add(css$s);
  return `<svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg" class="svelte-1j9izwh">${stageId === "supply" ? `<path fill-rule="evenodd" clip-rule="evenodd" d="M43.3 17A86 86 0 0 1 53 28.7v.1c0 .3-.1 2.7-.5 3.5-.1.2-.3.3-.5.3-.1 0-.3 0-.4-.2A53.1 53.1 0 0 0 42 22.1l-2.7-1.7c-1.5 1.8-7 7.8-11.6 12.7l-.2-.2-.2-.4 11.4-12.4-.5-.4-.1.1a974 974 0 0 0-8.5 9.2h-.2a.4.4 0 0 1 0-.6l8.1-9 .2-.2-1-1.3L25.6 30l2.2 3c3 4 7 9.4 9.5 11.8 4 4 4 5.1 4 5.7 0 .8-1 1.9-2.1 2.3l-.5.1c-2 0-4.9-4.8-5-5-1-1.7-6.3-9-8.6-12.1l-4 4.1-8.8 10s-1.4 1.5-2.9 1.6h-.1c-.6 0-1-.2-1.5-.6-.7-.6-1-1.3-1-2.1 0-1.5 1.4-2.5 1.4-2.6a146.3 146.3 0 0 0 14.3-13.8l.4.6-2.1-2.7-.3-.3-.4-.4a146.6 146.6 0 0 1-3.6-5.3A70 70 0 0 0 12 30a1.4 1.4 0 0 1-2 0c-1.8-2.3-5.9-7.7-6.4-8.7-.6-1.3-.8-1.9-.6-5v-1c.4-5.7.7-8.4 1.3-9l1-.5c.1-.2.7-.5 4.6 1 1.8.6 4 1.4 4.3 1.8a73 73 0 0 1 6.9 7.9c.2.4.2 1-.1 1.4-.6.6-1.7 2-2.4 3.4l4.6 5.7a5.3 5.3 0 0 1 .5.6l.1.1.1.2.1.3c.2.3.6.7 1 1.5a4760 4760 0 0 1 11.3-12.3 7 7 0 0 0-1.2-1.4A367 367 0 0 0 21 3.7v-.4c.2-.3.6-.4 1-.2 0 0 8.3 3.8 18 10.4l.5-.5c.7-.6 2 .5 2.5 1 .8.9 1.1 1.6 1 2 0 .2 0 .4-.2.5l-.4.4ZM25 35.5Zm2.9-2.5Zm13-19.6s0 .4.6 1c.7.8 1.6 1.5 1.9 1.4 0 0 0-.4-.9-1.4-.6-.6-1.3-1-1.5-1Zm-.5.6-.8 1c0 .5.5 1.7 2.2 2.4.2-.2.7-.5 1-1a6.4 6.4 0 0 1-2.4-2.4Zm-36 6.8c.4.7 2.7 3.9 6.4 8.5.1.2.4.3.6.3-1.2-1.6-6.1-8-6.6-9.1-.7-1.3-.9-1.8-.7-5v-1a41.4 41.4 0 0 0-.2.6v1c-.2 3 0 3.4.5 4.6Zm11.6 3h.5l-.3-.4-.2-.4-.3-.6-1-1.5a31 31 0 0 1-3.1-6c0-.2 0-.4.2-.6.2 0 .5-.1 1 .3a115.3 115.3 0 0 1 5.5 6 16 16 0 0 1 2.4-3.4v-.5A72 72 0 0 0 13.9 9a28 28 0 0 0-8.1-2.8c-.5.6-.9 5.9-1 8.4v1c-.3 3-.1 3.4.5 4.7.4 1 4.3 6 6.6 8.9 1-1.6 3.9-5 4-5.2Zm-.7-3.3 1.3 2.1.2.4a177.3 177.3 0 0 0 4.3 6.5c.7.3 1.3.4 1.7.2a1.1 1.1 0 0 0 .3-.3c.4-.4.5-1 .5-1.2v-.1h-.1V28a9.5 9.5 0 0 1-.1-.2l-.1-.1a7.6 7.6 0 0 0-.3-.4h-.1L18 21.4l-1.5-1.7-.1-.1-.3-.3a145 145 0 0 1-3.7-4c.7 1.9 1.9 3.8 2.8 5.2Zm9.5 14.7-4 4.2-9 10S10.7 51 9.5 51c-.4 0-.8 0-1.2-.4-.5-.5-.8-1-.7-1.6 0-1 1.1-2 1.2-2 .8-.7 8.3-7.1 11.6-10.8l2.7-3 1.2 1.6.2.2.3.4Zm15.9 15.3c0-.4 0-1.4-3.8-5.2A191.6 191.6 0 0 1 24 29.2a2.7 2.7 0 0 1-.6 1c-.4.3-.8.4-1.4.4h-.1a179.7 179.7 0 0 1 12.4 17c1.3 2.2 3.6 5 4.6 4.7 1-.5 1.7-1.3 1.7-1.5v-.2Zm-.8-30.8a26 26 0 0 1 2.8 1.7c.1.1 1.9 1.4 5.5 5.5-2-2.9-4.4-6-6-7.1-.4-.2-3.2-1.4-4.3-3.7 0-.1-.4-1-1.3-1.5 0 0-4-3.1-9.7-7l8.9 7.6c.5.5 1 1 1.3 1.7.5.7 1.4 2.1 2.8 2.8Zm12.1 12a57.1 57.1 0 0 0-9.7-12.5s-2.9-1.1-3.9-3.3c0-.1-.5-1-1.5-1.8-.4-.3-6.5-5-14.1-9.8C25.5 5.6 32 9 39.4 14l-.5.6c-.1.2-.2.4-.1.7.1.6.7 2 2.6 2.8a.7.7 0 0 0 .7 0l.7-.7A103 103 0 0 1 52.3 29c0 .6-.1 2-.3 2.8ZM6 15c.2 0 .3.2.3.4 0 0-.4 2.6 1 4.2a.4.4 0 0 1-.3.6s-.2 0-.2-.2c-1.7-1.8-1.2-4.6-1.2-4.7 0-.2.2-.3.4-.3Zm25.2 9.2c.2-.2.4-.2.5 0 .2 0 .2.3 0 .4l-4.2 5a.4.4 0 0 1-.5 0 .4.4 0 0 1 0-.6l4.2-4.8ZM23 35.5h.5v.5c-.2.2-6.4 6.4-7.8 8.3a.3.3 0 0 1-.5 0 .4.4 0 0 1 0-.5c1.4-1.8 7.4-8 7.8-8.3Zm-9.2 9.7-3 3.4v.5h.6c.4-.4 2.6-3.1 3-3.4v-.6a.3.3 0 0 0-.6 0ZM24 31a.3.3 0 0 0-.5 0v.5l4.5 5.9.2.1a.4.4 0 0 0 .3-.5L24 31Zm7.8 11.3c-.1 0-.2 0-.3-.2l-2.2-2.8a.4.4 0 0 1 .1-.5h.5l2.2 3a.4.4 0 0 1-.3.5Zm7.1 9.1h.3a.4.4 0 0 0-.3-.7c-.4 0-1.7-1.4-2.7-3a.3.3 0 0 0-.5-.2c-.2.1-.2.3-.1.5 1 1.6 2.4 3.4 3.3 3.4Z" fill="currentColor"></path>` : `${stageId === "datacenter" ? `<path fill-rule="evenodd" clip-rule="evenodd" d="M29.8 41.4h1c1 0 1.7-.1 2.1-.5.3-.3.3-.5.3-.7v-.9l8.4.2v7.7h-.4c-1.6-.3-2.7-.3-4-.3h-1.6l-6 .2c0-.6-.2-1-.5-1.2-.3-.4-.8-.5-1.2-.5-1.1 0-1.6 1-1.8 1.6a155.8 155.8 0 0 0-10.9 0l.3-5.8 14.3.2Zm-.3 6.3c0 .3-.2.6-.4 1-.3.2-.7.3-1.2.3-.3 0-1 0-1.4-.5l-.4-.8c-1.4-.1-8.6-.2-10 0-.7 0-1.2 0-1.4-.3a.5.5 0 0 1-.2-.5l.3-5.7-4.3.1c-1.2.2-2 .1-2.4-.3a1 1 0 0 1-.1-1l.4-31.7c0-.5.2-1.5 1.1-1.6A447.3 447.3 0 0 1 31.6 6c1.3 0 2 .2 2 1.9v.7c2.2.1 10.5.2 13 0 1 0 1.8.2 2 .6.3.2.3.4.2.6l-.3 28c0 .5-.2 1.4-1 1.5a61.6 61.6 0 0 1-5.2 0 237.5 237.5 0 0 1-.1 8.3l-.4.2h-.3l-.4-.1c-1.6-.2-2.6-.2-4-.2h-1.5l-6.1.1Zm17.8-9c-1 .2-12 0-14 0v-2.8h7.2a.3.3 0 1 0 0-.6h-7.2V33l7.2.1a.3.3 0 1 0 0-.7h-7.1v-3.2l11.2.2h.7c.4 0 .8 0 1-.5.2-.4.3-1.4.2-3.6v-.4c0-.2 0-.4-.3-.6-.5-.5-1.6-.5-2.7-.5h-.3c-.8 0-6 .2-9.7 0v-.5c1.3 0 7.1-.2 10.8 0h.4c.8 0 1.2-.1 1.5-.4.2-.2.2-.5.2-.6v-2.7c.1-.5.2-1 .1-1.4 0-.4 0-.7-6.5-.7l-6.4.2v-1.3l11 .2h.7c.4 0 .8-.1 1-.6.2-.3.3-1.3.2-3.6v-.3c0-.3 0-.5-.3-.7-.5-.5-1.6-.5-2.7-.4h-9.9V9.4c2.3.1 10.4.2 13 0 1.2 0 1.5.2 1.5.3v.1L47.9 38s0 .7-.5.8Zm-14.8 1.5A1172.9 1172.9 0 0 0 33 8c0-1.1-.1-1.1-1.3-1.2h-.8a303 303 0 0 0-21.3.7c-.5 0-.5.9-.5.9l-.4 31.8v.3c.1.1.5.4 1.8.2 1-.2 3.5-.2 6.6-.2l12.8.2c1.8.2 2.4 0 2.6-.3l.1-.2Zm12.7-11.5-11.8-.1V27h4.9c.2 0 .3-.1.3-.3 0-.2-.1-.3-.3-.3l-4.8-.1v-1.8a209.1 209.1 0 0 0 10 0c.5 0 1.9 0 2.3.3v3.7c-.2.2-.2.2-.6.2Zm-1-6.1c-3.5-.2-9.4 0-10.7 0v-1.9h4.8c.2 0 .3-.2.3-.4s-.1-.3-.3-.3h-4.7v-1.7c1.7 0 11-.3 12.2 0v1.3a25.2 25.2 0 0 0-.1 3h-1.4Zm1-6.7-11.6-.2v-1.4l4.7.2c.2 0 .3-.2.3-.4s-.1-.3-.3-.3l-4.7-.2v-2a210.6 210.6 0 0 0 9.9 0c.5 0 1.9 0 2.3.3v3.8l-.6.2ZM18 15c-7.4 0-7.5-.3-7.5-.7a10 10 0 0 1 0-1.7v-.3l.1-.7v-2s0-.4.3-.7c.3-.3.8-.4 2.1-.3 4.5.1 13.8 0 14.3 0h.2c1.3 0 2.6 0 3.2.5.2.2.3.4.3.7v.4c0 2.5 0 3.7-.2 4-.3.5-.8.6-1.2.6l-9.7.2H18Zm-6.8-1c1.7.5 17 .3 18.4.1.4 0 .5 0 .6-.2V9.7c-.5-.4-2-.4-2.6-.3h-.3a398 398 0 0 1-16 .1v2.9l-.1.5v1.3Zm13.3-1a.7.7 0 0 1-.6-.5v-.6l.5-.3a.7.7 0 0 1 .8.7l-.1.4-.4.2h-.2Zm-2.8-.4c.2 0 .3-.1.4-.3 0-.2-.2-.3-.4-.3l-7.3-.2c-.2 0-.4.1-.4.3 0 .2.1.4.3.4l7.4.1Zm5.8.4a.7.7 0 0 1-.7-.5v-.6l.6-.3a.7.7 0 0 1 .8.7c0 .2 0 .3-.2.4l-.3.2h-.2Zm-16.7 9c.4.5 1.3.6 2.2.6a19.4 19.4 0 0 0 1.1 0c.5 0 9.9-.2 14.4 0 1.2 0 1.8 0 2-.4.3-.2.3-.6.3-.7v-1.9a11.4 11.4 0 0 0 .1-1v-1.7c0-.4 0-.8-9.4-.7l-9.7.2c-.4 0-.8 0-1.1.6a13 13 0 0 0-.2 4.4c0 .3 0 .5.3.7Zm1.1-5c1.4 0 16.7-.3 18.4.1v1.3a16.2 16.2 0 0 0-.1 1.1 10.5 10.5 0 0 0-.1 2.3l-1.6.1a398.1 398.1 0 0 0-14.5 0h-.1c-.6 0-2.2.1-2.6-.3l-.1-.2V21l.1-3.7c.1-.2.2-.2.6-.2Zm12.6 3a.7.7 0 0 1-.6-.4V19c.2-.2.3-.3.5-.3a.7.7 0 0 1 .8.6l-.1.4-.4.3h-.2Zm-10.8-.6c0 .2.2.4.4.4l7.6-.2c.2 0 .4-.1.4-.3 0-.2-.2-.3-.4-.3H14c-.1 0-.3.2-.3.4Zm13.8.7a.7.7 0 0 1-.7-.5V19l.6-.3a.7.7 0 0 1 .8.7s0 .2-.2.3l-.3.3h-.2Zm-17 9c0 .3 0 .7 7.5.7h1.9l9.7-.2c.4 0 .9-.1 1.2-.6.2-.4.2-1.5.2-4v-.4a1 1 0 0 0-.3-.8c-.6-.5-1.9-.5-3.1-.5h-.2c-.5 0-10 .2-14.4 0-1.3 0-1.8 0-2.1.4a1 1 0 0 0-.3.7v3a24.6 24.6 0 0 0-.1 1.7Zm19-.2c-1.4.1-16.6.4-18.3 0v-2.5a10.5 10.5 0 0 0 .2-2.2c0-.2.6-.2 1.6-.2a398 398 0 0 0 14.5 0c.7 0 2.2 0 2.7.3v.4a62.1 62.1 0 0 1 0 4l-.6.2Zm-5-1.7a.7.7 0 0 1-.6-.5v-.5c.2-.2.3-.3.6-.3a.7.7 0 0 1 .7.7l-.1.3a.7.7 0 0 1-.6.3Zm-2.8-.3a.3.3 0 1 0 0-.7l-7.2-.1a.3.3 0 1 0 0 .7h7.2Zm5.8.3a.7.7 0 0 1-.7-.5l.1-.5c.1-.2.3-.3.5-.3a.7.7 0 0 1 .8.7c0 .1 0 .2-.2.3a.7.7 0 0 1-.5.3ZM24.2 37l-10.8-.1a.3.3 0 1 1 0-.7l10.8.1a.3.3 0 1 1 0 .7Zm3.5.3h.2c.4-.1.6-.4.6-.8 0-.2-.2-.4-.4-.5a.7.7 0 0 0-.5 0c-.4 0-.6.5-.5.8 0 .2.2.3.3.4h.3Zm0-3.3-.3-.1a.7.7 0 0 1-.3-.4c0-.3.1-.7.5-.8h.5a.7.7 0 0 1-.3 1.3Zm-14.3-.4 10.8.1a.3.3 0 1 0 0-.7H13.4a.3.3 0 1 0 0 .6Zm26.8-19.2c0 .3.3.5.6.5h.2a.6.6 0 0 0 .4-.6V14c0-.3-.4-.5-.7-.5-.2 0-.4.1-.5.3v.5Zm.6-.1Zm0-.1Zm2 .2c0 .3.3.5.6.5a.7.7 0 0 0 .5-.3l.1-.3V14c0-.3-.3-.5-.7-.5-.2 0-.4.1-.5.3v.5Zm.5-.2h.1Zm0 0h.1Zm-3.1 6.5a.7.7 0 0 0 .8.4l.3-.2.1-.3v-.2c0-.3-.4-.6-.7-.5-.2 0-.4.1-.5.3v.5Zm.6-.1Zm0-.1Zm2 .2c0 .3.3.4.6.4h.2l.3-.2.1-.3v-.2c0-.3-.3-.6-.7-.5-.2 0-.4.1-.5.3v.5Zm.5-.2h.1Zm0 0h.1ZM40.2 27c0 .3.3.4.6.4h.2l.3-.2.1-.3v-.2c0-.3-.4-.6-.7-.5-.2 0-.4.1-.5.3v.5Zm.5-.2h.1Zm0 0h.1Zm2 .2c.2.3.4.4.7.4h.2l.3-.2.1-.3v-.2c0-.3-.3-.6-.7-.5-.2 0-.4.1-.5.3v.5Zm.6-.2h.1Zm.1 0Zm.2 9.5h-.3a.6.6 0 0 1-.3-.4c0-.3.1-.7.5-.8h.5c.2.2.3.3.3.5a.6.6 0 0 1-.6.7Zm0-.6h.1Zm0 0Zm0-2.2h.2c.3-.1.5-.4.5-.8l-.3-.4a.6.6 0 0 0-.5-.1c-.4.1-.6.5-.5.8l.3.3.3.1Zm0-.6.1-.1Zm0-.1ZM27 48c-.2-.1-.2-.4-.2-.7 0-.2.1-1.2 1.1-1.2.4 0 .6 0 .7.2.2.2.3.6.2 1.1 0 .2 0 1-.9 1-.1 0-.6 0-.9-.4Z" fill="currentColor"></path>` : `${stageId === "logistics" ? `<path fill-rule="evenodd" clip-rule="evenodd" d="M52.8 37.4h-.1v-.1a40.3 40.3 0 0 0-1.2-9.5c-.4-.9-.9-1.5-1.4-2.1l-2-2.4-.4-.4c-.3-.4-.6-.8-1-1v-.1c-1-.8-1.6-1.4-3-1.6a55 55 0 0 0-2.6-.2h-.8l-4-.2c-.3 0-.6.3-.7.6V22a77.4 77.4 0 0 1-.1 4v1a165 165 0 0 0 0 9.2l-.5 1.4h-.2v-2.3l.1-11.3v-6.2c0-1.2-.1-1.9-.5-2.2-.6-.5-1.2-.5-2-.5h-.1l-26.7.6-1.3.1c-.2 0-.4.2-.6.4-.6.5-.7 1.3-.7 2 0 3.7.6 15.2.8 17.6-.4.5-.4.8-.4 1.4 0 .6.1 1.3.6 1.8.9.9 1.3 1 2.4 1h1.2l2.4-.1c.2 0 .3-.2.3-.4 0-1.5.4-3 1.4-4 .8-.8 1.8-1.3 2.8-1.4a5 5 0 0 1 3.5 1.4c.7.8 1 2.8.7 4v.3c0 .1.1.3.3.3a27.8 27.8 0 0 0 2.8 0h.2a201.1 201.1 0 0 0 13.1-.4h.1v-.1h.1v-.2h.1c0-2.5 1.8-5.2 4.3-5.3 1.3 0 2.6.5 3.4 1.4.8.8 1.5 2.7 1.3 4h-.2c-.2 0-.4 0-.4.3 0 .2.2.3.4.3H47l1.9-.2h.4a29.9 29.9 0 0 1 3.7-.2v-.3c0-.4.1-1.6-.2-1.9Zm-47-3.8-.1 1H4.5l-.2-2h1.4v1Zm12.7 1.3c-1-1-2.5-1.6-4-1.6-1.2 0-2.4.7-3.3 1.7a6 6 0 0 0-1.3 2.3H8l-.5-.5-.5-.5c-.5-.3-1.1-.5-1.7-.4-.2 0-.4.1-.4.3 0 .2.2.4.4.3a1.9 1.9 0 0 1 1.7.7l.8.7h1.3a5.7 5.7 0 0 1 .6 0l-.1 1.2a19.6 19.6 0 0 1-3.1 0c-1 0-1.3 0-2-.7-.3-.3-.4-.7-.4-1.3 0-.6 0-.7.3-1l.1-.1a.4.4 0 0 0 0-.1v-.7h.6l.9-.1c.5-.3.4-1 .4-1.6v-.2c0-.5 0-1.4-.7-1.4H4.3A614 614 0 0 1 3.7 18c0-.7.1-1.1.5-1.4l.3-.2h1.1l26.7-.7c1 0 1.3 0 1.7.3 0 0 .3.3.2 1.7v17.7l-.1 2c-5.6.1-13.5-.1-14.7-.2-.1-.9-.4-1.8-1-2.3Zm3.5 4.4h-2.6c.1-.4.2-.9.1-1.4 1.6 0 9 .3 14.4.3h1l-.2.7c-2.2.2-9.3.4-12.7.4ZM52 35h-3v-1.1c0-.6-.1-1.5.3-1.6h1.4a12.3 12.3 0 0 0 1 0l.1 2.7Zm-8.3 0c-1-1-2.5-1.6-4-1.6-1.4.1-2.7.9-3.5 2V21.7a77.4 77.4 0 0 1 .1-1.3l4 .2h.8l2.6.2c1.1.2 1.6.6 2.5 1.4a9.3 9.3 0 0 1 1.3 1.5l2 2.3c.6.6 1 1.2 1.3 2 .4.9.7 2.2.8 3.3v.2H51c-.5 0-1-.1-1.6 0-1 0-1 1.4-1 2.2v.3l.1 1c0 .5.5.5.8.5h2.4a2.4 2.4 0 0 0 .4 0v1.7h-1.6a45.3 45.3 0 0 1-5.5 0 6 6 0 0 0-1.2-2.4Zm5.5 4.2h-.3l-1.8.2h-2V38h5a207.6 207.6 0 0 1 2.2 0v1l-3.1.1ZM32 36.3c-.2 0-.4 0-.6-.2l-.2-.6a52.5 52.5 0 0 1 .2-1.6l.3-.2h.9c.1 0 .4.1.4.7a117.3 117.3 0 0 1 0 1.6c-.1.2-.3.2-.5.2h-.4Zm0-1.7-.1 1h.4v-1.2h-.2v.2Zm-16.5.9a3 3 0 0 0-2.6.3c-.9.6-1.4 1.5-1.5 2.5-.2 1.8.8 3.3 2.5 3.6l.7.1h.2c.6-.1 1.2-.2 1.7-.6.6-.4 1-1 1.2-1.7.5-1.7-.5-3.6-2.2-4.2Zm1.6 4c-.2.5-.5 1-1 1.3-.4.3-.9.4-1.4.5h-.6c-1.4-.3-2.2-1.5-2-3 0-.7.5-1.4 1.2-1.9.6-.4 1.3-.5 2-.3 1.3.5 2.2 2 1.8 3.4Zm23.6-4a3 3 0 0 0-2.6.3c-.9.6-1.4 1.5-1.5 2.5-.2 1.8.8 3.3 2.5 3.6l.7.1h.2c.6-.1 1.2-.2 1.7-.6.6-.4 1-1 1.2-1.7.5-1.7-.5-3.6-2.2-4.2Zm1.6 4c-.2.5-.5 1-1 1.3-.4.3-.9.4-1.4.5h-.6c-1.4-.3-2.2-1.5-2-3a2.6 2.6 0 0 1 2.5-2.3l.7.1c1.3.5 2.2 2 1.8 3.4Zm-.6-10a.5.5 0 0 1-.5-.6v-6.3c0-.6.7-.8 2-.8a3 3 0 0 1 2.4 1 24 24 0 0 1 2 3c2 2.8 1.7 3 1.5 3.2a219.6 219.6 0 0 1-7.4.4Zm1.4-7c-1 0-1.3.1-1.3.2l.1 6a179.3 179.3 0 0 0 6.6-.2c-.4-1-3-4.8-3.4-5.3-.5-.5-1.3-.7-2-.7Zm-3 4.5v-.3a69.6 69.6 0 0 0-.1-4c0-.2 0-.6-.5-.6h-2.1c-.3 0-.5.3-.5.5v3.1l.1 2V29c0 .3.2.5.5.5h.2a22.5 22.5 0 0 0 1.9 0c.5 0 .5-.4.5-.5v-2ZM39 28.8h-1.3v-3.1l-.1-2.9h1.8l.1 3.9v2h-.4ZM8 33.3h.4c.2 0 .4.1.4.5v1c0 .5-.5.5-.7.5h-.3l-.6-.1a45.3 45.3 0 0 1 0-1.7c0-.2.2-.2.3-.2H8Zm0 1.3h.1V34H8v.2l-.1.4H8ZM44.4 31l-.6-.2a188.6 188.6 0 0 1-1.8 0c-.2 0-.7 0-.7.4v1.2l.8.1h1.5c.2 0 .5 0 .7-.2.2-.1.2-.4.2-.5v-.1c0-.2 0-.5-.2-.7Zm-.6.6v.2H42v-.2h1.8ZM13.2 17.4h.2c.2 0 .4.1.4.3 0 .2-.2.4-.4.4a190.2 190.2 0 0 1-7.3.1.4.4 0 0 1-.4-.3c0-.2.2-.4.4-.4 1.4.1 6 0 7.1-.1Zm7.2.2c0-.2-.1-.4-.3-.4l-3.2.1v.7H20c.2 0 .3-.2.3-.4Zm6.1 18.6a.3.3 0 0 1 0-.7 65.4 65.4 0 0 1 3.3 0c.2 0 .3.2.3.4s-.1.4-.3.3h-3.3Z" fill="currentColor"></path>` : `${stageId === "production" ? `<path fill-rule="evenodd" clip-rule="evenodd" d="m26 4 .2-.6c-.1-.2-.4-.3-.6-.2a3.9 3.9 0 0 1-3.1-.1l-.3-.1c-1-.5-2.1-1-3.2-1-1 0-1.8.4-2.4 1.3a6 6 0 0 0-.6 2.3c-.2 1.2-.3 2.1-1.2 2.6l-.8.2-1.5-.3c-.5-.1-1-.3-1.6-.3-1 0-1.6.5-2.1 1.5-.8 1.4-.7 3 0 4.8l1.2 2.1 1 1.5c0 .2.1.2.3.2.2 0 .4-.1.4-.4 0-.8.5-1.8 1-2.3.4-.4.9-.6 1.4-.9l1-.5c.5-.4 1-.8 1.3-1.3l.6-1c.2-.5.3-.8.9-1 .4-.2 1-.2 1.5-.2.6 0 1.2 0 1.7-.2 1.9-.6 2.5-1.6 3-3.3.4-1.1.8-2.4 1.8-2.8Zm-4-.2a5 5 0 0 0 2.2.5c-.5.7-.8 1.5-1 2.2-.5 1.6-.9 2.3-2.4 2.8a5 5 0 0 1-1.5.2h-.1c-.6 0-1.2 0-1.7.2-1 .3-1.2.9-1.4 1.4a3 3 0 0 1-.4.9 4 4 0 0 1-1.2 1l-.9.6c-.5.2-1 .5-1.5 1-.5.4-.9 1-1.1 1.7l-.3-.4a56.8 56.8 0 0 1-1.2-2.1c-.7-1.5-.7-3 0-4.1.4-1 .9-1 1.3-1 .5 0 1 0 1.4.2h.1c.5.2 1 .3 1.6.3.5 0 .9 0 1.2-.3 1.3-.6 1.4-2 1.6-3.1 0-.8.2-1.5.5-2 .4-.7 1-1 1.7-1 1 0 2 .5 2.9 1h.2Zm29 4.4c.1.1.1.2 0 .4-1 2.5-3.9 3.5-5 3.8l-1 .1-2-.3-1.7-.3-.9.3c-.3.2-.6.6-.8 1-.3.6-.5 1-1 1.4-.6.5-1.4.7-2.4.7l-1.4-.1a6 6 0 0 1-2.4-1.2c-.7-.6-1.4-1-2.2-1h-.7c-1 .4-1.8.8-2.5 1.4-1 .8-1.3 1.4-1.4 2.4 0 .2-.2.3-.3.4H25c-.2 0-.3 0-.4-.2l-.5-.9a10 10 0 0 0-.6-1 5 5 0 0 1-.9-2.1c-.1-1.7.9-3.8 2.6-4.2h.6c.6 0 1.2.2 1.7.4.4.2.8.4 1.1.4.3 0 .5 0 .8-.2.5-.4.8-1.2 1.2-1.9 0-.3.2-.5.3-.8.8-1.4 1.9-3 3.5-3 .7 0 1.5.4 2.3 1.1l.4.4.2.2c.7.7 1 1 1.6 1a3 3 0 0 0 1.4-.6c1-.7 1.8-1.2 2.7-1.2.7 0 1.4.3 2.3 1h.2l.4.3c1.5 1 2.7 1.9 4.6 2 .2 0 .3.2.4.3Zm-5.3 3.4A7 7 0 0 0 50 8.7c-1.7-.3-3-1.1-4.3-2l-.3-.2-.4-.3c-.7-.5-1.3-.7-1.8-.7-.7 0-1.3.4-2.2 1-.8.5-1.4.8-2 .8-.8 0-1.3-.6-2-1.3-.2 0-.2-.1-.3-.2l-.4-.4c-.6-.6-1.2-.9-1.7-.9-1 0-1.8.8-2.7 2.6l-.4.8a6 6 0 0 1-1.4 2.1 2 2 0 0 1-1.3.5c-.5 0-1-.3-1.5-.5a3 3 0 0 0-1.3-.5l-.3.1c-1.3.3-2.1 2-2 3.3 0 .6.4 1.2.7 1.7l.5.9.1.1c.3-.7.7-1.2 1.4-1.8a8 8 0 0 1 2.9-1.5 3 3 0 0 1 1-.2c1 0 1.8.6 2.6 1.1.7.5 1.3 1 2 1.1l1.4.2a3 3 0 0 0 1.8-.6c.3-.2.5-.6.8-1 .3-.6.6-1.1 1.1-1.5.4-.2.8-.3 1.4-.3.6 0 1.3.1 1.9.3l1.8.3.7-.1Zm.7-2.1c.1.2 0 .5-.2.5-1.3.5-2.6.3-3.7 0-1.3-.2-2.5-.5-3.5.3a4 4 0 0 0-.8 1c-.5.7-1 1.4-2.1 1.5h-.2a8 8 0 0 1-3.3-1.3l-.4-.2a.4.4 0 1 1 .4-.8l.4.3c.9.4 2.2 1.2 3 1.1.8 0 1-.5 1.5-1 .2-.5.5-.9 1-1.2 1.3-1 2.7-.8 4.1-.5 1.2.2 2.2.5 3.3 0 .2 0 .5 0 .6.3Zm-1.8 31v-.3.1l-.2-4.4v-.4H44v-.1h-2.7V33l.1-1.5a2 2 0 0 0-.5-1.4c-.6-.6-1.6-.4-2.4-.3h-2.4l-5.5.1c-.2 0-.4.2-.4.3a3 3 0 0 0 0 1.9l.1 1a13 13 0 0 1 .3 2.4h-1l-1.3-17.7v-.2h-.1l-.1-.1h-.2a92.7 92.7 0 0 0-5.3.3h-.2v.1h-.1v.4a38.9 38.9 0 0 0 0 3.2 97.6 97.6 0 0 1-.3 5.7 67.8 67.8 0 0 1-3.9-2.7l-.3.2c-.5.8-1.2 1.5-2 2.2v-.7l-.9-7.2v-.2h-.1v-.1H8.5v.2h-.1V23l-.1.6v.6l-.1 4c0 1.7-.2 3.5-.4 5.5l-.3 2H4.1v.2H4v.1l.1 12 .1 5.6v.2h.1v.1h.1l.1.1h.1l2.6-.1a390.6 390.6 0 0 1 2.9-.2l7.4-.1h6.3a267.4 267.4 0 0 0 16.5-.8l3.8-.1h.1l.1-.1.1-.1v-.1h.1v-.1l.1-3.8v-8Zm-.8-.2c0 2.6.2 5.4 0 8.1v3.4h-3a51.7 51.7 0 0 0 .1-6.7v-.5l-.1-3.5-.1-.3H37c-5.1-.2-10.4 0-15.5.2l-2.2.1-2.4.1h-.1l-.2.2v.3c.4 1.9.4 4 .4 6v5a134 134 0 0 0-12 .4L4.8 48l-.1-11.5a374 374 0 0 0 11.7-.1h5.3l9.2-.1h12.6v4Zm-3.1-7.5v.4H39l-1.3.1H37l-5.8.2v-.4a18.7 18.7 0 0 1-.2-.7h1.4l5.7-.3h.1l2.3-.2v.9Zm0 1.3v1.3h-9.1v-1l5.6-.2h2.5l1-.1Zm-.2-3.5.2.4-2.4.3c-2.4.2-4.9.4-7.2.3v-1h7.5c.6-.2 1.5-.3 1.8 0Zm-.5 21v.4c-1.4 0-2.8.2-4.1.3a265 265 0 0 1-17.8.6v-3.4c0-2.5 0-5-.5-7.4l4.1-.2a209 209 0 0 1 18-.4h.2l.2 3.2v6.9ZM29 35.4l-6.6.1a317.6 317.6 0 0 1 .7-7.4l.2-6.7v-.7a50.5 50.5 0 0 0 4.5-.6L29 35.4Zm-1.3-17.2v1l-1.2.2a139.7 139.7 0 0 1-3.2.5v-.3l-.1-1 1.8-.2h1.6l1-.2Zm-5.5 10c0 1.5-.2 3-.4 5V33l-.2 2.4H17a151 151 0 0 0-1-7.4l.2-.2a21 21 0 0 0 2.1-2.3l1 .8.4.2 1.8 1.4.6.5Zm-7-.4 1 7.8H8.4l.1-1v-.8l.1-.3a49.8 49.8 0 0 0 .5-10l.1-2 3.3-.2h1.8l.6 5.3.2 1.2Zm-1.7-7.4h-.9l-3.2.2v-1.3h4.9v1.1h-.8Zm27.2 17.9a.4.4 0 0 1-.3.7c-.1 0-.2 0-.3-.2a.7.7 0 0 1-.2-.6c0-.3.2-.4.5-.4.2 0 .3.3.3.5Zm-2.1 9.9-.2-2.6v-.4l-.2-1.4v-.4H38v-.1h-.1v-.1h-.2a71 71 0 0 0-7.2.3H30a39.8 39.8 0 0 1-3.6 0h-.9a125 125 0 0 0-5.7.1h-.1v.1h-.1v.1h-.1v2.5c0 1 .2 1.8.4 2.4l.1.1h.1v.1h5.4l.7-.1h.6l3.2-.1h3.7c1.4.1 3 .1 4.4-.1h.2v-.1h.1v-.4Zm-1-2.2.1 1.8c-1.1.2-2.4.2-3.6.1l-.1-1.7c1.2 0 2.4 0 3.6-.2Zm-.3-2 .2 1.2-3.5.1v-1.2l3.3-.1Zm-4 3.9h-2.8l-.1-1.7H33l.2 1.7Zm-.2-2.6h-2.8v-1L33 44v1.2Zm-3.6 1 .1 1.5-2.3.1-.1-1.5h1.2l1.1-.1Zm-.1-2v1.1l-2.4.2v-1.2h2.4Zm-3 3.7h-2.8v-1.4h.3l2.4-.1v.3l.2 1.2Zm-.3-3.7.1 1.3-2.6.2v-1.5a81.6 81.6 0 0 1 2.5 0Zm-3.4 2.3.1 1.5h-2l-.4-1.4h2.3Zm0-2.3v1.5h-2.3v-1.4l2.3-.1Zm14.4-6v.2a.4.4 0 1 1-.8 0v-.2a.4.4 0 1 1 .8 0Zm-.2-30.5c0-.2 0-.4-.3-.5a4 4 0 0 0-2.8.2c-.6.3-1 .7-1 1.2a.4.4 0 0 0 .3.5c.2 0 .4 0 .4-.3 0-.2.3-.4.7-.6.7-.4 1.7-.4 2.1-.2.2 0 .5 0 .6-.3ZM33 38.1a.4.4 0 0 1-.3.7c-.1 0-.3 0-.4-.2a.8.8 0 0 1-.1-.6.4.4 0 1 1 .8 0v.1Zm-5.3-4.8c.3 0 .4-.2.4-.4v-.7c0-1 0-2-.3-2.8 0-.2-.3-.4-.5-.3-.2 0-.4.3-.3.5.2.8.2 1.7.3 2.6v.7c0 .3.2.4.4.4Zm0-6.7c0 .2-.1.4-.4.4a.4.4 0 0 1-.4-.3c-.3-1.7-.4-3.4-.4-5 0-.3.2-.5.4-.5s.4.2.4.4c0 1.6.2 3.3.4 5ZM22 5c.2 0 .3.3.3.5-.4 1.8-1.7 2.9-4 3.3a.4.4 0 0 1-.5-.3c0-.3.1-.5.4-.5 2-.4 3-1.2 3.3-2.7 0-.2.2-.3.5-.3Zm-1.3 26.1-.1-1.6v-.2l-.1-.2v-.4h-.1v-.1h-.2v-.1H20a28 28 0 0 0-2.2.1h-.3v.1h-.1v.3l.1 2.3v.1h.1v.1h3.1v-.1h.1v-.2Zm-1-1.6.2 1.2h-1.6v-1.3h1.4Zm0-25c.1.3 0 .5-.3.5-.4 0-1 .3-.9 1 0 .2-.1.4-.4.4a.4.4 0 0 1-.4-.4c-.1-1 .6-1.7 1.6-1.8.2 0 .4.1.5.3Zm-5 30c.2 0 .4-.1.4-.4l-.3-1.8c-.1-.8-.3-1.5-.2-2.2 0-.2-.2-.4-.4-.4s-.4.1-.4.4c-.1.7 0 1.5.2 2.2v.1l.2 1.7c0 .3.2.5.5.5Zm0-23.3c.2.2.2.4 0 .6-1 .9-2.1 1.6-3.3 1.6a.4.4 0 0 1 0-.8c.9 0 1.8-.7 2.8-1.4.1-.2.4-.2.6 0ZM14 27.9c.2 0 .4-.3.3-.5l-.2-2.4c0-.8 0-1.6-.2-2.3 0-.2-.3-.4-.5-.4s-.4.3-.3.5l.2 2.2c0 .9 0 1.7.2 2.6 0 .2.2.3.4.3h.1Zm-.4 21v.4h-.1v.1h-.4l-.7.1h-.7l-3.1.2h-.2v-.1l-.1-.1a12 12 0 0 1-.4-2.6v-.2l.1-.1h.1v-.1h.1a20 20 0 0 1 4 0h1.1v.1h.1v.2a252.8 252.8 0 0 1 .2 2.3Zm-.9-.3v-1.3a293.2 293.2 0 0 0-4-.1l.3 1.6c.9 0 1.8 0 2.7-.2h1Zm.3-7V41c-.1-.7-.2-1.3-.1-1.9v-.4h-.1v-.1h-.4a26 26 0 0 0-4.7 0h-.1v.1h-.1v.1l-.1.1v1a17 17 0 0 0 .2 2v.2h.1v.1H8l.1.1h.2c1.2 0 2.8 0 4.5-.3h.2v-.4Zm-1-.5.1.2-3.6.3-.1-1.6v-.5H12V41Z" fill="currentColor"></path>` : `${stageId === "sales" ? `<path fill-rule="evenodd" clip-rule="evenodd" d="M53 44.8c0-.6-.3-.9-.7-1l-.7-.1V19.3c.6 0 1.1-.2 1.3-.6.3-1-5-7.2-5-7.2-1.1-1.3-2-1.4-2.1-1.4-2.7-.2-31.7 0-36.6 0h-.6a15.5 15.5 0 0 1-.3 0A32 32 0 0 0 4 15.8c-.5.6-1.2 1.8-1 2.4l.6.3h1.6a455 455 0 0 0-.8 25.1l-.6.1c-1 .3-.8 1.6-.7 2v.4c.3.3 1 .5 8.6.4H48c4.1 0 4.4-.1 4.6-.4.4-.5.4-.9.4-1.3Zm-5.6-32.9a43 43 0 0 1 4.8 6.5c-.2.2-.9.2-1.7 0h-1L46.2 11c.3 0 .7.4 1.2 1ZM38 18h-1c0-3.1-.3-6.1-.4-7.2H38c0 1 .2 5 0 7.2Zm1.3-7.2h-.6c0 1 .2 5 0 7.2h1.9l-1.3-7.2Zm2 7.2-.5-2.9-.7-4.3h1.6c.2.9.9 4.3 1.2 7.3h-1.6Zm2.3.1c-.3-2.9-1-6.2-1.2-7.3h1.3l1.7 7.4h-1.7Zm2.5.1-1.6-7.3h.7l3.4 7.5-2.5-.2Zm-10.4-7.4.4 7.1h-.9l-.7-7h1.2Zm-26.4 7c.4-1.8.8-5.6 1-6.9h-1l-2.4 7h2.4Zm1.7-6.9h.6c0 1.2-.2 5.2 0 7H10c.4-2 .9-5.9 1-7Zm1.3 0c0 1.2-.2 5.2 0 7h1.4v-.2l.4-6.8h-1.8Zm2.1 6.9c.3-2.6.3-2.7.5-7h.8l.3 7h-1.6Zm2.4 0a87 87 0 0 1-.4-7h1.4v7h-1Zm1.6-7h1.2l.7 7h-1.8v-7Zm2.6 7c0-1.9-.5-5.8-.6-7a109.8 109.8 0 0 0 1.5 0v7h-1Zm3-7h-1.4v7h1.8c0-3.3-.4-6.4-.4-7Zm1 7c0-3.2-.3-6.2-.3-7h1.6c0 1 .2 5 0 7h-1.2Zm2-7h.6l1.2 7h-1.7v-7Zm2.5 7a6135.2 6135.2 0 0 1-1.1-7H30l.6 7h-1Zm1.7 0c0-1.9-.4-5.8-.6-7H32c0 1 .3 4.6.2 7h-.9Zm1.4-7H34c.1 1 .6 5 .7 7.1H33l-.2-7Zm-29 7a29.8 29.8 0 0 1 5-7l-2.5 7H3.7Zm2.2.8h.6a704 704 0 0 1 44 .7c.1 0 .4.2.4.6v23.9c-4.3-.1-17.6-.2-28.6-.1V35c0-.6 0-2-.8-2.2h-8.7a1 1 0 0 0-1 1c-.2.8-.3 2-.3 3.5 0 2.9-.2 5.4-.3 6.3h-6c0-2.7.4-21.8.8-25.1Zm10.4 15V39l-.2 4.6h-4c.1-1 .3-3.5.3-6.3l.2-3.5c0-.2.2-.3.4-.3h3.5ZM17 39a91.8 91.8 0 0 0 0-5.6h4.3c.1.2.3 1 .3 1.6v8.6H17V39Zm35 6.7-5.5.1a4083.4 4083.4 0 0 0-34 0h-.8c-1.8 0-7 0-8-.2 0-.3 0-1 .3-1.2a4016.2 4016.2 0 0 1 48 0c.2 0 .2.1.3.5l-.2.8Zm-42.6-14c1.3.2 2.2-.5 2.7-1.2l.3.4c.4.4.9.6 1.6.6 1.3 0 2.1-.4 2.6-.9l.2.3c.3.5.8.8 1.5.9h.7a3 3 0 0 0 2-.6l.5-.7a3 3 0 0 0 2.4 1.2c.8 0 1.5-.3 2-.8.5-.6.7-1.4.6-2.4v-.2A14 14 0 0 0 22 24a63.7 63.7 0 0 0-10.1 0v.1a45.6 45.6 0 0 0-4.8 4.1c-.1 1.1.2 3.2 2.2 3.4Zm14.5-.7c-1.6 0-2.1-1.5-2.2-1.5 0-.2-.2-.3-.4-.3l-.3.4c0 .4-.1.8-.5 1-.5.5-1.2.6-2.1.5-.5-.1-.8-.3-1-.6-.3-.3-.2-.8-.2-.8a.4.4 0 0 0-.4-.4c-.1 0-.3.1-.3.3-.1.4-.8 1.3-2.5 1.2-.5 0-.8-.1-1-.4-.5-.4-.4-1-.4-1l-.3-.3c-.2 0-.4 0-.4.2s-.7 2-2.4 1.7c-1.5 0-1.6-1.7-1.6-2.3.5 0 5.2-.3 18 .1 0 .6-.2 1.2-.6 1.6-.3.4-.8.6-1.4.6Zm-6.6-3.1.1-3.3 2.4.1c.3.6.9 2.1 1.1 3.3a336.7 336.7 0 0 0-3.6-.1Zm8.2.2-3.8-.1-1.1-3.3 1.3.1h.1a12 12 0 0 1 3.5 3.3Zm-8.8-3.5a46.5 46.5 0 0 1-.1 3.3h-3.8l2-3.3h1.9Zm-4.4.2 1.6-.1-1.9 3.2H8.4c1.4-1.2 3.5-2.8 4-3Zm28.4 15.4c-.4-.3-.6-.9-.6-1.8v-.7l.1-7.4c0-.7.2-1 .5-1.1l.2.3-.2-.3c.5-.2 6.4-.4 7.4.2.2.2.3.3.3.5a77.6 77.6 0 0 1-.4 10.3c-.2.2-.5.2-.8.2a30.9 30.9 0 0 0-5.9 0 1 1 0 0 1-.6-.2ZM41 30l-.1.5v8c0 1 .1 1.2.2 1.3h.6a31.6 31.6 0 0 1 5.8 0c.2-.2.2-.8.2-1V30c-.3-.1-1.2-.3-3.3-.3h-.1L41 30Zm-11.8 9.7c0 .1 0 .3.3.5.5.3 2.3.4 4 .4l3.4-.2-.2-.4.2.4c.3-.2.4-.4.5-1.1V31c0-.8-.1-1.4-.5-1.7-.4-.4-.9-.3-1-.3h-5.5c-.4 0-.6 0-.8.2-.3.3-.4.9-.4 1.5a215.6 215.6 0 0 0 0 8.8Zm.7-8.8c0-.2 0-.8.2-1h.2a58.9 58.9 0 0 0 6.1.1c.3.2.4.6.4 1.2v.7a174.6 174.6 0 0 1-.2 7.8l-3.3.1c-2.2 0-3.1-.1-3.4-.2a77.8 77.8 0 0 1 0-8.7Zm5.3.5H34a.4.4 0 0 1-.3-.4c0-.2.1-.3.3-.3h1.5c.2.1.6.5.6 1.3v1.5c0 .3-.2.4-.4.4a.4.4 0 0 1-.3-.3v-1.7c0-.3-.1-.5-.2-.5Zm.5 3.4c-.2 0-.3.2-.3.4l.2 3c0 .2.1.4.3.4.2 0 .4-.2.4-.4l-.2-3c0-.3-.2-.4-.4-.4Zm6.3-3.5a.4.4 0 0 1 0-.7h1.4c.2-.1.4 0 .4.2s-.2.4-.4.4l-1.4.1Zm2.7-.2h1.2c.3 0 .4 0 .5.6v2.2c0 .2.1.4.3.4.2 0 .4-.2.4-.4v-2.2c0-.9-.4-1.3-1.1-1.3h-1.3c-.2 0-.4.1-.4.3 0 .2.2.4.4.4Zm1.6 4.1c0-.2.1-.3.3-.3.2 0 .4.1.4.3V37c0 .2 0 .4-.3.4a.4.4 0 0 1-.3-.3l-.1-1.9Zm-26-1c-.1 0-.3.2-.3.4v.1l.2 3.5c0 .2.1.4.3.4.2 0 .4-.2.4-.4l-.2-3.5v-.1c0-.2-.1-.4-.3-.3Zm-.1 5.4c0-.2.1-.3.3-.3.2 0 .4.1.4.3V42c0 .2-.2.4-.4.4a.4.4 0 0 1-.3-.4v-2.4Z" fill="currentColor"></path>` : `${stageId === "storage" ? `<path fill-rule="evenodd" clip-rule="evenodd" d="m52.8 20.4-.1-6.4c0-.6-.5-1-1-1H49l-12.5.1-11.6.2H18a1605 1605 0 0 1-14.2.2 1 1 0 0 0-.6.2 1 1 0 0 0-.3.7V21l.2 13.4V42l.4.7.6.2H10l17.7.2h3.1l18.1-.3 3-.1c.6 0 1-.4 1-1l.1-6.4c.2-4.7 0-10.1 0-14.9ZM26.5 40v-3.3l-.1-.5V35l-.1-3.2-.1-2.6c0-.2-.2-.4-.4-.4h-.1a53.8 53.8 0 0 1-6 0v-7.7l16.6-.2v18.9l-9.8.2ZM3.9 37.3v-2.9l-.2-13H6l13-.2V29l-8.3.3H10l-2.8.1H7l-.3.2v.3c.4 2.1.4 8.2.3 10l-3-.2v-2.4Zm21.7-5.4v.8H7.8l-.1-1h.4l17.5-.4v.6ZM7.8 33.4h17.8v.8l-17.8.3v-1Zm-.1-2.3-.2-1 2.6-.2h.5a173.5 173.5 0 0 1 14.9-.3v1l-17 .4h-.8Zm.1 4.1 17.9-.3v1c-3.5-.2-15.9 0-17.9 0v-.7ZM37 21l15.1-.3a227 227 0 0 1 0 18.8l-15.1.4V21ZM3.8 14.3l.2-.1h3.4A1612.4 1612.4 0 0 0 25 14l11.6-.2h15.2c.2 0 .3 0 .3.2l.1 6-32.8.5-13.4.2H3.7a1975 1975 0 0 1 0-6.4ZM4.2 42H4v-1.7l3.1.1V42l-2.9.1Zm4.6 0h-1v-5.4c2 0 14.5-.3 18 0v5.6a409.3 409.3 0 0 1-17-.3Zm43-.2-3 .1-18 .3h-4.4v-1.5l25.7-.6A2381.8 2381.8 0 0 1 52 42ZM26.6 18.6h5c.1 0 .4-.1.6-.4v-2.3c-.4-.3-1-.3-1.5-.2h-.1a162.8 162.8 0 0 1-6.9.2l-.1.4v1.8c0 .4 0 .5 3 .5Zm-2.4-1V17l.1-.7h7.3v.1a9.5 9.5 0 0 1 0 1.3h-.1a99.7 99.7 0 0 1-7.3-.2Zm-16.8.7a.6.6 0 0 1-.2-.4v-.1l.1-1.7c.2-.3.5-.4.7-.4h4c4 0 4 0 4 .4V18l-.2.5c-.2.2-.5.2-1 .2H8.3c-.5 0-.9 0-1.1-.3Zm.6-1.9v1.4s.2.1.8 0h.1a170.4 170.4 0 0 1 6.3 0v-1.4a99.8 99.8 0 0 0-7.2 0Zm34.4 2.2h4.9c.2 0 .5-.1.6-.4.1-.2.2-.5.1-1.7v-.1l-.1-.5a162.8 162.8 0 0 1-8.4 0c-.1 0-.2.2-.1.4v.7a3.3 3.3 0 0 0-.1.4v.7c0 .4 0 .5 3.1.5ZM40 17.4a3.7 3.7 0 0 0 0-.2v-.8h.5a173.5 173.5 0 0 0 5.9 0h1v.1a9.5 9.5 0 0 1-.1 1.3 99.7 99.7 0 0 1-7.3-.2v-.2Zm10.8 1a.4.4 0 0 1-.4-.3l-.2-3.4c0-.1.2-.3.4-.3s.3.1.3.3L51 18c0 .2-.1.4-.3.4Zm.2 10.5c.2 0 .4-.1.4-.3L51 22c0-.2-.1-.3-.3-.3-.2 0-.4.2-.4.4l.3 6.5c0 .2.1.3.3.3Zm-.3 1.8c0-.2.1-.3.3-.3.2 0 .4.1.4.3v3.6c0 .2-.2.4-.4.4a.4.4 0 0 1-.3-.4v-3.6Z" fill="currentColor"></path>` : ``}`}`}`}`}`}</svg>`;
});
const css$r = {
  code: ".title.svelte-1ogs1lm{align-items:center;display:flex;gap:.5rem}.title.svelte-1ogs1lm svg{aspect-ratio:1;width:2rem}.items.svelte-1ogs1lm{display:flex;justify-content:space-evenly}",
  map: null
};
const AttackStage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $attackableStages, $$unsubscribe_attackableStages;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $canApplyAction, $$unsubscribe_canApplyAction;
  let $selectedPosition, $$unsubscribe_selectedPosition;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { machine: machine2 } = getGameContext();
  const { inProgressEvent, applyAction, cancel, canApplyAction, selectedOption: selectedPosition, formAction, buttonDisabled, buttonDisabledReason } = createActionHandler("attack", {
    extractSelectedOption: (event) => event.position?.toString(),
    createEvent: (_, pos) => ({
      position: pos ? pos.split(",").map(Number) : void 0
    })
  });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_canApplyAction = subscribe(canApplyAction, (value) => $canApplyAction = value);
  $$unsubscribe_selectedPosition = subscribe(selectedPosition, (value) => $selectedPosition = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  const attackableStages = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    return gameState.attackableStages.map((stage) => {
      return {
        ...stage,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        attack: gameState.executableAttacks.find((attack) => attack.target.stageId === stage.id && attack.target.supplyChainId === stage.supplyChainId)
      };
    });
  });
  $$unsubscribe_attackableStages = subscribe(attackableStages, (value) => $attackableStages = value);
  $$result.css.add(css$r);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `${validate_component(Action, "Action").$$render($$result, { disabled: !$attackableStages.length }, {}, {
      default: () => {
        return `Stufe angreifen`;
      }
    })} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Stufe angreifen" }, {}, {
      default: () => {
        return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
          default: () => {
            return `Welche der Stufen möchtest Du angreifen?`;
          }
        })} <form>${validate_component(RadioOptions, "RadioOptions").$$render($$result, {}, {}, {
          default: () => {
            return `${each($attackableStages, (boardStage) => {
              let stage = getStage(boardStage.id);
              return ` ${validate_component(RadioButton, "RadioButton").$$render(
                $$result,
                {
                  disabled: !$canApplyAction,
                  value: boardStage.coordinate.toString(),
                  group: $selectedPosition
                },
                {
                  group: ($$value) => {
                    $selectedPosition = $$value;
                    $$settled = false;
                  }
                },
                {
                  title: () => {
                    return `<div class="title svelte-1ogs1lm">${validate_component(Stage, "Stage").$$render($$result, { stageId: stage.id }, {}, {})} ${escape(stage.name)}</div> `;
                  },
                  default: () => {
                    return `${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
                      default: () => {
                        return `<div class="items svelte-1ogs1lm">${each(boardStage.attack.target.requiredItems, (item) => {
                          return `<div class="item">${validate_component(Item, "Item").$$render($$result, { itemId: item }, {}, {})} </div>`;
                        })}</div> `;
                      }
                    })} `;
                  }
                }
              )}`;
            })}`;
          }
        })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
          default: () => {
            return `${validate_component(Button, "Button").$$render(
              $$result,
              {
                disabled: $buttonDisabled,
                disabledReason: $buttonDisabledReason,
                type: "submit",
                size: "small",
                inverse: true
              },
              {},
              {
                default: () => {
                  return `Bestätigen`;
                }
              }
            )}`;
          }
        })}</form>`;
      }
    })}` : ``}`;
  } while (!$$settled);
  $$unsubscribe_attackableStages();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_canApplyAction();
  $$unsubscribe_selectedPosition();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return $$rendered;
});
const css$q = {
  code: ".stage.svelte-1a77y01.svelte-1a77y01{align-items:center;background:var(--color-white-80);border-radius:var(--radius-sm);display:flex;gap:.5rem;padding:.5rem}@supports (color:color-mix(in lch,red,blue)) and (top:var(--f )){.stage.svelte-1a77y01.svelte-1a77y01{background:color-mix(in oklab,var(--color-white-80),transparent 60%)}}.stage.svelte-1a77y01 .icon.svelte-1a77y01{height:2rem;margin-left:.5rem;width:2rem}.stage.svelte-1a77y01 .name.svelte-1a77y01{flex:1;font-weight:700}.stage.svelte-1a77y01 .items.svelte-1a77y01{background:var(--color-bg-strong);border-radius:var(--radius-sm);display:flex;gap:1rem;padding:.5rem}.stage.svelte-1a77y01 .items.svelte-1a77y01 svg{height:2.5rem;width:2.5rem}",
  map: null
};
const DefendStage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isEnabled, $$unsubscribe_isEnabled;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $boardStage, $$unsubscribe_boardStage;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { machine: machine2 } = getGameContext();
  const { inProgressEvent, applyAction, cancel, isEnabled, formAction, buttonDisabled, buttonDisabledReason } = createActionHandler("defend", {
    createEvent: (gameState) => ({ position: gameState.activePlayerPosition }),
    enabledCheck: (gameState) => gameState.canDefendStage
  });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_isEnabled = subscribe(isEnabled, (value) => $isEnabled = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  const boardStage = useSelector(machine2.service, ({ context }) => findStageAt(GameState.fromContext(context).activePlayerPosition));
  $$unsubscribe_boardStage = subscribe(boardStage, (value) => $boardStage = value);
  $$result.css.add(css$q);
  $$unsubscribe_isEnabled();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_boardStage();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return `${validate_component(Action, "Action").$$render($$result, { disabled: !$isEnabled }, {}, {
    default: () => {
      return `Stufe verteidigen`;
    }
  })} ${$inProgressEvent && $boardStage ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Stufe verteidigen" }, {}, {
    default: () => {
      let stage = getStage($boardStage.id);
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Möchtest Du wirklich diese Stufe verteidigen?`;
        }
      })} <form><div class="stage svelte-1a77y01"><div class="icon svelte-1a77y01">${validate_component(Stage, "Stage").$$render($$result, { stageId: $boardStage.id }, {}, {})}</div> <div class="name svelte-1a77y01">${escape(stage.name)}</div> <div class="items svelte-1a77y01">${each(stage.defenseItems, (itemId) => {
        return `${validate_component(Item, "Item").$$render($$result, { itemId }, {}, {})}`;
      })}</div></div> ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render(
            $$result,
            {
              type: "submit",
              disabled: $buttonDisabled,
              disabledReason: $buttonDisabledReason,
              inverse: true,
              size: "small"
            },
            {},
            {
              default: () => {
                return `Stufe verteidigen`;
              }
            }
          )}`;
        }
      })}</form>`;
    }
  })}` : ``}`;
});
const css$p = {
  code: ".item-choice.svelte-sj396j.svelte-sj396j{align-items:center;display:flex;gap:.5rem}.item-choice.svelte-sj396j .icon.svelte-sj396j{flex-shrink:0;height:2rem;width:2rem}",
  map: null
};
const ExchangeDigitalFootprint = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isEnabled, $$unsubscribe_isEnabled;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $selectedItemId, $$unsubscribe_selectedItemId;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { inProgressEvent, isEnabled, applyAction, cancel, selectedOption: selectedItemId, formAction, buttonDisabled, buttonDisabledReason } = createActionHandler("exchange-digital-footprint", {
    extractSelectedOption: (event) => event.item,
    enabledCheck: (gameState) => gameState.defenseInventory["digital-footprint"] > 0,
    createEvent: (_, item) => ({ item })
  });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_isEnabled = subscribe(isEnabled, (value) => $isEnabled = value);
  $$unsubscribe_selectedItemId = subscribe(selectedItemId, (value) => $selectedItemId = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  $$result.css.add(css$p);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `${validate_component(Action, "Action").$$render(
      $$result,
      {
        title: "Rollenfähigkeit",
        disabled: !$isEnabled
      },
      {},
      {
        default: () => {
          return `&quot;Digital Footprint&quot; eintauschen`;
        }
      }
    )} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Rollenfähigkeit einsetzten" }, {}, {
      default: () => {
        return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
          default: () => {
            return `Tausche den Digital Footprint gegen <strong data-svelte-h="svelte-1541scj">einen</strong> anderen Schutzgegenstand indem du einen
      Gegenstand aus der Liste wählst.`;
          }
        })} <form>${validate_component(RadioOptions, "RadioOptions").$$render($$result, {}, {}, {
          default: () => {
            return `${each(ITEMS.filter((item) => item.id !== "digital-footprint" && isDefenseItemId(item.id)), (item) => {
              return `${validate_component(RadioButton, "RadioButton").$$render(
                $$result,
                { value: item.id, group: $selectedItemId },
                {
                  group: ($$value) => {
                    $selectedItemId = $$value;
                    $$settled = false;
                  }
                },
                {
                  default: () => {
                    return `<div class="item-choice svelte-sj396j"><div class="icon svelte-sj396j">${validate_component(Item, "Item").$$render($$result, { itemId: item.id }, {}, {})}</div> <div class="name">${escape(item.name)}</div></div> `;
                  }
                }
              )}`;
            })}`;
          }
        })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
          default: () => {
            return `${validate_component(Button, "Button").$$render(
              $$result,
              {
                disabled: $buttonDisabled,
                disabledReason: $buttonDisabledReason,
                size: "small",
                inverse: true,
                type: "submit"
              },
              {},
              {
                default: () => {
                  return `Auswahl bestätigen`;
                }
              }
            )}`;
          }
        })}</form>`;
      }
    })}` : ``}`;
  } while (!$$settled);
  $$unsubscribe_isEnabled();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_selectedItemId();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return $$rendered;
});
const IsAttackingStage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isEnabled, $$unsubscribe_isEnabled;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { isEnabled, inProgressEvent, applyAction, cancel, buttonDisabled, buttonDisabledReason, formAction } = createActionHandler("is-attacking-stage", {
    createEvent: (gameState) => ({ position: gameState.activePlayerPosition }),
    enabledCheck: (gameState) => !!BOARD_SUPPLY_CHAINS.flat().find((stage) => isEqual$1(stage.coordinate, gameState.activePlayerPosition))
  });
  $$unsubscribe_isEnabled = subscribe(isEnabled, (value) => $isEnabled = value);
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  $$unsubscribe_isEnabled();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return `${validate_component(Action, "Action").$$render(
    $$result,
    {
      title: "Rollenfähigkeit",
      disabled: !$isEnabled
    },
    {},
    {
      default: () => {
        return `Aktiver Angriff?`;
      }
    }
  )} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Rollenfähigkeit einsetzen" }, {}, {
    default: () => {
      return `<form>${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Möchtest du abfragen ob der/die Angreifer:in einen aktiven Angriff auf die Stufe auf der du
        dich befindest hat?`;
        }
      })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render(
            $$result,
            {
              type: "submit",
              inverse: true,
              size: "small",
              disabled: $buttonDisabled,
              disabledReason: $buttonDisabledReason
            },
            {},
            {
              default: () => {
                return `Bestätigen`;
              }
            }
          )}`;
        }
      })}</form>`;
    }
  })}` : ``}`;
});
const IsNextToAttacker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isEnabled, $$unsubscribe_isEnabled;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { inProgressEvent, isEnabled, applyAction, cancel, buttonDisabled, buttonDisabledReason, formAction } = createActionHandler("is-next-to-attacker", {
    createEvent: (gameState) => ({ position: gameState.activePlayerPosition })
  });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_isEnabled = subscribe(isEnabled, (value) => $isEnabled = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  $$unsubscribe_isEnabled();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return `${validate_component(Action, "Action").$$render(
    $$result,
    {
      title: "Rollenfähigkeit",
      disabled: !$isEnabled
    },
    {},
    {
      default: () => {
        return `Angreifer:in angrenzend?`;
      }
    }
  )} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Rollenfähigkeit einsetzen" }, {}, {
    default: () => {
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Möchtest du abfragen ob der/die Angreifer:in sich auf einem der angrenzenden Felder befindet?`;
        }
      })} <form>${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render(
            $$result,
            {
              type: "submit",
              disabled: $buttonDisabled,
              disabledReason: $buttonDisabledReason,
              inverse: true,
              size: "small"
            },
            {},
            {
              default: () => {
                return `Bestätigen`;
              }
            }
          )}`;
        }
      })}</form>`;
    }
  })}` : ``}`;
});
const QuarterReveal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isEnabled, $$unsubscribe_isEnabled;
  let $inProgressEvent, $$unsubscribe_inProgressEvent;
  let $buttonDisabled, $$unsubscribe_buttonDisabled;
  let $buttonDisabledReason, $$unsubscribe_buttonDisabledReason;
  const { inProgressEvent, isEnabled, applyAction, cancel, formAction, buttonDisabled, buttonDisabledReason } = createActionHandler("quarter-reveal", { createEvent: () => ({}) });
  $$unsubscribe_inProgressEvent = subscribe(inProgressEvent, (value) => $inProgressEvent = value);
  $$unsubscribe_isEnabled = subscribe(isEnabled, (value) => $isEnabled = value);
  $$unsubscribe_buttonDisabled = subscribe(buttonDisabled, (value) => $buttonDisabled = value);
  $$unsubscribe_buttonDisabledReason = subscribe(buttonDisabledReason, (value) => $buttonDisabledReason = value);
  $$unsubscribe_isEnabled();
  $$unsubscribe_inProgressEvent();
  $$unsubscribe_buttonDisabled();
  $$unsubscribe_buttonDisabledReason();
  return `${validate_component(Action, "Action").$$render(
    $$result,
    {
      title: "Rollenfähigkeit",
      disabled: !$isEnabled
    },
    {},
    {
      default: () => {
        return `Viertel aufdecken`;
      }
    }
  )} ${$inProgressEvent ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Rollenfähigkeit einsetzen" }, {}, {
    default: () => {
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Möchtest du abfragen auf welchem Viertel des Spielfelds der/die Angreifer:in sich befindet?`;
        }
      })} <form>${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render(
            $$result,
            {
              disabled: $buttonDisabled,
              disabledReason: $buttonDisabledReason,
              inverse: true,
              size: "small"
            },
            {},
            {
              default: () => {
                return `Bestätigen`;
              }
            }
          )}`;
        }
      })}</form>`;
    }
  })}` : ``}`;
});
const Chevron_up = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m18 15l-6-6l-6 6"/>`}<!-- HTML_TAG_END --></svg>`;
});
const css$o = {
  code: ".actions.svelte-xn6clc.svelte-xn6clc{left:calc(11.11111%*(var(--x)));position:absolute;top:calc(12.5%*(var(--y)));z-index:var(--layer-grid-actions)}.actions.svelte-xn6clc ul.svelte-xn6clc{background:#fff;border-radius:var(--radius-sm);box-shadow:0 0 1rem rgba(0,0,0,.333);color:#000;font-size:var(--scale-00);list-style-type:none;margin:0;min-width:15rem;overflow:hidden;padding:0;position:absolute}.actions.svelte-xn6clc ul li.title.svelte-xn6clc{box-shadow:0 0 .5rem rgba(0,0,0,.2);font-weight:var(--weight-bold);padding:.5rem 1rem}.actions.svelte-xn6clc ul li.title button.svelte-xn6clc{align-items:center;display:flex;justify-content:space-between;width:100%}.actions.svelte-xn6clc ul.svelte-xn6clc:not(.on-left){left:calc(var(--grid-square-size) + .3rem)}.actions.svelte-xn6clc ul.on-left.svelte-xn6clc{right:.3rem}.actions.svelte-xn6clc ul.svelte-xn6clc:not(.on-top){top:.3rem}.actions.svelte-xn6clc ul.on-top.svelte-xn6clc{bottom:calc(0px - var(--grid-square-size) + .3rem)}",
  map: null
};
const Actions = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let activePlayerCharacter;
  let $activePlayerCharacterId, $$unsubscribe_activePlayerCharacterId;
  let $canPerformAction, $$unsubscribe_canPerformAction;
  let $activePlayerPosition, $$unsubscribe_activePlayerPosition;
  const { machine: machine2 } = getGameContext();
  const canPerformAction = useSelector(machine2.service, (state) => state.matches("Playing.Gameloop.Playing.Action"));
  $$unsubscribe_canPerformAction = subscribe(canPerformAction, (value) => $canPerformAction = value);
  const activePlayerPosition = useSelector(
    machine2.service,
    ({ context }) => {
      const gameState = GameState.fromContext(context);
      return gameState.activePlayerPosition;
    },
    isEqual$1
  );
  $$unsubscribe_activePlayerPosition = subscribe(activePlayerPosition, (value) => $activePlayerPosition = value);
  const activePlayerCharacterId = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).activePlayer.character);
  $$unsubscribe_activePlayerCharacterId = subscribe(activePlayerCharacterId, (value) => $activePlayerCharacterId = value);
  $$result.css.add(css$o);
  activePlayerCharacter = getCharacter($activePlayerCharacterId);
  $$unsubscribe_activePlayerCharacterId();
  $$unsubscribe_canPerformAction();
  $$unsubscribe_activePlayerPosition();
  return `${$canPerformAction ? `<div class="actions svelte-xn6clc"${add_styles({
    "--x": $activePlayerPosition[0],
    "--y": $activePlayerPosition[1]
  })}><ul class="${[
    "svelte-xn6clc",
    ($activePlayerPosition[0] > 5 ? "on-left" : "") + " " + ($activePlayerPosition[1] > 4 ? "on-top" : "")
  ].join(" ").trim()}"><li class="title svelte-xn6clc"><button class="unstyled svelte-xn6clc">Aktion auswählen
          ${`${validate_component(Chevron_up, "CollapseIcon").$$render($$result, {}, {}, {})}`}</button></li> ${`<li>${validate_component(CollectItem, "CollectItem").$$render($$result, {}, {}, {})}</li> ${!isDefenseCharacter(activePlayerCharacter) ? `<li>${validate_component(AttackStage, "AttackStage").$$render($$result, {}, {}, {})}</li> <li>${validate_component(ExchangeJoker, "ExchangeJoker").$$render($$result, {}, {}, {})}</li>` : `<li>${validate_component(DefendStage, "DefendStage").$$render($$result, {}, {}, {})}</li> <li>${validate_component(AskQuestion, "AskQuestion").$$render($$result, {}, {}, {})}</li> <li>${activePlayerCharacter.ability === "quarter-reveal" ? `${validate_component(QuarterReveal, "QuarterReveal").$$render($$result, {}, {}, {})}` : `${activePlayerCharacter.ability === "exchange-digital-footprint" ? `${validate_component(ExchangeDigitalFootprint, "ExchangeDigitalFootprint").$$render($$result, {}, {}, {})}` : `${activePlayerCharacter.ability === "is-attacking-stage" ? `${validate_component(IsAttackingStage, "IsAttackingStage").$$render($$result, {}, {}, {})}` : `${activePlayerCharacter.ability === "is-next-to-attacker" ? `${validate_component(IsNextToAttacker, "IsNextToAttacker").$$render($$result, {}, {}, {})}` : ``}`}`}`}</li>`}`}</ul></div>` : ``}`;
});
const ResultDidUseJoker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${`${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Frage stellen" }, {}, {
    default: () => {
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `<strong data-svelte-h="svelte-3by6bo">Du erhältst keine Antwort auf deine Frage.</strong>`;
        }
      })} ${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Leider erhältst du diesmal keine Antwort. Der/die Angreifer:in hat ihren Joker eingesetzt, um
      auf die Frage nicht antworten zu müssen. Was das wohl bedeutet?`;
        }
      })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render($$result, { size: "small", inverse: true }, {}, {
            default: () => {
              return `Weiter geht&#39;s!`;
            }
          })}`;
        }
      })}`;
    }
  })}`}`;
});
const css$n = {
  code: ".items.svelte-tkqu2o{display:flex;gap:1rem}.items.svelte-tkqu2o svg{height:4rem;width:4rem}",
  map: null
};
const ResultHasCollectedItems = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $collectedItems, $$unsubscribe_collectedItems;
  let visible = true;
  const { machine: machine2 } = getGameContext();
  const collectedItems = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    const lastFinalizedActionEvent = gameState.finalizedActionEvents.at(-1);
    if (lastFinalizedActionEvent?.action !== "ask-question" || lastFinalizedActionEvent.question !== "has-collected-items") {
      return void 0;
    }
    return BOARD_ITEMS.filter((item) => isAttackItemId(item.id) && isEqual$1(item.position, lastFinalizedActionEvent.position)).map((item) => ({
      id: item.id,
      count: gameState.attackInventory[item.id]
    })).filter((item) => item.count);
  });
  $$unsubscribe_collectedItems = subscribe(collectedItems, (value) => $collectedItems = value);
  $$result.css.add(css$n);
  $$unsubscribe_collectedItems();
  return `${$collectedItems && visible ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Frage stellen" }, {}, {
    default: () => {
      return `${$collectedItems.length > 0 ? `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Der/die Angreifer:in hat folgende Gegenstände gesammelt:`;
        }
      })} <div class="items svelte-tkqu2o">${each($collectedItems, (item) => {
        return `${validate_component(Item, "Item").$$render($$result, { itemId: item.id }, {}, {})}`;
      })}</div>` : `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Der/die Angreifer:in hat keine der Gegenstände gesammelt.`;
        }
      })}`} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render($$result, { inverse: true, size: "small" }, {}, {
            default: () => {
              return `Weiter geht&#39;s!`;
            }
          })}`;
        }
      })}`;
    }
  })}` : ``}`;
});
const ResultIsAttackingStage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isAttackingStage, $$unsubscribe_isAttackingStage;
  const { machine: machine2 } = getGameContext();
  const isAttackingStage = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    const lastFinalizedActionEvent = gameState.finalizedActionEvents.at(-1);
    if (lastFinalizedActionEvent?.action !== "is-attacking-stage") {
      return false;
    }
    return !!gameState.activeTargetedAttacks.find((attack) => {
      const stage = BOARD_SUPPLY_CHAINS.flat().find((stage2) => stage2.supplyChainId === attack.target.supplyChainId && stage2.id === attack.target.stageId);
      return isEqual$1(stage?.coordinate, lastFinalizedActionEvent.position);
    });
  });
  $$unsubscribe_isAttackingStage = subscribe(isAttackingStage, (value) => $isAttackingStage = value);
  $$unsubscribe_isAttackingStage();
  return `${`${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Frage stellen" }, {}, {
    default: () => {
      return `${$isAttackingStage ? `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Der/die Angreifer:in hat einen gezielten Angriff auf diese Stufe.`;
        }
      })}` : `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Der/die Angreifer:in hat keinen gezielten Angriff auf diese Stufe.`;
        }
      })}`} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render($$result, { inverse: true, size: "small" }, {}, {
            default: () => {
              return `Weiter geht&#39;s!`;
            }
          })}`;
        }
      })}`;
    }
  })}`}`;
});
const ResultIsNextToAttacker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isNextToAttacker, $$unsubscribe_isNextToAttacker;
  const { machine: machine2 } = getGameContext();
  const isNextToAttacker = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    const lastFinalizedActionEvent = gameState.finalizedActionEvents.at(-1);
    if (lastFinalizedActionEvent?.action !== "is-next-to-attacker") {
      return false;
    }
    return Math.abs(lastFinalizedActionEvent.position[0] - gameState.playerPositions.attacker[0]) + Math.abs(lastFinalizedActionEvent.position[1] - gameState.playerPositions.attacker[1]) <= 1;
  });
  $$unsubscribe_isNextToAttacker = subscribe(isNextToAttacker, (value) => $isNextToAttacker = value);
  $$unsubscribe_isNextToAttacker();
  return `${`${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Frage stellen" }, {}, {
    default: () => {
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Angreifer:in <strong>ist ${escape($isNextToAttacker ? "" : "nicht")}</strong> auf diesem oder einem angrenzenden
      Feld.`;
        }
      })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render($$result, { inverse: true, size: "small" }, {}, {
            default: () => {
              return `Weiter geht&#39;s!`;
            }
          })}`;
        }
      })}`;
    }
  })}`}`;
});
const ResultIsOnField = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${` ${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Frage stellen" }, {}, {
    default: () => {
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Der/die Angreifer:in ist leider nicht auf diesem Feld.`;
        }
      })} ${validate_component(Actions$1, "Actions").$$render($$result, {}, {}, {
        default: () => {
          return `${validate_component(Button, "Button").$$render($$result, { inverse: true, size: "small" }, {}, {
            default: () => {
              return `Weiter geht&#39;s!`;
            }
          })}`;
        }
      })}`;
    }
  })}`}`;
});
const ResultQuarterReveal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $attackerFields, $$unsubscribe_attackerFields;
  const sections = [
    [
      ...Array.from({ length: 5 }, (_, i) => [i, 0]),
      ...Array.from({ length: 5 }, (_, i) => [i, 1]),
      ...Array.from({ length: 4 }, (_, i) => [i, 2]),
      ...Array.from({ length: 4 }, (_, i) => [i, 3])
    ],
    [
      ...Array.from({ length: 4 }, (_, i) => [8 - i, 0]),
      ...Array.from({ length: 4 }, (_, i) => [8 - i, 1]),
      ...Array.from({ length: 5 }, (_, i) => [8 - i, 2]),
      ...Array.from({ length: 5 }, (_, i) => [8 - i, 3])
    ],
    [
      ...Array.from({ length: 5 }, (_, i) => [i, 4]),
      ...Array.from({ length: 5 }, (_, i) => [i, 5]),
      ...Array.from({ length: 4 }, (_, i) => [i, 6]),
      ...Array.from({ length: 4 }, (_, i) => [i, 7])
    ],
    [
      ...Array.from({ length: 4 }, (_, i) => [8 - i, 4]),
      ...Array.from({ length: 4 }, (_, i) => [8 - i, 5]),
      ...Array.from({ length: 5 }, (_, i) => [8 - i, 6]),
      ...Array.from({ length: 5 }, (_, i) => [8 - i, 7])
    ]
  ];
  const { machine: machine2, highlightedFields } = getGameContext();
  const attackerFields = useSelector(
    machine2.service,
    ({ context }) => {
      const gameState = GameState.fromContext(context);
      const lastDefenderAction = gameState.finalizedPlayerEvents.filter((event) => event.playerId !== "attacker").at(-1);
      if (!lastDefenderAction)
        return void 0;
      const attackerPosition = gameState.finalizedPlayerEvents.slice(0, gameState.finalizedPlayerEvents.indexOf(lastDefenderAction)).filter((event) => event.playerId === "attacker").filter(guardForGameEventType("move")).at(-1)?.to;
      if (!attackerPosition)
        return void 0;
      return sections.find((section) => {
        return section.find((coordinate) => isEqual$1(coordinate, attackerPosition));
      });
    },
    isEqual$1
  );
  $$unsubscribe_attackerFields = subscribe(attackerFields, (value) => $attackerFields = value);
  onDestroy(() => {
    highlightedFields.update((fields) => {
      fields.reveal = void 0;
      return fields;
    });
  });
  {
    highlightedFields.update((fields) => {
      fields.reveal = $attackerFields;
      return fields;
    });
  }
  $$unsubscribe_attackerFields();
  return `${`${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Angreifer:innen Position" }, {}, {
    default: () => {
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Das Viertel des Spielbretts auf dem sich der/die Angreifer:in befindet werden nun angezeigt.`;
        }
      })}`;
    }
  })}`}`;
});
const ReactionResult = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $question, $$unsubscribe_question;
  let $side, $$unsubscribe_side;
  let $didUseJoker, $$unsubscribe_didUseJoker;
  const { machine: machine2 } = getGameContext();
  const didUseJoker = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    const lastDefenderAction = gameState.finalizedPlayerEvents.filter((event) => event.playerId !== "attacker").at(-1);
    if (!lastDefenderAction || !gameEventRequiresReaction(lastDefenderAction))
      return void 0;
    const reactionEvent = gameState.finalizedPlayerEvents.at(gameState.finalizedPlayerEvents.indexOf(lastDefenderAction) + 1);
    if (!reactionEvent)
      return void 0;
    if (reactionEvent?.type === "reaction" && reactionEvent.action === "joker") {
      return reactionEvent.useJoker;
    }
    return void 0;
  });
  $$unsubscribe_didUseJoker = subscribe(didUseJoker, (value) => $didUseJoker = value);
  const question = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).activeQuestion);
  $$unsubscribe_question = subscribe(question, (value) => $question = value);
  const side = useSelector(machine2.service, ({ context }) => getCurrentUser(context).side);
  $$unsubscribe_side = subscribe(side, (value) => $side = value);
  $$unsubscribe_question();
  $$unsubscribe_side();
  $$unsubscribe_didUseJoker();
  return `${$question && $side === "defense" && $didUseJoker !== void 0 ? `${$didUseJoker ? `${validate_component(ResultDidUseJoker, "ResultDidUseJoker").$$render($$result, {}, {}, {})}` : `${$question === "is-on-field" ? `${validate_component(ResultIsOnField, "ResultIsOnField").$$render($$result, {}, {}, {})}` : `${$question === "has-collected-items" ? `${validate_component(ResultHasCollectedItems, "ResultHasCollectedItems").$$render($$result, {}, {}, {})}` : `${$question === "quarter-reveal" ? `${validate_component(ResultQuarterReveal, "ResultQuarterReveal").$$render($$result, {}, {}, {})}` : `${$question === "is-attacking-stage" ? `${validate_component(ResultIsAttackingStage, "ResultIsAttackingStage").$$render($$result, {}, {}, {})}` : `${$question === "is-next-to-attacker" ? `${validate_component(ResultIsNextToAttacker, "ResultIsNextToAttacker").$$render($$result, {}, {}, {})}` : ``}`}`}`}`}`}` : ``}`;
});
const css$m = {
  code: "svg.svelte-dshn4j{grid-column:1/-1;grid-row:1/-1;z-index:var(--layer-grid-backdrop)}",
  map: null
};
const Backdrop = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$m);
  return `<svg viewBox="0 0 804 715" fill="none" xmlns="http://www.w3.org/2000/svg" class="svelte-dshn4j"><g clip-path="url(#a1)"><path d="M804 0H0v715h804V0Z" fill="#1B253A"></path><mask id="b" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="804" height="715"><path d="M804 0H0v715h804V0Z" fill="#fff"></path></mask><g mask="url(#b)"><path d="M291 651 78 822l264 19-51-190Z" fill="#747D4A"></path><path d="m52 154 99 41 13-295L52 154Z" fill="#257A86"></path><path d="m-163 10 113 211L6 28l-169-18Z" fill="#247771"></path><path d="m6 28-56 193 102-67L6 28Z" fill="#297877"></path><path d="m52 154-102 67 201-26-99-41Z" fill="#227776"></path><path d="m-50 221 66 228 135-254-201 26Z" fill="#2C7871"></path><path d="m-50 221-28 271 94-43-66-228Z" fill="#317865"></path><path d="m-78 492 48 148 46-191-94 43Z" fill="#37785E"></path><path d="m6 28 46 126 112-254L6 28Z" fill="#2F7B85"></path><path d="m-30 640-112 90 220 92-108-182Z" fill="#4A7A50"></path><path d="M-163 10 6 28l158-128-327 110Z" fill="#2D7A7E"></path><path d="m-221-59 58 69 327-110-385 41Z" fill="#246E4C"></path><path d="m708 634 141 73 105-178-246 105Z" fill="#934038"></path><path d="m16 449-46 191 265-149-219-42Z" fill="#37785E"></path><path d="M235 491-30 640l321 11-56-160Z" fill="#436D56"></path><path d="M151 195 16 449l219 42-84-296Z" fill="#2D726B"></path><path d="M-30 640 78 822l213-171-321-11Z" fill="#4C764F"></path><path d="m164-100-13 295L300 62 164-100Z" fill="#2B7B8D"></path><path d="m355 309 124 182 16-252-140 70Z" fill="#585E60"></path><path d="m300 62 55 247 140-70L300 62Z" fill="#3C597F"></path><path d="M300 62 151 195l204 114-55-247Z" fill="#336882"></path><path d="m151 195 84 296 120-182-204-114Z" fill="#3C6671"></path><path d="m235 491 56 160 188-160H235Z" fill="#67715B"></path><path d="M355 309 235 491h244L355 309Z" fill="#56655E"></path><path d="m300 62 195 177 26-157-221-20Z" fill="#3A5584"></path><path d="M164-100 300 62l221 20-357-182Z" fill="#34638D"></path><path d="m495 239 178 250 20-306-198 56Z" fill="#856865"></path><path d="m291 651 51 190 210-58-261-132Z" fill="#8B674A"></path><path d="M479 491 291 651l261 132-73-292Z" fill="#8F6E4D"></path><path d="m708 634-44 143 54 34-10-177Z" fill="#853F33"></path><path d="M849 707 718 811l150 94-19-198Z" fill="#8E3D35"></path><path d="m683-20 10 203 53-107-63-96Z" fill="#725981"></path><path d="m495 239-16 252 194-2-178-250Z" fill="#886D5F"></path><path d="M683-20 521 82l172 101-10-203Z" fill="#554C76"></path><path d="M829 378 673 489l281 40-125-151Z" fill="#945050"></path><path d="M164-100 521 82 683-20l-519-80Z" fill="#3F5684"></path><path d="m521 82-26 157 198-56L521 82Z" fill="#524F7F"></path><path d="m552 783 112-6 44-143-156 149Z" fill="#914134"></path><path d="m479 491 73 292 156-149-229-143Z" fill="#9A5C4E"></path><path d="m673 489-194 2 229 143-35-145Z" fill="#9A6556"></path><path d="m693 183 136 195 41-242-177 47Z" fill="#8A5F6E"></path><path d="m693 183-20 306 156-111-136-195Z" fill="#936360"></path><path d="m708 634 10 177 131-104-141-73Z" fill="#994B3A"></path><path d="m746 76 124 60 243-236L746 76Z" fill="#765076"></path><path d="m683-20 63 96 367-176-430 80Z" fill="#644B7B"></path><path d="m746 76-53 107 177-47-124-60Z" fill="#7A5A6F"></path><path d="m673 489 35 145 246-105-281-40Z" fill="#924E4C"></path></g><mask id="c" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="804" height="715"><path d="M804 0H0v715h804V0Z" fill="#fff"></path></mask><g opacity=".1" stroke="#272D2E" stroke-width="1.2" stroke-miterlimit="10" mask="url(#c)"><path d="m1145 285-1-1-3 1-2 1-2 2-5 6h-4a122 122 0 0 1-8 0h-9l-3-6-3-4 3-3-1-2v-1l-1-1c-3-1-9-6-9-7h-4l-5-2h-6c-1 0-4 0-5-3l-1-3v-2l-3-3-1-3v-1c1-2 2-4 0-5h-1c-3-1-4-2-4-4v-4l-2-3-1-2v-4l-1-1h-1v-3l1-1-1-1h-2l-1-1v-4l-2-1-3-2c0-2-1-3-2-3h-7a59 59 0 0 0-15-7 253 253 0 0 0-26 8l-5 5v5h1l3 1 1 2v7h1l-1 2-4 4-8 22h-1l1 2 1 1 1 2-3 2-5 3-3 2-4 1-1-1-8-1-2 4-1 1-1 4-4 9-2 3-2 3 1 4 5 3h14l2-1 3-2c2-2 3 0 5 1a22 22 0 0 0 6 4c3 1 5 2 6 4l2 3 2 3-1 2c-3 2-5 3-8 2l-2-1c-1-1-1-2-2-1l-7 2h-4l-2 5h-5c0 1-4 9-6 10l-7 5v1h-8v1c0 2 0 4-2 6l-5 1-8 1-5-1c-1-1-5 0-7 1l-3 5 5 10s-8 5-9 8l-5 6-3 2-7 4-17 2a312 312 0 0 0-28 14l-2-2v-2h-17l-10-5-8-2h-8l-3 1h-6a608 608 0 0 0-12 0h-6l-6-1-2 1h-2l-1 1v1h-1l-2-2-7-10v-3l-2-3-1-2 1-2h-8c-2 0-3-1-5-3-3-2-6-4-11-5h-20c-3 0-4-1-5-4l-1-2v-2l2-5-1-3 1-5-1-2-1-1c-2-4-4-10-6-11l-4-3-1 1-1-1-1-2-2-1h-5l-3-2-4-3-1-1-2-3-5 3h-1l-2 2c0 1-1 2-3 1l-6-1-6-1-5-1-6 23c1 1 3 3 2 4v1l-1 1h-6v-2l-3 1-4 2-6 3h-5c-1-1-1-1-2 1l-1 2v1l1 1 3 2 2 2v6l3 6 1 2 1 2c0 1 1 2-1 3l-2 1v2l1 1-1 1h-1l-1 2v5h-1l2 3v2h-4l-1 1-5 3-7 5-3 2-5 4c-1 2-2 2-3 1l-2-1c-2 0-5 1-7 4l-2 3-4 4-5 1-1-5-1 2-5 1h-1l-1 1-1 1-2 2-4 2-2 1-1 1 1 2v4l-1 1h-3l2 4 1 4 1 2 4 2h2c3 1 4 1 5 3v2l1 2 1 1 1 1v6l-2 2v1l-2-1h-2l-1 1v1l1 1v2h-10l-3 2c-1 1-2 1-2 3l-2 4h-1l-2 1h-1l2 2c2 3 4 4 7 4l2 1h3l2 2-1 4-1 2-1 1-1 2-1 1 1 2 1 3 1 1v10c-1 2-1 3 1 4h2l3 1 5 3v2h6c1 2 3 2 3 2l1 2 2 1 2-1 3-1 4-3 4-3 1-2-1-2c1-2 2-3 5-3l1-1 2-1 6 1 2 1 1 1h2l2-1h2l1 1v1l1 3 2-1 1-1 1 1-1 3 1 2 2 4 1 1 1 1 1 3v5c0 1 0 2 2 2h5l2 1c2 0 3 0 3 2v1c1 2 1 3 3 3l1-1h2l1 2 3 3h1l1 1 1-1v-2l2-1h7l1 2v1l-1 1 1 1h1l3 1 3 2 4 2 1 2 2 3h2l2-1h4v2l1 3 2 1 2 2h1l3-1 1 3v1h3l2-1 3 4 1 1h2v1l1 1h1l1-2 1-1h1l7 3h9v2l-1 4 3-2 2 2 2 1 3-1 2-2 2-2h13l3-1h5l1 1 3 2 1 2 1 1v6h1l1 1-1 1h13l2-1v-1l2-2 1-1 3-1h2l4-4 3-2 3-2c1-2 2-2 3-1l2 1 5 1 1 1 3 1 3 2 1-1v-4l-2-1-3-3-1-2v-1l-1-2-3-3-2-1-3 1-3 1-5 1-3-1-2-1-1 1-1 2-1 1-1 1-2 1-2 2-4 1-2 1-2 1-1 1-2 2-1 3h-4v-1l2 1 1-1 2-2 2-2 1-1 2-2h2l4-1 2-2 2-2 1-2 1-1 2-1 2 1h8l3-1 2-1 1-1 2 2 3 3 1 2h1l1 3 2 3 2 1 3-3 1-1v1l3 2 2 5v3l-1 1h1l1-1 1-1 2 1 1 6a101 101 0 0 0 0 8l-1 2v5l-1 1-2 1h-1l-1 1-1 1-1 1c-2 1-2 1-2 3l-1 2-1 1-1 1v2h2l1 1v2l-2 2v1h4l2-2 3-1h5v1l-1 3c-1 1 0 2 1 3v4h-1l2 1 2-1 2 1h1l-3 9 1-1c2 0 3 1 4 3l3 3c2 4 3 5 4 4l4-1 3-2 2 1v1l1 2 2 1 2-1-1-6v-6h4v1l3-4 3 1 2 2 3 1 1-1v-1l1-3 2 2 1-3 1 1v1l2 2 1-2v-1l1-1v1l-1 1h2l3-3 4-2 2-1h2l2 2 3 3 2-1 4-1 2 1h1l1 1-1 1-1 2-1 2v2c2 2 3 3 5 3h1l1 1c2 0 2-1 3-4 1-2 3-1 4-2 2-1 2 0 4 1 2 2 4 1 7 0 2 0 3 3 2 4-1 2 0 5 1 8s5 3 7 2 1-3-1-4l-2-4c0-1 3-4 4-3l10-2c4-1 2-3 3-3h5c2-1 2-4 5-4s3-1 3-6c1-6 2-4 5-1 2 3 3 4 4 2l2-2 4-1 6-1 6-2c5-1 6-2 7-6l1-3h5l2-3 4-2 1-2-4-1c-1-1 1-2 2-3h6c3 0 0-2 0-3 0-2 1-3 2-3v-4l2-1h3l1-5-2-2v-2l3-1-1-2-3-2 1-4c2-1 2 2 4 2l5-7 3-12c2-3 4-1 5-2 2-2-1-3-1-5s2-2 2-3l-5-2c-1-1 2-1 5-1 2 0 2-1 2-3 0-1-1-3-2-2s-4 3-6 2c-3 0 0-1 2-2 2 0 3-2 3-4 1-2-2-2-3-3l-6-2c-4 0-2 3-4 2-3 0-3-3-1-4l4-1 3-3 4-2c1-1-1-5-3-6-1-2-4-2-7-4-3-1-5-3-4-4l3 2 4-1 6 1c3 0 0 0 0-3l-5-5-6-3c-2-1-1-5-2-6l-5-5c-1-2-1-10-9-12-7-2-8-7-9-9-1-1 0-5 1-8 1-2 3-2 5-3 2 0 1-2 0-4s1-3 4-3 3-3 7-5 8-2 11-1c2 0 2-6 2-9 1-4-3-3-8-3s-8 0-11-2c-4-2-6-3-10 5-4 7-10 4-11 2-2-3-2-7-5-7s-4-1-9-4c-5-4-4-14-1-13 4 0 11-1 11-3l1-9c1-2 9-5 9-8 1-3 1-11 10-10s4 12 3 14v7c2 1 3 2 3 5 1 4-4 2-5 3-2 2 0 4 3 4 2 0 4-1 7-7s10-9 14-10c3 0 4-1 8 1v-1l3-3 1-3v-3l1-1 2-4 3-2 1-1 3-3a98 98 0 0 0 1-6l1-5 3-2 2 4 8-1 1-4-3-4 6-2 2-4 6-2-3-9 5 1 2 2 4 3s1-1 2 1h1c2-1 3-2 3-4 0-1 0-4 2-6l2-2v-2l1-5c-1-3 1-4 2-4l2-1 3-5v-1l3-1h1l2-6 3-2v-2l2-5 1-1 2-1v-8h1l3-2 4-4 2-3 2-3-2-2Z"></path><path d="M559 469h-2l-7 1c-2 0-3 0-3 2l-3 4-2 2-1-1v-1l-3 5 3 4 2 2-1 3-1 1 2 1v1l-6 8-1 2c1 0 2 3 0 5l-5 1-3-1-3 1 1 1 3 5 1 4-5 1-3 4-1 2h1v1c1 0 1 0 0 0l-4 2 1 1 1 1-1 5-1 1-1 1c-1 1-1 2-3 2l-1-2-1-1-4 1-4 2-3 1v1l3 3-1 1h-5l-4 1-3 1-4 4c-1 1 0 2 1 3l1 1v6h-10l-3-1-2-1-3 2-2 2h-3a8 8 0 0 1-3 0l-5-1h-10l2 5c0 2 1 4 4 5h9-1v10l3 2 4 2-1 2-2 5h-2v-1l-2 1c-2 0-4 2-5 3l-3 2h-1v12l11-1 6-1 6 1 9-2c3-1 10-1 13 2l5 4c4 2 4 9 5 11s7 5 10 2l4-1a10 10 0 0 1 4-2l1-2 1-2h3l2 1 3 1 2-1c1-1 2-2 3-1l3-1h1l1 1h4v-4l-3-8v-4h-3c-1-1-4-2-3-3l1-8h-5l-2-1c-1-3-1-9 4-12 4-3 6-4 7-3h1v1c1 1 1 2 3 1l3-1 5-1c3-1 3-2 5-5a423 423 0 0 1 9-13c1-3 2-6 5-8l4-3v-2l2-2 3-3 2-4h1v-6l-2-2h1l-3-1-1-1-3-3h-5l-1-1v-1l-4-3h-3l-3-1-1-4v-4l1-2c0-1 1-2-1-4l-1-1-1-3v-3l1-2 1-2 1-1c1-1 2-2 1-4l-2-1-2-1-3-1c-2 0-5-1-7-4l-1-3h3v-1l2-3 2-3 4-2h-3ZM339 618l4 2h1l1-4-1-10c-1-6-2-5-4-6s-2 2-3 3 0 4 1 6v5h-1l2 3v1Z"></path><path d="m382 645-25-3-8-18v-1l-4-1v-1h-3l-3-3a75 75 0 0 0-4-6l-2-5-2-3-2-7-1-4-2-2-3-4-2-2-4-3-3-2-1-3a17 17 0 0 0-5 1l-2-5-10-2-6 1c-5 0-10 1-12-1-1-2-20-19-30-25l-25-11h-2l-3 2-19 5 4 5 5 8v1c-1 1-3 4-5 4l-3 1c-2-1-3-1-5 2l-1 2c-1 2-2 4-5 4l-15-3-1 8c-1 4-2 5-1 6l6 3 8 11c2 4 3 9 7 12 5 4 5 8 6 11 0 4 4 5 10 8 5 4 8 12 9 23 1 10 8 16 13 18 4 3 7 6 10 13 3 8 6 12 9 15 4 3 3 5 5 8l5 6 2-5h1l1 1 1 1h12l7-3 8-1 4 2 3 2c1-1 3-4 4-9 0-5 16-8 20-8l24-3 30-12 6-21-1-7ZM31 248l-1-1 1-2 2-2v-3l-1-1-1 1h-3l-1 1-4 1 1 1c5 2 0 5-2 6l-16-1 3 2h7l3 1h7l2-1 2-1h1v-1Z"></path><path d="m55 235-2-1-1-1 1-1v-1l1-1-1-1h-1l-2-3-1-2-5-2h-1l-2-2v-1l-2 2h-3c-1 0-4 0-5-2h-2l-1 1h-6c-3-1-4 0-8 3l-4 2-2 2c1 3 6 10 8 11l6 3a22 22 0 0 0 6-1l3-1h2v4l-1 2-1 1v5h7l2-2h2l1-1 1-1v-1l1 1 1 1h1v-1h-1v-5l1-1 1-1v-1l1-1 1-1 1-1 1-1h4-1Zm1346-451c-2-5-5-4-4-7 2-4 1-8-2-10-3-1-8-10-6-13 3-3 7-6 5-11s-5-3-5-8c0-4-1-6-5-7l-15-4c-2-1-9 0-10 1 0 1-4-1-11 8-6 8-7 0-13-4-5-4-14-1-18-2-4 0-11 0-21-2l-18-1c-5 0-9-3-19-6s-15-2-25-3c-10-2-30 7-38 8s-18 1-15 3 4 7 7 12c3 6 8 2 16 14s-7 11-11 8c-3-3-2-5-6-5-3 0-9-1-11-6s2-5 4-10c1-5-8-6-14-6-5 0-1 7-1 14s-6 5-10 6c-3 0-9 5-13 4s-6-2-10 3c-4 4-9 6-19 8s-15 0-20-15-22-13-28-13c-7 0-6 3-10 3l-12 8c-5 3-14 9-19 10s-4-4-5-7c-1-4-12-7-14-6-1 2-5 9-7 7-1-1 2-4-2-6-5-2-5 4-6 3 0-2-6-4-8-4-2-1-2-5 2-6 5-1 1-6-4-9-5-2-17-1-22 2-5 4-9 7-10 6-1-2 4-3 0-3l-31 2h-16c-6-1-7 4 2 5 8 1 1 6-5 7-6 2 0 9 1 11 2 2 3-1 5-1 1 1-1 4 1 5 3 1 1 2 6 5 5 2 3 5 1 7s-3 1-5-2c-3-3-7 2-8 3-1 2-3 4-11 4s-11 1-11 6-4 4-9 4c-4 0-9-2-12-5-4-3-5-5-6-4s2 4 3 8c1 5 1 7 5 13 3 7 1 11-4 11-4 1-3 0-7-3-5-2-9-8-14-10-6-2-10-2-15-5s-7-7 0-5 8-2 7-6-4-5-7-7c-4-1-5-5-11-13-6-7-18-8-24-7-6 0 0 5-3 5-3-1-3-3-16-5-14-2-9 10-3 16s2 7 0 7-4-2-8 1c-3 4-13 5-25 5-11 0-8-6-6-11 1-5-10-1-13 0-2 1-11-1-16 2-5 2-14 12-14 7-1-6-6-2-6-1s-2 3-6 3c-5 1-4 0-6-1s-4-1-3-4c1-2-1-4-2-3s1 6-3 3-8 0-8 1v7c-1 5 4 3 6 1 2-3 4-4 5-3l-1 5-6 8c-3 4-4 5-12 10-7 4-7 0-6-3 0-2 0-8 2-9s4-2 5-5c2-3-1-6 0-9 1-4 3-6 2-8s1-4 3-7l3-7v-7c0-3 4-6 4-9l-2-12c-1-2-4-1-4-2-1-1 1-3 1-5 0-1-3-6-7-8-3-3-4-6-7-7-3 0 1 5 0 6s-5-3-6-6c-2-2-4-4-8-5-5-2-8-1-9-5 0-3-5 0-10 4s-7 4-11 4c-4 1-4 1-3 3 2 2 2 6 0 10-1 4-3 3-7-2-3-6-2-17-7-18-6 0-11 5-13 5-3 0-1-2 0-6 2-4 1-7-1-9s-5-2-10-3c-4-1-7-1-11 2-5 4-2 14-4 18s1 6 1 8c1 3-4 3 4 9 8 7-1 12-4 12-2 1-4 2-4 5 1 3 2 4 0 4l-4 5-4 4c-1 0-1 5-2 4l-2-2c0 1-3 4-3 2v-5c-1-3-6-1-12 1s-11 4-11 7 1 5-2 9c-3 3-19 10-19 13l-4 10c-1 3-3 9-3 14s3 6 5 7c1 1-4 8 4 9 7 0 2 6 1 6l-13 6c-3 0-6 3-10 4l-14 4c-8 3-5 8-2 11 2 3 6 6 7 11 1 4 4 8 10 7 6 0 5 0 10 7s1 10-3 10l-8-5c-2-2-3-4-5-4s-5-1-8-4c-4-3-12-1-14-1-1 1-7 7 1 9 9 2 3 10-3 6-6-3-9-2-10 1-2 2 2 5 9 11s-4 7-5 6c-2-1-6-9-7-10l-3-7c1-3-1-4-1-6 1-3-2-2-2-4 1-3-1-3-4-7-2-3-4-2-2 2 2 3 3 8 3 12 0 5-4 6-6 9-1 3 2 3 0 10-1 7-8 2-9 0v-7c1-2-1-14-2-18-1-3-3-3-6-5s-7-2-10-1h-12c-3-1-3 2-3 5l2 13c2 8-1 17-6 24-4 7 2 13 5 15s1 6 3 9 0 4 1 9 3 4 9 5c5 1 4 1 4 5 1 3 5 4 11 7 5 3 3 11 1 13-3 1-7-2-9-4l-7-7-11-4-9-3-6-6c-4-2-12-2-21-2l-11 1-1 1c-2-4-6-5-10-8l-6-5-2 1c-2 2-3 4 0 8s6 5 8 6l5 2c1 0 5-1 5-3v2l2 7c2 3 6 4 7 7s-1 4-2 6c0 2-3 0-5 0l1 4c1 2-1 5-4 5s-1-7-2-11c0-4-4-2-8 1s-7 7-10 7-10 0-13 2-5 7-7 7c-3 0-3-2-3-3l-1-5c-1-2-4-3-3-4 2-1 5-3 4-4l-7 2c-4 2-4 4-6 5s-1 4-7 5-7 3-9 5l-6 7c-2 2-3 5-4 3-1-1-3 0-2 1 2 2 3 4-1 4-5 0-6 1-5 3l-2 11c-2 3-6 2-9 2-2 0-5-1-7-4l-5-6c-1-1 1-2 2-4 0-2 1-2 2-2l7-2c2-1-2-4-4-6-2-3-3-2-4-5s-2-4-7-3h-12c-6-2-3 2 1 4s5 7 4 14c0 7 0 9 4 11s3 3 4 10c2 7-4 6-7 5l-12-2c-4 0-7 7-12 13-5 5-4 8 0 15 5 7-2 11-5 11s-2-3-4-5l-9-3-6-4c-2-1-4-1-5 1-1 1 0 3-2 5-1 1 0 3 2 5s3 3 7 4c4 2 8 0 6 6-1 6-11 3-15-1-5-4-10-4-12-6-2-3 0-7-2-9-1-2-3-6-2-13s-9-9-11-10c-3-2-2-5-2-7 1-2 4-2 5 0s1 3 4 3 4-1 7 1l7 3 15 2c9 1 14-2 21-11 8-8 2-16 1-18l-6-6c-2-1-8-3-21-12-12-9-27-14-30-14L88-4c-2 1-3-1-7-3-4-1-4-3-7-4-3 0-6 2-7 1l-2-1-1 2-1 4v3c-1 1-4-2-5-2v-1 2l-2 4c-2 0-3 2-4 3l-1 1-1 2-1 2V8l-1 1-1 2v3l-1 2c-1 2-1 2 1 4l1 4 3 4 5 9-6 13a734 734 0 0 1 6 24l-2 4c-1 3 0 5 1 7v2l1 2 1 3 1 1 1 4 1 2v1c1 1 2 2 0 4l-1 1c-2 2-2 2-1 4l3 3c2 1 5 4 6 7 2 5 1 7-10 21a248 248 0 0 1-17 21l5-1c2 0 2-3 5-2l13-2c2 1 3 0 5-2h2c1 1-1 3-1 5-1 1 1 3 2 2s1-3 7-1c5 3-1 4-3 6l-5 1c-2 1-4 1-4 3l-2 3a60 60 0 0 1 0 4c1 1 0 3-2 5h-1l-1 6v5l1 2 1 3v1l-1 1-2 1-1 1 1 1v1h2v2c2 0 2 3 1 3v5l2-1h1l-1 1v2l1 2v4l1 1h1l2 1v1h4l1 1v2h2c2-1 4-2 5-1h1l3 3v8l-1 1v1l3 1 1 1-1 1v1l1 3c2 0 3 1 3 2l2 3h2l2 1 2 2h1l4 2v1c0 1 0 2-2 3v5l3 2 3 3 6 7 1-1 1-1v-1l2 1h2l1-1h3l1 1c1 0 0 0 0 0h3l1-1v-4l1 1 4 1 2-1v-1h3l1 1 2-1 3 4 2 3 1 1 1 1v1h-3l-1 1 2 2h1l-1 2 1 1-1 1h4l1 1h1l2-1 1 3v1l1-1h1v3l1 2v1h-1v2l1 1a11 11 0 0 1 1 2h1v-1h4l1 2h1l1-1 1 1v1l1-1h1l3-1c2 0 3-2 3-2h1v2l1 1v2h1l2 2 1 1 1-1v-2h1l1 2h3l1 1 1 2 2-2 2 1v1l1 1h1l1 1 1 1v1l1-1 1-1h1v1a7 7 0 0 0 1 3l1 2-1 1h-1l-1 1-2 1v1h3v3h-4l1 1v1h1v3l1 2h1v1l-1 2-1 3h-10c1 1-2 2-4 3v1h-1l-1 2 1 1 1 1h-1v1l1 2c1 1-3 3-6 6-4 3 1 3 1 4v5c0 1-1 5-5 5-5 1-2 3-1 6s2 3 6 5c4 3 6 3 13 5s6 5 12 9l5-4c4-2 17 6 19 6a324 324 0 0 0 6 0c2 0 2 0 5 3 2 3 4 3 4 3h1v2l4-1 5-1 2 1 2-1h2l1 2 2 1h2l1 1v1l-2 2v1l2 1h1l4 2 2 1h3l6 6 2 3h2l3-4 2-3 1-1 3-3-1-1c-3-6-8-7-12-11s-3-10-3-13c-1-3-6-7-7-14-2-6 4-9 7-11l10-6 7-6-2-1-2-2-4-2v-2l2-1h1v-1l-2-3-1-2-2-3-3-4-4-3h-4l-1 3-2-3v-6l-3-2-6-2 6-11-2-2-1-1v-8l3-2 2-5 3-4h1l9 11 4-4-4-9h-1 1l4-3c2 0 4-2 5-3v-4l-1-1h3l1-1c6-1 7-4 7-6 1-2 2-1 3-1v-1l-1-1 1-1h6l1 3v1h3l1 1v-1l1-1c0-2 0-3 2-3h1l1-1c2 1 3 2 3 4h7c3 0 4 1 4 2l1 1 3 2 3 3 2 1 1 1 1 2-1 2v1h1l2-1v-4l-1-1h-1l1-1h2l2 1c1 0 2 0 2 2l1 1 2 1 3 1h1c1 1 2 1 3-1l-1-2 1-2 3-1 1-1 1-1h1v1l1-1 2-1h1l3 1 2 2h1l1-1v-2l1-1h4v-1l2 1 2 1v1l1 1c2 2 4 2 5 2l1 1 4 2v1h1l2-1 2-2v-1l1-2h1c0 1 1 2 4 2l8-1 1-3 1-1v-2c1-1 2-2 0-3l-3-2h-1l-2-2-1-1h-6 1v-2l-1-1h-2l-1-1-1-1-1-1 1-1 3-1 2-2c2 0 3-1 3-2v-3l-1-3v-1c-1-2 1-3 2-4l2-2h8l1 1v-2l-1-2s-8 0-9-2l1-2 1-1 3-1h-6v-5h1l-1-2 2-1v-1h1l2-1 3 1h2l1-1h3v1l1 1 1-1v-1l3-1 3-1h-1l1-1h1l7-1 1-1 1-1 2-1h2a4 4 0 0 0 3 0l2-1 1 1v-2l-1-1h5v-2l1-1h3v-2l1 1 3 1 12-4 8-4h1v-3h3l1-2 1-1h2v-3l2 1 6 1 5 1h3l2-1h1l1 1 1 3 2 3 1 2 2 2v4l-2 2v1l-1 2v1h5l1 1 2-2v-1l3 1v-3h1l3 1 1 4-1 2h4-1v-3l1-1 2 1h1l4 1h3l2 2-1 1h-1l-2 2h-1v5c1-1 3-3 5-3 3-1 3 0 4 1v1l3-2c0-2 1-3 3-3l3-1 2-1 1-2v-1c0-1 0-2 2-3l4-1h1l1-1 3-2h1l6-3v1l-2 3-2 2-2 2h1v1l1 2 2 3 11 9 26 41a19 19 0 0 1 3-3v-4l3-2 2-1 1-1 1 2v4h3l1 3v1h12l3-3 8-2h1c1 0 2 0 4 5l3 5 1 1c0 1 1 3 3 3 3 1 5 3 5 4v1l2 2c4 2 6 2 9 2h1l2-3 1-2h1l1 3 2 2 4 3 1 1 1 1 2 2-2 1-2-1-2 1-2 4-1 2c-1 2-3 4-6 5h-2c-1 0-2 0-2 2v5h8l3-2 3-2v-1c1-1 0-1-1-2l-1-1 3-2h2l7-2 1-2 3-3 2 1h2l1-1 2-3 2-3 1-1 2-2h1c1 2 1 2 4 2v-1l2 1c3 2 6 2 9 2h1l3-1 2-1 1 2v2c0 2 1 4 3 4l8 1 3 1 3 1h8l4 1c1 1 1 1 2-1l1-2h1c2 0 4-3 4-5l1-3c1-1 1-2-1-3l-3-1-1-4h-1v-2l2-3a23 23 0 0 1 2-4l3-6v-2l1-4 2 1 8 5h2l4 1 5-1 6 1 5 1c2 0 3 0 4 2l-1 4v4l4 3 4 3 2 1 3 1 3 1c3 2 3 2 6 1l5-2c1-2 2-3 4-3l6 2c4 1 8 2 10 1l3 1 4 1 2 1c4 0 6 1 8 3l1 2c1 2 2 2 5 3h2l8 1h4c8 1 11 1 15-1l4-2 9-6 5-5c2-2 3-4 5-4l9 1 10 1 6-1h3v3l8 1h5l2-2 6-4 2-1-1-2-1-1v-3l9-22 3-3 2-2h-1v-5l-1-2-1-2-2-1h-2v-5l6-6 7-2 2-1a256 256 0 0 1 17-4c4 0 14 6 15 6h2l2 1h3c2 0 2 1 2 3l3 1 2 2v4l1 1h2l1 1v1l-1 1v1h2l1 1-1 2v3a54 54 0 0 1 3 5l1 3v1c0 2 1 2 3 3l1 1c2 1 1 3 1 5l-1 1 1 2 3 4 1 2v3c2 3 3 3 5 2h6l5 2h4s6 7 9 7l2 2v3l-2 3 2 4c2 1 3 5 4 6h16l3-1h1l5-5 2-3 1-1h5l2 3-1 3-3 4-4 3-3 2v8l-3 2-1 1-1 4-1 2-3 2c0 1 0 5-2 6l-1 1h-2v1h-1c0 2-1 4-3 5l-2 1c-1 1-3 1-2 4v5l-1 2h3c2 1 2 6 9 7 6 1 8-4 13-9 5-4 4-8 6-12l5-13 4-12 5-10c1-2-1-4 1-6l1-6 1-9 4-16c2-3 1-12 0-14l-2-11c0-2 0-11-4-15-4-3-4-2-3-13 1-10 2-11 7-4l12 17c6 8 3 10 3 20 0 9 1 7 6 14s4 7 1 12c-4 5-4 9 0 10s6 6 8 9 0 8 3 10c2 1 3-4 3-7 0-2 1-4 3-5s6 0 6 2c1 2 4 6 4 4l-1-7-4-4c-2 0-4-2-4-3 0-2 0-4-4-7s-3-3-5-7c-1-4-2-7-2-17 0-9-1-6 2-8 2-2 5 1 8 4 2 3 5 6 5 4s-2-3-3-5l-5-6-7-19c-4-14-17-28-22-31-5-4-1-5-1-8s-2-3-4-5c-2-1-2-4-1-3l4 4-5-8-5-5-3-4-1-4c-1-1-2 0-3-2-1-1-1-2-3-2s0 3-1 3c0 0-2-2-3-1l3 4 4 3 2 5c0 2 2 2 1 3-1 2-3 0-6 0s-1 3-4 3-13-6-15-8c-2-3-5-4-9-4-4 1-3 2-5 1-1-2-3-1-3 0v6c0 3-4 7-6 6-2 0 0-4 0-6 1-2-4 0-6 1-2 2-4 2-5-2l-2-8c-1-3-3-4-6-2-4 2-5 4-9 3-5-1-3-4 0-9l7-14c3-9 3-12 3-17s2-9 4-12c3-4 3-8 5-11s1-10 2-15c0-5 4-7 4-12 1-5 6-12 13-15 7-2 10-4 13-2 3 3 7 3 8 1s-4-5 2-5c6-1 22-4 21-9-2-6 4-5 9-5 6 0 13 1 17 3 4 3 8 7 12 7 4 1 6-6 6-8s8 0 10 0 4-5 1-7c-3-3-8-2-10-4s-1-7 0-11c0-5 2-5 2-23 0-19 6-16 9-17 2-1 7-6 10-5s6 5 7 3c1-3 1-5 4-3 3 3 0 9 0 12-1 2 2 3 6 3 4 1 3 4 5 7 3 2 4-3 5-7s2-15 4-18c1-3 4-4-1-16-5-11-1-12 5-13s8 5 6 5c-3 1-4 3-3 9 0 6 6 8 6 9 0 2-3 6 0 8 2 2 2 3 2 7s3 6 1 8c-1 2-6 5-7 11-2 6 3 11 1 14s-3 9-3 17l-1 19c-1 8-3 3-5 9s-3 5-7 6c-5 0 0 3 3 5s1 8 1 12c-1 5-5 11-3 18l4 14c1 6 18 28 19 32s8 8 9 13c0 5 8 8 11 10 3 3 4 10 4 14 1 4 3 11 6 11 4 1 3 8 4 8l3-6 5-8c2-3 2-14-2-18-4-3-1-9 0-12s10-3 8-5l-6-12c-3-5 1-14 7-16 7-2 6-6 4-10-3-5-9-11-10-16s0-12 4-10c4 1 4-2 4-6 1-5-3-5-4-9-1-5-4-1-7 0-2 1-2-3-4-7-1-4 1-6 1-10s-7-7-10-8c-4-1 2 8 0 8-3-1-5-5-8-11-3-7-1-25-3-30-2-4-3-6-2-10 1-5 3-2 7-1 3 1 3-2 3-6 1-5 3-7 6-6 3 0 2 10 6 11 3 1 2-7 1-14-1-8 8-7 13-9 6-2 8 1 10 3 2 3 9 6 13 7 4 0-1-6-2-15s4-18 5-25 6-13 10-23c4-11 11-14 19-14 7 0 11 0 12-4 0-4-1-8-3-10l-6-8c-2-4-4-3-9-4-5-2-7-5-7-10 0-4-3-2-6-2-2 0-3-3-2-6 0-3-7-6-7-4s-1 4-7 1c-7-4-5-7 4-8 8 0 6-9 5-13v-18c-1-3-4-7 0-11 4-3 4-6 4-10s11-8 15-1c5 6 5 7 12 5s4-2 13-2c8 0 5-6 3-10Z"></path><path d="M48 6V2l2-2v-4l-3-3-3-2-3-6-1 1c0 1-1 2-4 2h-4l-2 1-2 5-1 4c-2 3-3 8-3 10l-2 3-1 1-1 1-1 4h-1l-2-2c-1-1-2-3-4-3l-3 2-4 2H2c-1 0-3 1-4-3l-1-4c-1-2-1-5-3-6-3-1-3 0-5 3v1l-2 1 1 2 6 6c5 3 10 5 10 7l2 3 1 1v7c0 3 0 4 2 6v6l1 9a76 76 0 0 0 0 11l10 1c3 0 7 2 10 5 2 4-2 9-3 10l-9 12-7 8-3 5c-1 3-2 4-4 5s-5 5-5 10c0 4 2 4 2 5l1 7 1 16c0 7 3 6 6 6s3 2 4 3l6 1c2 2 4 7 6 7 1 0 4 0 8-4l6-2 7-9 10-12c12-15 12-17 10-21-1-3-3-5-6-7l-3-2c-1-3 0-4 2-6h1v-4l-1-1v-2a14 14 0 0 1-2-5c0-2 0-2-2-3l-1-2v-2l-1-7 3-4 1-2-8-22 7-13c0-1-3-6-6-8l-2-5-2-4-1-4 2-2v-3l1-3V6ZM16 406h-3c0 1 0 0 0 0v3l1 1 1 1v1h1l1 1 1 2v2h2v-1l1-1 1-1 1-1 1 1 1 1v-1l2-1v-2h1v-4h-2l-1-2-2-1v-2h-1l-1-1-1-1-2 2 1 1-3 3v-1 1Zm0-1Z"></path><path d="m40 400-1-1-1-2-2-3-1-1v-3l1-1 1-1 1-1-2-1v-2l1-1h1l-1-1h-2l-1 1-1 1-2-2h-2l-2-1v-1l-2-1v-1h1l-1-1v-1h1v-2h-2v-1l-3-1-1-1-1-1 1-1v-2h-2v-2h-1l-1-2-1-1h-1l-1-1-1 1H8l-1 1-2 1-1-1-1 1-1 1v2h1v1H2v1l1 1v1l1 1 1 1 2 2H5l-1 1v2h2v3l-1 1v1l-1 3h1l4 4v1H6l-1-1 1 1 2 4v1l-1 1v-1H6l1 2 1 1 1 2 3 1 1 1 2 1 1 1c2 0 2-1 2-2v-2l2-1 1 1h1l1 1 1 1 1 2 2 1 1 1h1v2l-1 2v1l-1 1 3-1h2l2-1 1 1 1-1v-2l-1-1v-2l1-2h1l2-1 2-2-1-1Z"></path><path d="m-10 403-1-1-2-3v-1l-1-1-10-9v-3l-1-1v-2l-1-1-1-1h-1v-6h3l2 3h1l1-3h3l1-1 2 1 1 1v-1l1 1h4l1 1 1-1h2v1h2v-1l1 1h3v2l1 1h2a6 6 0 0 1-1-2v-1l2-2h1-1l-1-1H3v-3l-1-1v-1h1-1v-3H1l-2 1-2 1h-6l-2-2h-2l-1-3-1-1h-2l-1-2-1-1-1-1h-1 1l-2-1-1 1v1h1-3v1l-1 1h-1v1h-2v1h1v4h-3v1a25 25 0 0 1-1 0l1 1-1 1 1 1v1h-3l-1-1h-1l-1 1-1-1-1-1v-1 1l-2 2h-2l-1-1v1h-2l-3 1-3 1v4c0 4 4 5 6 4 2-2 1-5 3-6 1-1 3 2 4 5l3 7c1 2 0 5 2 7 2 1 6 4 10 4 5 1 6 1 9 4l2 2h3v-1Zm27-217 7-1c1 0 3-2 0-3l-6-1c-3 2-2 2-3 4-1 1 0 2 2 1Zm60 313-9-3c-6-2-4 2-7 1-2 0-3-2-7 0-2 2 0 5 1 5h7c2 0 4 4 6 4l6-2c4-1 7-1 8-3 2-2-2-2-5-2Zm71 8c3 0 5-2 7-3 2 0 5 1 5-1 0-1 0-4 2-5l3-4-6 3c-2 1-4 2-5 1l-3-1c-4 1-4 3-7 4-3 0-5 2-3 4 2 1 4 3 7 2Zm69-528c-7 0-10-2-12 2-4 8 0 12 3 15 3 2 1 5 5 4 5-2 7-5 9-6 3 0 7-5 5-8s-3-6-10-7Zm-40 538c2 0 2-1 3-2l1-1 1-3 3-2h1l1-1v-3l1-2-1-1c0-2-1-2-3-2h-7c1 1 2 2 1 3a119 119 0 0 1-5 15h2l2-1Zm0 1h-2l-2 1-3 5c-2 2-1 5-2 9l-2 4 6 23c2-3 7-22 7-43l-2 1ZM50 295l1-1h-1v-2l-2-2-1-1-6-6 1-1 1-3 1-1v-2c1-1 0-2-1-3l-2-3c0-2-2-3-4-5l-2-3-4-10a59 59 0 0 0-1-3l-1 1-3 1H16l-7-1-4-2-5 1c-4 0-5 2-7 3-1 0-5-1-5-4-1-4-4-4-6-3l-9 1c-2 0-1 2-2 3-2 1-4 0-5 2 0 1-1 3-4 3l-3 1v7l-2 2 2 2 2 2v4l2 2v3l-1 3 1 2-1 1v1l2 1 1 1 1 1-1 2-1 3v2h1v-2h2a221 221 0 0 0 2 3h2l1 1h1l1 1h1v1-1h2l1 1h1v1l-1 1h-1v1l1 1 1 1 1 2h2l1-1 1-1h-1v-1l-1-1 2-1 1 1 1 1 2 1h2l1-1 1 1-1 1a7 7 0 0 1-1 1l2 2h1l1-1 2 2h1c2 0 2 1 2 2l1 1 1 2 1 1h1v1h1l1-2h1l1-1 2 3 2 1v2h1l1 1v-1l1-1 1-1h5l1 1 1-1h1l4-1h2c2 0 3 2 3 3l4 1v1l3 1v-1l-1-1-1-5 5-6 3-5 4-1 1-2v-5Z"></path><path d="m-38 295-1-1v-2h-2v2h-1l-2 1h-1v1h-3l-1 1-1 1h-1l-1 1-1 1h-1l-1 1h-2l-2 1v1l-1 2-1-1-1-1v2l3 2 1 1-1 2v2l1 1 1 2 1 2h2l2 3h1l1 1 1 1h1l2 3 2 1v1l2 1 1-1h3l1-2h1l1-3h3l3 1h1l2 1h1l1 1h2l2-1 1 1h1l1 1v1l2-4 3 1h2l1-1h1v-1l1-1h1v-1l1-2 1-1 2-3h3v-1l-1-2-1-1-2-2h-1l-2-1h-3l-1-2s-1 0 0 0v-1h1v-1h-4l-1-1-2-1h-1v1h1v2h-1l-1 1-1 1h-1v-1l-1-1-1-2h-1v-2l1-1h1l-1-1h-3l-1-1-1-1h-4l-1-1-1-3-2 1v2h-3Zm20 63v1l1 1h2v1l1 1 2 2h2l1 2h3l2 1 3-1 2-1h1v-1l2-1h2l2-2a56 56 0 0 1 4 0h7v-1h2l2-1 1-2h1v-1h-1 1v-2h1v-1l2-3v-1l1-1 1-1 1-3 1-2 1-1 2-2h1l1-1 2-1v-1h1v-1h-3v-1l-1-1-1-1-1-1-2-1-1 1h-2l-1-1-1-1-2-1-3 1-2-1-3 1-1 3-2 1H7v1l-2 1-2-1-2 1v1l1 2v1l-3 1h-1l-8-1-3-3h-2v1l-1 1 1 1s1 0 0 0l-1 1h-3l-1-1-1 1 1 1 1 1v1l-2 1a20 20 0 0 1 0 3l1 1v1l-1 1h-2l-1 2h2v2l1 1 1 1v1l2 1Zm110 12 1-1v-2l1-1h1v-3h1l1-1 1-1h-1v-2l-1-1v-1l1-1h1l2 1 1-1v1h1l1 1 1-1 2 1h2v-1l-2-1h-1l1-2v-2h-1l-1-1h-1v-3h-1v-1l1-1-1-1h-1l-1-1-1-1-1-1 1-1v-4h-2l-2-3h-2l-1 1v-1h-2l1-1h-2v-1l-3-2h-4l-1 1-1-1h-4v1h1l-1 1 2 1 1 1a14 14 0 0 1 2 5l1 2v1l1 1h1l1 2h-1 1l1 1v1l1 1 2 1 1 4v6l-1 1v10h3Zm135 50h3l4-1 1-1 3 1 1 1 1 1 1 2 2 1 13-2h3v-1l1-2 3 1 6 3 4 1h2v-2l-2-2-1-2h-1v-2l2-2-1-1-4-1-1-1-2-1v-1l1-2 1-1h-3l-3-2-1-1v-1h-1l-2 1-2-1-5 2h-4v-2h-1s-2 0-5-3l-4-2h-7s-14-8-18-6l-5 3h1c6 4 9 5 15 12 6 6 4 9 2 13l3 1Z"></path><path d="M103 372h-3l-1 1-2 1-1-1-1 1h-2l-2-1-1-1-1-1-1-2 1-2v-9l1-2v-2l-1-1-1-3-1-1v-1l-1-1v-1h-1l-1-1v-1l-1-1h-1v-2h-1l-1-2v-2l-1-2-2-2-1-1h-2l-1 1-1 1-1 2-8 1c-1 1-2 3-4 3l-1-1-1-1-2-1h-7l-2-1v1h-1l-3-3-1 2h-1l-1 1-1 2h-2l-1 1-2 1-1 1-1 2-1 3-1 1-1 1v1l-1 3v1h-1l-1 2a4 4 0 0 1 0 1l-1 2-1 1h-2l-1 1h-1v1h-3a11 11 0 0 0-1 0l1 1 2 2 1 1 1 1v4l2 1 2 1h1l1 1 1 1v1l-1 1 1 1v1h-1l-1-1 1 1 1 1h1v1h1l3 1 1 2v-1l2-2h2l1 1v1l-2 1v1l2 2h1l2 2h1l-1 1-2 1 1 1h6l2 1 2 1h12l2 1h1l2-1 4-3 4-2 4-1 2 1 2 1h3l1-1 1 1 1 3h1l6 1 2-8c2-4-1-4 0-6l6-3v-3l-1-2Zm582-56 1 2 4 3 3 1h5l2 2 1 1 1 1v-1l6 3a93 93 0 0 1 7 16l-1 3 1 4v1l-2 4 1 2 1 2c1 3 1 3 4 4h20c5 1 8 3 11 5l5 3h3l4-1 2 1-1 1-1 1 1 2c2 0 2 1 2 3l1 3a43 43 0 0 0 8 11v-1h2l2-1h9l5 1h12l6-1 3-1h5l3 1 8 1c1 1 4 4 10 5l3 1v-1h13l2 1-1 1v1c1 1 2 2 6 0l24-12 17-3c3 0 4-1 6-3l3-3 6-5c1-3 7-7 8-8l-5-10 4-6h20l5-2 1-5v-2h8l8-6 6-10h5l2-4h4l6-3 3 1 3 2 7-3 1-1-2-3-3-2-5-5-3-1-3-2c-2-2-3-3-5-2l-3 2-2 1h-14l-5-2v-1l-1-4 2-4 1-2 4-9 2-4 1-2c1-2 3-5 2-6h-3l-6 1-10-1h-9l-5 3-5 5-9 6-4 2c-4 3-7 2-15 2l-4-1h-8l-2-1c-4 0-4-1-5-3l-1-1c-2-3-4-3-8-4h-2l-4-2h-3l-10-2-6-1-4 2c-1 1-2 3-5 3l-6-1-3-1-3-1-3-2-3-3-4-3v-8l-2-1-6-1c-3-2-4-2-6-1h-9l-2-1c-4-1-4-2-8-5l-2-1-1 4v2l-2 6-2 2v2l-2 3-1 2h2l1 3 3 2c2 1 1 2 1 3l-1 3c0 2-2 5-5 5h-1v3l-3 1-4-1h-8l-3-1-2-1-9-1c-3-1-3-3-3-5v-2l-1-1h-1l-4 1h-1c-3 0-6 0-9-2h-2l-4-1-1-1-2 3-1 1-1 2-2 3-2 2-2-1h-2l-2 2-2 2a170 170 0 0 0-11 4l1 1 1 2v2h-1l-2 2-4 1c-2 2-4 1-5 1l-3-1 1 1v10l2 3Z"></path><path d="M203 316h-1v-3h-1l-2 1-1-2-1-1h-2l-1-1-1-1-2 1-1-1-2-1h-1l-1-1-1-1h-1v1l-1 2-1-1v-1l-2-1-1-1v-2l-1-1-1-1-3 1-3 1-2 1-1-1h-2l-1-2h-3v1h-2l-1-1-1-1v-4l-1-1v-3h-1v-1l-1-2h-2l-1 1-1-1h-4v-5l-2-2 1-1h2v-1l-1-2-2-3-3-3h-3l-1-1-2 1c0 1 0 2-2 1l-4-1-1 3-1 1-1 1-2-1h-2l-2-1-1 1h-4v2l-3 3h-1v3l1 2-1 2h-1v-1h-1l-1-1-1-1h-1l-1 1h-1l-1-1v-1l-1 1-2 2-2-4-3 1-1 2-1-1v-1h-3v-1l-1-1v1l-2 1-1-1-1 1-1 1v-1l-1-1-1 1-3-1v-2h-2l-3-1-1 1v-1l-3-1h-1l-1-1h-2l-2 1v-1h-4l-4 1h-3l-1 1-2 3h-1v1l-2-2-1 1v5h1v1l2 3 1 1v2h-1l1 1v3l-1 1-1 2-3 1a123 123 0 0 1-8 11v5h1l1 1v1l-1 1h-1l-2-1v1l-1 2-1 2-1 2v2h1l1 2 1 1 2 1v1h2v1l1-1 1-1 3 2v-1l3 1h2l3 1 1-1 2 1 1 1 1 1 1 1 3-3 8-2 2-1 1-1 1-1h1l1-1v-1h3l1-1 1 1 1-1 1 1v-1h3l3 3h2v2l1-1v1h4l1 2h3v5l-1 1v1h1l1 1v1h1l1 1v1l-1 1h1v2h1l1 1h1v5l2 1v1h-1l-1 1-2-2v1l-1 1-1-1v-1l-1 1v-1l-2 1-1-2h-1v3l1 1v1l-1 1v2h-1v1l-1 1-1 1v1l-1 1v1l-1 1h-2v1h2l1 1h2l1-1v1h1l1-1 1-1c2-1 3 0 4 1l1 2 1 2c2-3 0-4 0-6l4-2c2-1 3-6 6-10 4-4 4-2 9 0 4 3 2 3 5 3 4 0 9 2 9 4 0 3-2 2-5 4s-2 4 0 4c1 0 6 3 5 6-2 3 4 4 9 4 5 1 4-3 5-4l6-1 4-4h9c4-1 0-3 0-4s-2-2-5-1h-7c-3-1-3-4-4-6-2-2-2-2 0-3 1 0 0-6 2-5 7 1 11-2 15-5 5-3 5-4 8-4l4 1 1-1-1-1v-2l1-1a2 2 0 0 1 0-1l1-1c3 0 4-1 4-2h-1l1-1h6l1 1 2-1 1-2 1-2v-1c-1 0-2-1-1-2l-1-2v-1c-1-1-2-1-1-2l2-1h1l1-1h-3l-1-1v-1l2-1 2-2 1 1v-3Z"></path><path d="m34 325 1-2 1-1v-2l-5-2c0-1 0-2-2-2l-1-1-2 1h-3l-1 1h-1l-1-1h-4l-1 1-1 1v2l-2-1h-2v-3l-2-1-1-2H6l-1 1v1l-2 1v-1h-4l-2 2h-1l-1 1v2l-1 1-1 1-1 1-1 1h-1l-2 1-3-1-1 4-1 2v1l1 2 1 3v-1l2 1 3 2 8 1h3v-4l2-1h3l1-1h7l1-1 2-4 3-1 2 1h3l3 1 1 2 2-1h1l1-2 1-3ZM14 222c4-3 5-3 8-3h1l4 1h1l1-1h3l4 2h3v-1l2-2 1 1v1l1 1 1 1 5 2 1 2 2 2h2l2-1h4l2-1v-2l3-2v-4l-1-2-1-1v-1h-2l1-4v-1l-1-3-1-1v-1h-5l-3-1c-1-1-3-2-3-4-1-1-6-3-7-2l-2 1-4 2v8c-1 6-5 5-7 4l-1-2-4-5c-1-2-3-3-6-3-2 0-6 4-8 6-3 2-2 3-1 4l-1 4-1 11a98 98 0 0 0 7-5Z"></path><path d="M42 196c1 0 6 1 7 3l3 3 3 1h2l2 1-1-1v-1l1-1 2-1 1-1-1-1-1-3v-2l-1-5c0-2 0-4 2-6l1-1 2-4v-2l-1-2-2 1-5-1-6-2c-3 0-5-2-6-1l-3 3-9 2-5 4v9l-3-2-5 2-2 1-2 1-2 2 1 3v5l2 1c2 1 1-2 1-2l1-2 2-2 2-1 1-1v-4h2l2 1 2 2 4 3 3 2v2l3-2 3-1Zm735 465c0-3-1-6 1-7l1-1 1-3v-3l2-1h1l1 1 1 1v-1l1-3v-1l-1-2-1-4-1-2v-3l-2-3-1-3-1-6h-2l-2 3v5l-1 1v1l-1-1-1-3h-1l-1 1v1-4l-1-2v-5h1v-1l2-1h1l1-1 1-2h1l1-2v-1h-6a12 12 0 0 1-2 1l-2 1h-2l-2-1-4 1h-4v-1l-3-3-1-2-1-3v-3l-1 1-2 1-3-2-1-2-1-1h-2l-4-3v4l-2 2v8l1-2h1l6 5v1h-6l1 1 1 2-1 1 2 4 1 2-1 1-2 1v1l1 2 2 3 1 2 2 3 2 6 1-2c2-1 1-3 1-5 1-3 3-1 5 1 1 1 2 2 4 1 1-2 3 2 4 5 1 2 2 4 2 9 0 4 4 8 8 13 2 3 6 4 9 4l-2-4v-1ZM267 446l-1-1h-3l-3-1-1-1h-2l-1 1v3h2l4 3 3 2 3 1 1 1a110 110 0 0 0-2-8Zm261-20-2-2v-2l3-4-2-3-2 1-2 1-2 2-2 1-1 1-1-1-1-1-1-1-1 2v1l1 4v1l-2 1h-7l1 1 2 2-1 1-1 3-1 1h-8l-3 1h1l-1 3-1 1 1 1 1 1h2v1l2 1h3l1 2-1 1 1 5v1l1 1v3l-3 7-1 3-1 1s1 3 3 3h1l1-1 2-1 4-3h2c1 0 0 0 0 0l1 1 2 1h1v-4l2-1h3l2 1h1v-2l1-2v-1l1-1a53 53 0 0 1 1-3l1-2 1-2 1-1 1-1h2l1-1 1 1 1 1v2l1 2v2l1 2v3c-1 2 0 4 1 8l1 2h3v-1l1-1 4-1h2l1-1 1-1 1-1 1-1 3-2c3-2 5-1 6-1l-1 3 3-1 6-2c2 0 3 1 3 2h1l1-2v-6l-1-1-1-2-1-2c0-2-2-2-4-3h-2c-2 0-4 0-5-2v-2l-1-4-2-4h-4l-7 1-2 2-1 1-1-1-1-1h-1l-2-1v-1l-2-1h-3l-1 1c-2 1-4 2-5 1l-2-1v-1l-2 1-2 1h-5l-3-1c-2-1-2-2-2-4l1-3 1-1 1-1v1a20 20 0 0 1 6-2l2 2 1 1h2l2-1 1-1 1 1 2 2h1l-1-2-1-1v-1a44 44 0 0 0-5 1Z"></path><path d="M382 414v-5l1-2 1-1h2l3-1 1-1h1v-1l1-2h3l1 1-2-3 4-2v-2l2 1 2 2 3 3h5l3 3 1 2c-1 0-1 1 1 1l2 1h1l-1 2-2 3-1 1v1l5 2h9l2-1h2c1 0 2 0 3 2l1 2 1 3 5 11 35 21h3l2 1 3 1 2 3v6l5 1 6 1h1l1-1 1-4 3-6v-4l-1-1v-8h-3l-2-1-1-1h-2l-2-2 2-2v-3h11l1-2 1-2v-1l-2-2v-1l2-1h6v-1l-1-4 1-1 1-2h1l2 2h1l1-2 3-1 1-2h3c2 1 3 2 2 3l-3 4v1l1 1 1 1h5v-1h3c2-1 2 0 2 1l1 1 1-1 1-2 2-2h3l1-1 2-1 2-1 1-1 1-2h-4l-3-1h-2v-2h-3l-1-2a4 4 0 0 0-1-2c0 2-3 4-5 4l-2 1-2-1c-2 0-2-1-2-2v-2l-2 2-1 1-2-4c-1-1 0-2 1-2l1-1 3-1h1v-1l1-2 3-2-3-2-4 5-1-1v-1s-8 11-11 11h-3l-1 1-1 3h-1l-2 2v6h-2l-1-1c-2 0-3-1-3-2v-1l-1-2v-3h-2l-12 1h-1 1s0-9-3-10h-4l-1-2v-3l1-9h-4s-4-10-8-10h-2c-1 1-2 2-4 1h-1a63 63 0 0 0-22 2l-3 1-2-3c-2-4-5-9-10-10l-13-8c-5-4-10-8-13-8l-27 10 3 53 10-1v-3Zm-293-9c0-6 3-5 5-8l2-2-6-1-1-1-2-2v-1l-2 1-1-1h-2l-2-1h-5l-4 2-3 3-3 2h-1l-2-1h-5l-2-1h-5l-2-1h-8l-1-1v-1l1-1 1-1-2-2h-1v1l-2 1-1 2 1 2v1l2 3 2 2v1l1 1c1 1 0 2-1 2l-1 1h-2l-1 1v6l-1 1 2 2 3 2v2l1 1-1 1v2l1 1v1l2 1 1-1h2l1-1h4-1v-1h3l2-1 1 2v1h2v-1l1 1 4 1h4v-1h4l-1-2v-1l1-2h1v-1h2v-1l1-1h1l3-1h3l1 1 1 1 1-1h1v1-1h6l-1-2c-2-4-2-4-2-9Zm185 45h1l-1-2v-2h-1l-1-1-2-1-3-2-1-1-1-1v-1h3l1-1v-1l-2-1-2-1-1-3v-5l-2-1-2-1v-2l-1-1h-3l-13 3h1v7l1 2v2l3 2a50 50 0 0 0 5 1l3 3v1h1l2-1 1 1 3 2h3l1 1 1 1a121 121 0 0 1 3 7l3-2v-2Z"></path><path d="M499 469h-1l-6-2a71 71 0 0 1-15-3l-2 2-2 2-2 1c-1 0-2 0-2 2l-1 3-1 4c-1 4-4 6-6 6h-4l-1-1v1l-2 2h-6v2l-1 2-4 3c-2 2 0 4 0 4v3l-1 1-2-1-1 9h5l-4 3 1 6v10c0 4-1 5 2 7s8 0 9 0l2 1-2 3c-3 2-4 5-5 7l-1 3c-2 1-3 4-3 7l2 4 2 2 8 1h3a14 14 0 0 1 6 0h4l3-1c1-2 2-3 3-2l2 1 3 1 1-1 4 1h4v-7c-1-1-2-2-1-4l3-4 4-1h4l2-1h2l1 1v-1l-2-3v-1l2-1 5-2c2-1 4-2 5-1v1l1 1 3-1 1-1 1-1v-4l-1-2-1-2h1l4-1-1-1v-2c1-3 2-4 4-4l4-1-1-4-2-5-1-2h11v-5l1-2 5-8-1-1v-2c1-2 2-2 1-3l-1-2-3-4h-1l4-5 1 1v1l2-2 2-4c1-2 1-3 4-2l7-1 2-1 3 1a48 48 0 0 1 5 0h5v-1l-1-2v-2h4v-1l-3-1c-2-1-5 0-6 1l-4 2-1 1 1-1 2-3h-5a41 41 0 0 0-5 3l-1 1-1 1v1l-3 1-4 1v1h-2l-1 1h-1v-1l-1-2c-2-3-2-6-2-8v-1l1-2-2-2v-4l-1-2v-1h-3l-2 2-2 2v2l-1 2-1 1v1l-1 1v3l-1 1h-1l-2-1h-3l-2 1v5h-1l-2-1h-1v-2l-2 1-4 2-2 2h-1l-2 1-2-4-1 1ZM27 430l5-4 1 1h4l1-1 1-1 1-1v-6l-1-2-2-2c-2 0-2-1-3-2h-4l-2 1-2 1-1 1-2-1h-1l-1 1-1 1v2h-2v3l-1 1v1l1 1-1 1v1l1 1 1 1v1h1v1h7Zm714 158h1-1l-1 3 5 3 2 1h4l2-1 1-1 3-1h1l5 2 2 1 3-1h1l5-1 2-1h-1l-1-1v-6l-1-1-2-2-2-1-2-1-2-1-2 1h-16l-2 2-2 2-3 1v2l1 1ZM346 406a456 456 0 0 0 9-1l3 3c6 3 8 9 9 11l5-1-3-53v-1l27-10 14 8c5 4 9 7 13 8 4 2 7 7 9 10l3 3h2l9-2h14l3-1 3-1c4 1 8 9 8 11l4-1v15h4c3 1 3 8 3 10a147 147 0 0 0 14-1v1l1 1v4l3 2a77 77 0 0 1 3 0v-2l-1-3 3-2 2-3v-1l2-1h2c2 0 9-8 10-10h1l1 1 3-5 3-5c2-2 4-2 8-2h3c4 0 7 1 9 3l3 1h1v-5l2-4 3-2c1-2 2-2 3-2l1 1 2 1 3 1 6 2 5-1h31c4 0 5 2 5 2l5 3h1l6 2v-3l-1-2 1-2 2-1h1-1l-1-1 1-2 2-1v-3l-1-2-1-2-2-6-1-5 1-1-2-2-3-2-2-2h1l1-2c1-2 1-2 3-2h4c3 0 4-1 5-2l5-2 3-1v1l1 1h4l2-1v-2l-3-3 7-24 5 2h6l6 2h1l2-1 1-2 2-1 4-3v-2l1-6-1-2-1-6c1-3 1-3 3-3h2a10 10 0 0 0 7-7l2-3 2-1h4l-2-2h-1l-2-2c0-1-1-2-3-2-2-1-2-2-2-3l-1-2-1-1-1 2-2 4h-1c-3 0-5 0-9-2l-3-3 1-1c-1-1-3-3-5-3-3-1-3-3-3-4l-1-1-3-5c-2-4-3-4-4-4h-1l-7 1-4 3-9 1h-1l-2-1v-1l-1-2h-3v-5l-1-1-1 1-2 1-2 2-1 1v2l-3 4h-1l-25-42a155 155 0 0 1-13-12l-1-2h-1v-2l2-2 2-1 2-3-6 2-1 1-2 1-2 1-4 2c-2 0-2 1-3 2v1l-1 2-2 1-2 1-4 3c0 2-1 2-3 2l-1-1-2-1-6 4-1-5 1-1c0-1 0 0 0 0l1-1 2-1h1v-1l-1-2h-2l-1 1-4-1h-1l-2-1v3l-3 1-2-1 1-1v-4l-3-1h-1l1 2v1h-1v-1h-3l-1 2h-3v-1h-4v-3l1-1 1-2v-4l-1-2-2-2-1-3-1-3-1-1-1 1h-2l-1 1h-2l-5-1c-2 0-4 0-7-2h-1l1 1v1h-3l-1 2v1h-3v3l-1 1-9 3-12 5-3-2v1l-1 1h-4l1 2h-5v1l1 2-1 1-1-1h-2l-1 1h-4l-2 1-2 1-6 1-1 1-4 1-2 1-1 1-1 1h-1v-1h-12v1l-1 1v1l1 1-2 1v3h4l2 1v1l-2 1h-2v2l8 2 1 2 1 1v1h-10l-2 1v1l-2 2 1 2 1 3v3l-4 3-2 1-3 1-1 1 1 1 1 1h1l2 1 2 1-1 2h5l2 1 1 1 1 1 3 1c2 1 2 3 1 5a19 19 0 0 0-1 2l-2 3c-1 1-3 2-8 2-3 0-4-1-5-3v3l-3 3h-3l-1-1-3-2-2-1-4-1c-2-1-2-2-1-2v-1l-2-1a89 89 0 0 0-1 0l-1 1h-5l1 2-2 2h-1l-2-2-1-1-2-1h-1l-2 1v1h-2v-1l-1 1v1h-1l-3 1v5c-1 2-2 1-4 1s-2-1-3-2h-1l-1-1-2-1-1-2-3-1-1 1h1v6l-2 1h-1v-5l-2-2-1-1-3-3-3-2-1-1-4-1h-7v-1c0-2-2-3-3-3h-2c-1 1-2 1-2 3v1l-1 1h-1l-2-1-1 1-1-1 1-1-1-2h-6v1l1 1h-1l-2 1c-1 3-2 6-8 7h-3v6l-4 3-5 2a74 74 0 0 0 5 9l-5 5-10-12-3 4-2 5-3 3v1l1 3-1 3h1v1l2 2-6 11 6 2 3 1v7l2 2v-2h5l5 3 2 3 3 4 1 1 2 4v1l-2 1h-1v2l4 2 1 1 2 2 6-4c2-2 9-2 11-1s5-2 8-3c4-1 6 7 7 12 1 4-1 9-5 9-3 0-9 2-12 5-2 2 3 8-1 8s-7 3-5 4c2 0 5 5 7 7l4 8c1 2 8 3 13 4 4 1 2 6 0 13v5l4-4c5-5 5-5 12-7Zm309 145-3 3c-2 1-2 1-2 3v5l-1 2-2 3 3 2 2-1h1l7 4v1l1 2 1 1a42 42 0 0 1 10 4h3l1 1-1 1 2 1h1l3 1 1-1a163 163 0 0 0 6 1l1-1 3 1h1l3 2v3h1l1 1 4 1h4l2-1v1l1 2c1 1 1 0 2-1h2l4 2h3a23 23 0 0 1 1 0l1-1h1l-1 1 2 2c1 1 1 0 2-1l2-1h3l1-1 1-1v-1h1v-1l-1-2v-10h-2l-6 1-7-3-1-1-1 1-1 2h-2v-2l-2 1-2-2-2-3h-2l-1 1-2-1v-1l-2-2h-3l-3-2-1-1c-2-1-2-2-2-3l1-1h-5l-3 1c-2 0-2-2-3-4l-1-2-3-2-3-1-3-1-1-1-1-1v-1l1-1-1-1-1-1h-6l-1 1v1l-1 1-1 1h-1l-1-1-1 1h-1ZM271 416l1 1v1l1 2 2 2 1 2-1 1-2-1-4-1-6-2-1-1-1-1-1 2v2l1 1v1l1 1 2 1v5l2 2 1 1 2 1 1 2h-1l-1 1-2 1v1l2 1 2 2h2l1 1h1v2l1 1v2l-1 2 5-3 3-2 4-3h3l2 1v1l2 1v1l-1 2v2l-1 1v2c1 1 2 3 5 4 2 2 3 1 4 1h1v-1c-2-3 0-8 0-11s3 3 3 3l1-6 1-9c1-2 6-3 8-4 1-1-4-4-7-5-3-2-8-9-11-15l-2 3-2 2-1 2c-1 2-2 4-4 4h-2l-2-2-6-6h-3l-1-1-2 2Z"></path><path d="m361 458 5 2c2 1 3 1 6-2 3-2 4-4 4-6 1-2 1-3 3-3l3-1h8c1 0 4-4 6-3h6l4 4 4 2 3 1 3 2 3 2 2-1c1 0 3-1 5 1l2 2 1 3 6 3 5 2h7v18l1 2 4-1 1 1 1-1 1-2h6c2 0 5-1 5-5l1-4 1-3c1-3 2-3 3-3h2l1-2c1-1 1-2 3-2l6 1 4 1-1-3v-2l1-1-2-2-3-1-3-2h-3l-34-21-5-11-2-3-1-2-2-1h-4v1h-1l-2-1h-2l-2 1h-2c-2 0-4-2-5-3l-1-1 2-2 2-2 1-2h-4l-1-2v-1c0-2-2-3-3-3h-6l-3-3a72 72 0 0 0-2-3l-1 1-3 2 1 3v1l-2-1-2-1-1 2v1l-1 1h-1l-3 1-1 1-2 1-1 1v3l1 1v1l-1 3-10 2h-6s-2-7-8-10l-3-4c-1-1-1-1-6 1h-3c-6 3-7 3-11 7l-4 5 5 4c3 4 1 4-1 7-1 4 3 10 5 10 1 0 2-3 5-1 3 1 1 3 0 6-1 2 1 3 4 5 2 3 3 5 2 10v1l3-1 7-1Zm382 177-2-3-2-3-1-3-1-2v-1l2-2 1-1-1-1-2-4h-1 1v-2l-1-2 1-1h4l-5-5v1l-2 1v-8l2-3v-4l5 3 1 1c1-1 1 0 1 1l2 2 2 2 2-2 1-1 1 1v3l1 3 1 2 3 3 3 1 3-1h4v1l2-1h1l2-1h6l-1 3v1l-2 1-1 1v1l-2 1h-2v4l1 3v3l1-2h1v1l2 2v1-3l1-1v-2l2-3 1-1 1 1c1 0 2 2 2 6l1 3 1 3v1l1 2v2h2v-12h1s1 2 3 2v-1l2 1 2 1 6-14-2-1s0-3 2-4l1-1 1-1 2-9v-1l8-6c3-2 6-3 8-2l2 1 1 1-1-2-1-1 1-1 2-3-3-1-2-1-2-1-4-2-3-1-2 1a261 261 0 0 1-12 9l-2 1-2 1-1 1-1 1-2 1h-9l-4 1h-1l-5 1h-6l-6-2-2 1h-1l-3 1h-4l-2-1-6-3a144 144 0 0 1 1-3v-3l-2-1-2-1-3 2 1 3v4a34 34 0 0 0-1 1v1h-5l-1 2-2 1h-1l-2-3v-1 1l-1 1h-2l-2-1-4-1-1-1-3 2-1-3-2 1h-4l-4-2h-1l-1-1v-3l-3-2h-1l-3-1-1 1h-3l-3-1-1 1h-3l-1-1-2-1v-1h-2l-1-1c-1 1-1 0-2-1l-8-3h-1l-2-3v-1l-7-4-2 2a28 28 0 0 0-4-3l1-1 2-2v-2l1-5c-1-2-1-2 1-3l3-3 1-1h1l-2-3-1-2-1 1-2 1h-1l-2-4-1-1c0-2-1-2-2-2l-2-1h-3l-2 1c-2 0-2-2-3-3v-5l-1-3-1-1v-1l-3-4v-5c-1 1-2 2-3 1-2 0-2-1-2-3v-2l-2 1-2 1-2-1-2-1h-1l-6-2-2 1-1 1c-2 0-3 1-4 3v4c-1 2-4 3-5 3l-4 3-3 1-2 1v1l1 1v7l-3 4-2 3a37 37 0 0 1-3 3l-4 4c-2 1-3 4-4 7l-2 5-4 5-2 3-1 1-6 4-4 1-4 1c-2 1-3 1-3-1l-1-1-7 3c-6 4-3 12-3 12l1 1 5-1h1l-2 9 3 2h3v4l4 9v4h-10l-3 1-2 1-3-1-2-1h-3v2l-2 2a9 9 0 0 0-4 2v1c0 1-3 3-1 6s8 4 13 3c6-1 5 1 2 3-3 1-10 1-5 10s16 11 17 11l9-2c3-1 3-5 4-7s0-4-1-7c-2-3 1-3 2-3h4c1 1-1 1-2 2v5l3 2c-1 1-2 1-2 3 0 3 2 4 2 10s-1 7 1 10l3 13c0 5 3 10 5 14 1 4 0 8 3 13s9 13 11 21 5 15 9 18c5 4 11 20 12 24s1 12 9 19c7 7 10-2 10-4s2-3 6-4c5-1 3-3 4-7 1-3 4-4 7-6s1-6 0-11l1-9c2-3 4-9 4-13s-3-5-4-12c-2-8 2-10 8-17 7-7 11-5 13-7l3-8c1-2 5-3 7-5l8-8c3-1 2-3 4-6l5-7c2-3 5 0 11-5 7-5 5-8 5-11s2-5 4-6l8-4c3 0 5 1 5 2l7 1 6-3 3-4v-1l-2-5Zm-437-91h-3v-5c0-3 1-3-1-9-2-5-5-6-8-8h-2l-3-1-3-2-1-2 2-1a71 71 0 0 1-7-9l-1-1h1v-3l-1-1v-1l1-1h1l1-1v-2l2-3h1l1-1 1-1-1-2v-3l1-2-5-1-3-2-1-1v-3l-2-1-2-2v-3l-1-3v-2l-1-1-2 1-2 1-1-1-3-1h-9l-3-1v1l-4 2c0 1-4 5-8 7l-3 1v2l1 1v10c0 6-2 11-3 12l-23 14c0 2 3 10 5 12l2 2 2 2v4h2c4 0 15 5 25 11s29 23 31 25h17l10 2 2 4h5v-2l-4-4-2-5v-7l1-4c1-1 2 1 3 2h2l-7-8v-5ZM72 427v-1l1-1 1-1v-3h-1v-1h-2l-1 1 1 1v2l-1 1-2-1h-1v1h-3l-2 1-3-2h-1v1l1 1-1-1-2-1-1-1v-1h-4v2l-1-1h-1l-1 1h-4l-1 1h-4l-1 2h-6l-5 4-2-1-3 1v4l-2 1v1l-1 3h-2l-1 1v2s1 0 0 0v1a3 3 0 0 1-1 0v1h-5l2 5c2 2 6 1 9 4 2 3 1 5 3 6 3 1 4 2 5 5 0 4-2 3-2 5 1 3 5 4 6 8s6 7 7 9c2 2 3-1 3-4 1-3 3 2 5 2 3-1 1-3 0-4s-2-2-1-4c2-1 5-2 2-3-2-1-2-2-2-4 1-2 5 1 8 2 3 2 0-2 0-4-1-2 1-3 1-2 1 2 4 5 6 4 3 0 1-3-1-4s-4-2-4-7c-1-4-4-3-7-3-2 0-3 2-4-3 0-4-4-7-5-10-2-3 0-5 4-4 5 1 2 4 5 4 2 0 0-3 1-3 0 0 2 3 4 2 2-2-2-4-2-4h4c0-2-4-3-3-5l3-3c1-1 4 2 5 0 1-1 4 0 8 1l2-2v-2Z"></path><path d="M179 487h1c3-1 5-1 6-3v-2l1-2 2-1v-5l1-3h1l1 1c1 1 1 2 3 2l6-2 1-1c2-1 4-2 5 0l1 2 1 1 5-1 7-2 9-3 4-1 6 1 5-2 1-1h1v2l1 1 4-3v-1l1 1h2l4 1h5l-5-4-2-3-1-2-1-3-1-1v-3h1l2-1-1-2v-2l-1-2-2-3-3-1h-2c-1-1-3-1-3-3l-1-2v-8h-1c0-2-1-3-2-3l-1-2-1-1h-1l-3-1h-1l-4 1h-6l-1 1c-1 5-7 5-12 6-6 1-13-1-23-2-10-2-11-4-14-6-2-2-5-2-10-4s-8-1-21-1c-12 1-12 4-15 7s-6 5-9 5c-4 1-5-1-10-1l-10-2c-4-1-5-4-6-7h-6v2l-1-1-1-1v1h-1c-1 1-1 0-1-1l-1-1h-3l-3 1h-1v2h-2v2l2 1v4h-2l-1 1v3l-1 2 3 1c6 1 5 4 3 8s1 8 4 8c3 1 4 9 1 11-2 1-3 5-2 6s4 1 5 3c2 2 2 10 5 11 4 2 12 2 15 7 2 4 13 6 17 2s3-8 6-7c4 0 8 2 11 5 4 4 10 3 15 2s5-2 6-5c2-3 4-3 6-3 2 1 3 3 8 1 5-1 2 2 1 3v3h4Z"></path><path d="m452 610 1-6-1-2 1-3h1l2-2 6-4h2c1 0 0 0 0 0v1h2l2-6v-1l-3-2-3-1v-11h-9c-3-1-3-3-4-5l-1-4-2-2-1-2c-2-1-3-2-3-4 0-3 2-6 3-8l1-2c1-2 2-5 5-7l2-3-1-1c-1 0-6 2-9 0s-3-3-2-7v-9l-1-7 2-3h-3l1-9h2l1-3c-1 0-2-2-1-4l5-4v-1c1-2-1-4-1-4v-17l-6-1-5-1s-4-1-6-4l-1-3-2-2h-7l-3-1-4-3h-2l-5-3-3-4h-6c-2 0-5 3-6 4l-4-1-4 1h-3c-1 0-2 1-2 3l-4 7c-3 3-5 2-7 1l-5-1h-7l-3 1c1 5 5 11 5 11 2 6-2 5-5 5l-17 2c-4 0-12-4-16-7-5-4-7-2-13-4-5-2-3-4-4-7h-1l-2 1-2-1-6-5v-2h1v-2l1-2 1-1-1-1-1-1-2-1h-3l-4 3-3 2-8 4v1l-4-2-3-1-3-1-3-3-1-1v3h-3l1 2v2l1 3 1 2 2 3 5 4c3-1 3 0 3 1l1 1 2-1 3-1v1l1 2v6l2 1c1 0 2 0 2 2v3l1 1 3 1 5 2h1l-1 1-1 1 1 3 1 3-2 1h-1v1l-2 2v2l-2 2h-1v6l1 1 7 8-2 2 1 1 3 1a64 64 0 0 1 4 2c3 1 6 2 8 7 2 7 2 7 1 10l1 5h2v5l7 8 2-1c2-1 4 0 8 1 3 0 3 0 5 3 1 2 3 8 7 12 3 5 2 8 4 9l12 2c5 2 3 4 5 6l8 4 8 1c5 1 4 3 9-1s12-5 15-3c4 3 5 11 6 14s8 3 10 2h5c1 2 7 2 12 3 5 0 12 6 18 4l5-2v-1ZM-84 180v1l1 3h1l2-5v-9l3-2v-1c3-2 4-3 3-7l-4-8h1s3 0 3-2c1-2 1-5-3-8h-1v-21c0-1-4-11 4-17 5-3 6-2 7-1h2c2-2 2-5 2-6v-2l-2-1h-1l-1-1 2-3 2-4 1-3 2-18s6 0 7-3v-2l2-5 5-8v-4l-1-2-1-2 1-1 1-1a54 54 0 0 0 5-9c1-2 3-1 3-1l3 2v-2c1-5 1-9 3-9 1-1 5 1 10 2l3 1 2-2-1-1v-2l1-3V7l2-1 2 2 1-2 1-1c1-2 2-3 5-2 2 1 3 3 3 6l1 4c2 3 3 3 4 3l3-1 3-2c2-1 3-2 4-1 2 0 3 2 4 3l2 1 2-3 1-1 1-1 2-3 2-10 2-5 2-4 2-2 4 1c3 0 3-2 4-2l1-1 4 5v1l2 1 3 4c2 3 2 3 0 4l-1 2c-2 2-2 3-1 3l1 2v1l1-1 1-2 1-1 3-4c2 0 2-2 2-3l1-2c2 1 4 3 5 2v-2c-1-2 0-3 1-5l1-2h-5c-2 2-4 1-5 1-1-1 2-3-1-4l-5-3h8c2 0 4-3 5-4 2-1 5-1 5-3 1-2-2-2-4-3-2 0-6-1-10-4-5-2-6-3-8 0s-4 4-5 3c-2-1-7-3-8-1s-3 5-6 3-7-2-10-1-10 3-12 5c-2 3-6 5-13 3-6-2-5 3-2 5 3 3 1 5-3 4-4 0-3 0-5 4s-5 5-7 4c-1-1-3-4-4-3-2 1-1 4-1 4h-3l-1 4-3-1c-1 1 1 3-1 4-1 1-3 1-3 3l-2 4c-1 1-3 1-4 4 0 3 0 6-2 7l-10 4c-4 2-5 5-4 7v9c0 3-3 4-5 4s-1 3-2 5c0 2-2 3-3 5v4l-3-1c-2 1-1 3 0 4s3 1 2 4-3 2-3 6-2 7-3 8l-4 6c-2 2-1 4-2 5s-2-2-4-1l-3 5-5 10-7 6c-3 2-5 7-7 10l-7 4c-2 1-4-2-5-1-1 2 1 3-4 6-4 3-5 8-6 14-1 7-3 5-4 7-1 3 2 7 3 6s3-1 3 1v5c0 1 3 1 4 8s-1 11-2 12-4 1-4 4 2 4 6 6c3 1 3 5 9 7 7 2 10-3 12-3 2-1 7-5 13-13l9-5 2-1Zm931 579v-1l2-2h1v-1l-1-1-1-1-1-4-1-1v-1l-2-4v-1l1-5c1-2-2-4-6-7-3-2-4-7-3-9v-1c2-1 2-2 2-5v-3l2-2 1-1-1-1-2-1v-5l-2-2-2-2-3-4-1-3-4-6v-2l1 1h3l1-1-1-1v-1c2-1 1-1 1-2v-2l1-2v-1l2-2h8v-2c0-2 1-2 3-2h3l-1-1v-1h1l2-1h4v-1s0-2 2-3l1-1 2-1 1-1 1-3 3-2h1l1-1h-2l-3 1-3 2c-3 0-4-1-6-4l-2-4-4-2-1 1h-1l3-10h-6v-5l-1-3 1-3h-4l-2 1-3 1-4 1v-1h-1l1-1 2-3v-1h-1l-2-1h-1l1-2v-1l1-1 2-2 1-4h2v-1l2-2h2l1-2 1-2-1-1 1-2v-1l1-5-1-3-1-6h-1l-2 1h-1v-2l1-2c0-3-1-4-2-4l-3-3-4 3v4l-2 2-2 2v1l1 1v2h-2l-2-1c-1-1-4 0-6 1l-9 7-1 9-2 2h-1l-2 4 2 1-6 14-2-1h-2l-3-1v9l-1 2h-1l1 4v7h-1l-1-1-1-1-1 1-1 1-1 1v4l-1 1-1 1v7l2 5h2l5 9 6 13 1 7c0 1-2 3-2 10-1 6 2 5 6 6 4 0 10-1 16-8 6-6 7-3 8-2 1 2 4 4 5 8 0 3 2 4 2 9 0 4 4 7 4 10s0 6 3 8 2 3 4 8l1 9c1 5 1 9-1 11v3l3-4 4-5Z"></path><path d="M9 55v-9c-2-2-1-3 0-4v-2c-2-2-3-3-2-6v-6l-1-2-2-2c0-3-8-6-10-7-3-1-5-4-6-7l-2-2-1-1h-1l-1 2v4l-1 3v1l1 1v1l-2 2-4-1-9-2-2 9-1 3-4-3-1 1-2 3-3 6-2 2v2l1 1v5c0 3-3 6-4 8h-1l-1 5-1 2c-1 3-5 3-7 3l-2 18v3l-3 5-1 2v1h1l2 1 1 2-3 6h-2c-1-1-2-2-7 2-8 5-3 15-3 15v21c5 4 4 7 4 9-1 2-3 2-4 2l3 8c2 4 0 5-2 8a54 54 0 0 0-3 3l-1 3v5l-2 5h-1l1 1c2 3 0 6 1 10s2 9 5 12 5 12 8 13c2 2 3 3 2 4-1 2-3 3-1 4s2 4 3 8c1 5 7 3 11 0 3-4 7-7 14-8 6 0 4-6 4-9l2-16 1-9c0-3 1-7 9-10 7-3 6-11 6-16s-9-9-13-12c-4-4-3-8-3-11l2-7v-10c1-6 4-6 5-7l3-2c0-1-1-5 3-5 3-1 3-3 4-4l5-1c2-1 5-3 6-8 1-6 3-6 4-7v-5l-2-4c-1-2 0-4 1-6l2-6 4-6 5-1a56 56 0 0 1 0-11Zm525 343-1 1-3 1v2l-1 1h-1l-2 1-1 1-2 2c0 2 1 3 2 3l3-2 1 1v1c-1 1-1 2 1 2h4l5-4v-1h1v1l1 2v1h2l1 1v1h2l3 2h4v3l-2 1-2 1-2 1-2 1h-2l-2 1v2l-2 1-1-1-2-1h-3l1 2v1l1 2-1 1-2-2-1-1-1 1a4 4 0 0 1-2 1l-2-1-1-1-2-1-4 1h-3v1l-1 1v2l1 3 1 1h9l2-1 3 1 4-1h4l3 1v1l1 1h1l1 1h2c0-1 0-2 2-2l7-1h1l3-1h3l1-1-1-3v-2l1-2 2-1 4-2 1-1 2-2 2-1c2 1 3 1 4-1l1-1v-1l1 1 1 4 5-1c2 0 3-2 4-4l2-3c3-3 5-4 7-3h5l4-5 4-2 7-4 4-3 2-1h3v-2l-1-3-5-1-1-1c-4-1-5-3-5-3s-1-2-5-2h-11l-20 1-5 1-7-2-2-1-2-2-1-1-3 2-3 2-2 3 1 3v3l-2 1-3-2c-2-1-5-3-9-3h-3c-4 0-6 0-7 2l-3 5 4 3Zm-536 9v-3l1-1 1-1v-2l1-1 1-1 1 1v1-2H2v-2h3l1-1h1v1a326 326 0 0 0-1-5l-1-1h2l1 1v-1l-4-3v-4l1-1 1-2v-2l-1 1H1v-1l-1-1-1-1h-6l-1 1-1-1h-2l-2-1h-2l-2-1h-1v1l-2-1-2 3h-1l-2-3h-2a4 4 0 0 1-1 2v1l1 1v1h-1l1 1 1 1 1 1v2h1v1h1v3a108 108 0 0 0 10 10v1l2 2 1 1 1 1v1h-1l-3 1h1l3-1 2 1 2 2 1 1 2 2 1 1v-4h-1Z"></path><path d="m6 416 1-1H6v-1l-1-1 5-6v1l1 2 1-1h1v-1l-1-1v-1h4v-1h-1v-1h-1l-1-1-2-1-2-1-2-2-1-1-1-1H3v-1H2l1 1v1l1 1-1 1H2v-1l-1 1H0v3h-1l-1 1v2l1 1v4l5 5 2 3v-3Zm341 270-24 3c-5 0-19 2-20 7 0 5-3 8-4 9l-3-1-4-2c-2-1-5 0-8 1a52 52 0 0 1-8 2h-4l-4 1h-3l-1-2-1-1-2 5c1 4-1 8-1 11s3 2 4 4v8c0 2 4 3 3 6 0 4 0 3 2 6s-1 5 8 5c9 1 9-4 13-8 3-3 3-1 8 1 4 2 9-1 11-3 3-1 2-4 5-4 4 0 8 0 10-3 3-3 6-3 10-5l15-4c5-2 6-2 9-8s8-7 11-8l-9-26-13 6Z"></path><path d="M13 445a12 12 0 0 1 2 0v-1l1-1-1-1v-1l1-1h2l1-3 1-1 2-1v-2l-1-2v-1h-1l-1-1v-1h-1l-1-1v-8l1-2-1-2v-2h-2l-1-2v-1l-1-1-1 1h-1l-1-2-4 5v1h1v3l-1 2 1 5c0 3 0 13 2 16 1 3 3 4 2 5h-1 3Zm377 171-1 1 1 2 1 4-2 3-3 2-2 1v3l-2 12 1 8-6 21-16 7 8 26c3 0 5-1 8-3s5-1 9-1c3 0 2-3 2-5 1-3 3-4 5-4 3 0 5-1 9-4 3-2 2-6 4-8s5 0 9 0c5-1-1-6-2-9-2-3 0-3 2-7 1-3 2-4 3-2 2 2 2 1 3-1l4-7c4-4 4-5 6-11s-1-4-3-5l-5-7c-2-2-2-5-4-5h-11c-6-1-7-5-9-7l-3-5-1-4-3 1-2 4Z"></path><path d="m381 644 3-12v-3l2-2 3-2 1-2-1-3v-4l2-4h1l3-1-2-4c-2-6-8-2-9 0l-3 5c-2 1-4 1-4 3 0 1-1 5-3 6-1 2-4 1-7 2l-8-1c-2-1-5 1-6 2h-3l8 18 23 2ZM47 286l-1-1 1-1-1-1v-1h2l2 1 1-1 2-2v-1h4l4-1 1-1 3 1h4l1 1h1l3 1 1-1 3 2 2-1 1 3h3s0-1 0 0h1v1h1v-2 1h2l2-1 1 1 1 1 1-1 1 1 1 1 1-1 3-2 2 4 1-1 2-1 1 1h1l2-1 2 2 1 1v1l1-1v-3l-1-2 1-1h1l1-3c-2 0-5-5-6-7l-3-2-3-3v-5l2-3-1-1-3-2h-1l-2-2-2-1h-2l-3-3-2-2-1-3v-2l-4-2 1-1 1-2v-1l-1-2 1-1v-3l-3-2-1-1-5 1h-2v-2l-1-1h-4v-1h-2l-1-1-1-1-2 3-1 1-2 1h-4l-2 1v2l-1 1v2l3 2-2 1h-3l-1 1-1 2-1 1s-1 0 0 0l-1 2v1l-1 2v1l1 1 1 1h-2l-1-1h-1l-1 1-1 1h-2l-2 2-2 1-3-1h-1v1l3 10 3 3c1 1 3 3 3 5l2 3 2 3-1 3-2 3v2l5 4v-2Zm-96 83h2v-2h-1v-3h-1v-1l1-1v-1h-2v-2l1-1h1v-1l-8-2-3-1-2-1v-1l-1-1v-2l-3 1h-6v1h-1v1l-2 1h-1l-1-1h-2v1l-1 1h1v3l-1-1-1-1h-1v4l1 1h-1v1h-1v-1l-1-1h-2l-1 1-1-2-1-2v2l-1 2-1 2-2 1 1 1v2h-2v-2h-1l1-1h-1l-1-1-2-1v-3l-3 2v2l-1 1-1 1v1h-2l-2-1-2 1-1 1-1-1-1 1h-1v2h1l1 1c-1 1-1 1 1 2v1c1 1 0 2-1 2l-2 1-1 1v1l1 1v1l2 2v1h-1l-1 2h1v1l1 2 3 1v1l2-1h1v3l-1 1-1 2 4-2c1-2 3-3 10-3 8 0 9 6 12 13 4 7 8 8 10 11s7 10 13 11c6 0 14 9 15 10 2 1 4-1 6 2l5 6c2 1 4 1 5 4l3 8c1 3 0 4-2 9-3 5-1 6 1 7 1 1 8-1 8-4l3-11c2-4 0-5-2-7-2-3-1-2 0-8 0-6 5-2 6-1l6 6c2 1 3-2 3-4s-1-6-3-7l-7-3-9-6c-3 0-6 0-6-2v-5c-2 0-7 0-11-2-4-1-5-4-7-6-2-3-3-7-6-10l-9-8c-3-2-4-7-5-10s1-8 6-11c2-2 4-1 5-1h1l2-1Zm268 161-3-3-5-11a1190 1190 0 0 1-20 11h-2l-2-1-4-2-4-1v-1c-1 20-5 36-7 39l1 4 1-1v2l15 3 5-5 1-2c2-2 3-2 5-2h3c2 0 3-3 4-5l1-1-6-7-4-5h1s14-3 19-6l3-1v-4l-2-1Z"></path><path d="M247 467v-1h-1l-1 1-5 1h-10l-9 3a257 257 0 0 0-13 3v-1l-1-2c-1-1-2-1-5 1h-1l-6 2-4-1-1-1v-1 3l-1 2v3l-2 1v2l-1 2c0 3-2 3-6 3h-4v10l1 2h7c2 0 3 1 4 3v4l-1 2-1 1-1 1-2 1-2 4-1 1-1 1v5l4 2 4 2h7a1235 1235 0 0 0 40-25c2-1 4-7 4-12a358 358 0 0 1 0-10l-1-1-1-2 3-2c5-1 8-5 9-6l-1-1Zm84 121 1 6v3c0 2-2 0 0 2 1 2 0 3 1 2 1 0 1 1 2-1v-2l1-3 1-1v-5l-2-1-2-1-1 1h-1ZM79 671h-9v45H60s-2 2-1 4-1 4-3 6l-1 1-1 5c1 1-1 2-2 3l-1 1v3c1 2 2 3-1 5l-3 4 1 1 3-1h2l1 3v3l1 2c1 2 1 4 3 5v5l2 2 2 2 4 6 1 3c3 1 7 0 10-1l2-2 2-3c2-2 4-2 6-2l3 3 2 3c0 2 1 4 5 4h14c3 2 5 2 8 0l5-2h1v-2l1-3h1c0-1 1-2 3 0l8 4 6 1 11-14-1-5-1-2-1-1v-1l5-1v-2h6l-1 5v3c0 4 0 7 2 9l3 2c2 2 4 4 4 6v2l1-1 1-4 1-2 1-5v-1h1l1-1 1 1c1 0 1 1 2-1 2-1 1-6 0-8 0-2 7-9 7-10h5l4-16-1-3c-1-1 1-10 2-13l2-2 1-3v-8h4l1-2c0-2 1-2 3-2 2-1 4-1 5-3l2-3 3-3c-3-3-14-5-15-13l-1-12-2-8-1-8H79v22Zm119-24c-1-2-6-7-9-8s-7-6-6-9c0-4-1-8-3-11-3-2-14-15-14-23-1-8-5-9-5-12l-4-6-7-8-3-7c1-1 1-1 4 3l8 11 6 5c2 0 4 2 5-5l2-10 1-2-7-28-3 5-8 2-8 1c-3-1-5 0-7-2s-7-3-11-2-3-1-8 2c-5 4-9 5-21 1-11-3-15-2-19-3h-2v3l-1 8v2c-1 3-2 7 2 14v81h119l-1-2Z"></path><path d="M259 751c2 0 3-2 4-4v-1l-10-14-13-9c-3-2-12-7-14-12-2-4-2-7-2-10-1-3-3-8-6-11l-2 4-3 2c-1 2-3 3-5 3l-3 2v2h-5v8l-1 3-2 3c-1 2-2 11-1 12l1 3h4l3-2 1 1 2 1 2-6 1-1 5 5v1l4-2 2-1h2l1 1v-1h3l5 1 7 4 3 2 4 5 10 11h3ZM-21 639v1l2 9 1 9 1 3 4 4 1 2-1 3-1 3v16l-1 8-1 7-6 7-9 11c-1 4-3 5-5 6l-1 2 1 3 1 4 1 2 4 5 3-1 3 4 2 5 2 8c0 7 1 11 3 13l4 4h1l-17-1-2 4 1 1 2 2c3 2 8 5 10 10l1 8c4 0 7-1 9-3h2l2 2 1 1 1-1c1-1 3-3 9-3 8 0 12-2 12-5l-1-3v-2l4-1c6-1 10-2 17-7 6-5 8-6 8-8v-4l6-1h5c0-1 1-2-1-4l-2-6-1-2v-3l-1-3h-2c-1 1-2 2-3 1h-1c-1-2 2-4 3-5 2-2 2-3 1-5v-1h-1l1-3h1l2-3c-1-1 0-4 1-6l1-1c1-1 3-3 2-5l2-4h9v-39l-81-43-9 5Z"></path><path d="m-56 531-5 4-5 3c-2 2-4 5-4 8 1 4-2 9-4 10l-1 1c-2 0-3 0-3 2l3 6 1 1v9h1l1 1-1 10v1l-1 1v12l-4 4 2 2 5 7 1 3c0 4 1 6 3 6l4 2a11 11 0 0 0 5 1c2 1 4 1 5 3v3l1 2h3c3 0 8 1 12 4l3 2c3 3 4 4 9 1l13-7h1l80 43v-6h10v-21h1l-1-81c-4-7-3-11-2-14l1-2v-8l1-3-8-4c-1-3-14-1-17-4-2-3 0-4-4-5s-24-4-26 2c-3 7-5 10-3 13 1 4 2 11-4 13-5 2-13 0-18-7-6-7-20-3-21-5s1-7-4-11c-5-3-17-6-21-6h-9v4Z"></path></g><path d="M96 394v1l-2 2c-2 3-5 2-5 7 0 6 0 5 2 10l1 2c2 3 3 6 7 7l10 2c5 0 6 2 10 1 3 0 6-2 9-5s3-6 15-7c13-1 16-1 20 1 5 2 9 1 11 4 2 2 4 4 14 5 10 2 17 3 23 2 5-1 11 0 12-5l1-1v-1c2-4 3-7-2-13-6-7-9-8-15-12h-1c-6-4-5-7-12-9s-9-2-13-5-5-2-6-5-4-6 0-6c5-1 6-4 6-5v-5c0-1-5-1-2-4 4-3 8-5 7-6l-1-2h-1l-4-1c-3 0-3 1-8 4-4 3-8 6-15 5-2-1-1 5-3 5v3c2 2 2 5 5 6h7c3-1 5 0 5 1s4 3 0 4h-9l-4 4-6 1c-1 1 0 5-5 4-5 0-11-1-9-4 1-3-4-6-5-6-2 0-3-2 0-4 2-2 5-1 5-4 0-2-5-4-9-4-3 0-1 0-6-3-5-2-4-4-8 0-3 4-4 9-6 10s-4 0-4 2 2 3 0 6l-1 1-6 3c-1 1 2 2 0 6l-2 8Zm210 42-1 8-1 6s-3-5-3-2c-1 3-2 7-1 11l1 1c1 3-1 5 4 7 6 2 8 0 13 4 4 3 12 7 16 7l17-2c3 0 7 1 5-5 0 0-5-6-5-11v-1c1-5 0-7-3-10-2-2-4-3-3-5 1-3 3-5 0-6-3-2-4 0-5 0-2 0-6-6-5-9 2-3 4-3 1-7l-5-4-1-1v-5c2-7 4-12 0-13-5-1-12-2-13-4l-4-8-7-7c-2-1 1-4 5-4s-1-6 1-8c3-3 9-5 12-5 4 0 6-5 5-10-1-4-3-12-7-11-3 1-6 4-8 3s-9-1-11 1l-6 4-7 6-10 6c-3 2-9 5-7 11 1 7 6 11 7 14 0 3-1 8 3 13 4 4 9 5 12 11l1 1c3 6 8 13 11 14 3 2 8 5 6 6-1 1-6 2-7 4Zm499 274c-2 2-5 2-7 2-4-1-7 0-7-6 1-7 3-9 3-10l-1-7-6-13c-1-2-4-8-6-9l-2-1c-3 0-7-1-10-4-4-5-7-9-7-13l-2-9c-1-3-3-7-4-6-2 2-3 1-4 0-2-2-5-4-5-1 0 2 1 4-1 5l-1 2v1l-3 4c-1 1-4 3-6 2h-7c-1-1-2-3-5-2l-8 4c-2 1-4 3-4 6s2 6-5 11c-6 4-9 2-11 5l-5 7c-2 3-1 5-4 6l-8 8c-3 2-6 2-7 5l-4 7c-1 2-6 1-12 8l-4 4h153v-6ZM261-1c0 1 0 3 3 3l3-3h-6Zm-46 0-2 1c-2 1-3 0-3-1h-95l15 9c13 9 18 11 21 12l6 6c1 2 7 10-1 18-7 9-12 12-21 11l-15-2c-4-1-5-1-7-3-3-2-4-1-7-1s-3-2-4-3c-1-2-5-3-5 0 0 2-1 5 2 7 2 1 12 3 11 10s1 11 2 12c2 2 0 7 2 10 2 2 7 2 12 6 4 4 14 7 15 1 2-6-2-5-6-6s-5-2-7-4-3-4-2-5c2-2 1-4 2-6h5l6 4c3 1 6 0 9 3 2 2 1 5 4 5s10-4 5-11-5-10 0-15c5-6 8-13 12-13l12 2c3 1 8 2 7-5s0-8-4-10c-4-3-4-4-4-11s0-13-4-14c-4-2-7-6-1-4h12c5-1 6 0 7 3s2 2 4 5c2 2 6 4 3 6l-6 2c-1 0-2 0-3 2 0 2-2 2-1 4l5 6c2 3 5 4 7 4 3 0 7 1 9-2l2-11c-1-2 0-4 5-3 4 0 3-2 1-4-1-2 1-2 2-1 1 2 2-1 4-3l6-7c1-1 2-3 5-4h-22Zm-38 501v-1l-1-2v-8l-1-2v-3c0-1 4-4-1-3-5 2-6 0-8-1-2 0-4 0-6 3-1 3-1 4-6 5s-11 2-15-2c-3-3-7-5-11-6-3 0-2 4-6 8s-15 2-17-2c-3-5-11-6-15-7-3-1-3-9-5-11-1-2-4-2-5-3s-1-5 2-6c3-2 2-10-1-11s-6-4-4-8 2-7-3-8l-3-1h-1c-4-1-7-2-8-1-1 2-4-1-5 0l-4 3c0 2 4 3 4 4 1 2-3 1-4 1 0 0 4 2 2 3-3 2-4-1-5-1 0 0 2 3-1 3-2 0 0-3-4-4s-6 1-4 4c1 3 5 6 5 10 1 5 2 3 4 3 3 0 6-1 7 3 0 5 2 5 4 7 1 1 4 4 1 4s-5-2-6-4c-1-1-2 0-1 2 0 2 3 5 0 4s-8-4-8-2c-1 2 0 3 2 4 3 1 0 2-2 3-1 1 0 3 1 4s2 3 0 4c-2 0-5-6-5-2 0 3-1 6-3 4s-6-5-7-9-5-5-6-8c0-2 2-1 1-5 0-3-1-4-4-5-2-1-1-3-3-6-3-3-7-2-9-5l-2-4 1-1c1-1-1-1-2-4-2-3-2-13-2-16l-1-5v-1l-2-2-5-5v25l1 5-1 4v104c5 7 13 9 18 7 5-3 5-10 3-13-1-3 1-6 3-13 3-6 23-4 27-3 3 2 2 3 4 6s16 1 17 3 4 4 7 5h3c4 1 8 0 19 3 11 4 16 3 21-1 5-3 4-2 8-2 4-1 9 0 11 2s3 1 7 1h8c4 0 7-3 8-3v1l3-5 2-4c1-4 0-7 2-9l3-5v-1l1-2 4-13-1-3Zm-95 1c-1 2-4 2-8 2l-6 3c-2 0-4-4-6-4h-7c-1 0-3-4-1-5 4-2 5-1 7 0s1-3 7-1l9 3c3 0 7 0 5 2Zm80-3c-2 1-2 4-2 5 0 2-3 1-5 1-2 1-4 3-7 3l-7-2c-2-2 0-4 3-5 3 0 3-2 7-3l2 1c2 1 3 0 6-1l5-3c1 1-1 2-2 4Z" fill="#1B253A"></path></g><defs><clipPath id="a1"><path fill="#fff" d="M0 0h804v715H0z"></path></clipPath></defs></svg>`;
});
const css$l = {
  code: "svg.svelte-1hraey0{bottom:0;display:block;left:0;max-width:none;pointer-events:none;position:absolute;right:0;top:0;z-index:var(--layer-grid-lines)}",
  map: null
};
const GridLines = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$l);
  return `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9 8" class="svelte-1hraey0">${each(new Array(10), (_, x) => {
    return `<path d="${"M " + escape(x, true) + " 0 L " + escape(x, true) + " 8"}" stroke="white" stroke-width="0.01" stroke-dasharray="0.02 0.02"></path>`;
  })}${each(new Array(9), (_, y) => {
    return `<path d="${"M 0 " + escape(y, true) + " L 9 " + escape(y, true)}" stroke="white" stroke-width="0.01" stroke-dasharray="0.02 0.02"></path>`;
  })}</svg>`;
});
const css$k = {
  code: `.dimming.svelte-5qdlvl{background:var(--color-bg);bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:0;transition:opacity .5s ease-out;z-index:var(--layer-grid-dimming)}.dimming.has-mask.svelte-5qdlvl{-webkit-mask:var(--mask) center /contain no-repeat,url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9 8"><rect width="9" height="8" /></svg>') center /contain no-repeat;-webkit-mask-composite:xor;mask:var(--mask) center /contain no-repeat exclude,url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9 8"><rect width="9" height="8" /></svg>') center /contain no-repeat}.dimming.dim-full.svelte-5qdlvl{opacity:.8}.dimming.dim-semi.svelte-5qdlvl{opacity:.3}.dimming.dim-none.svelte-5qdlvl{opacity:0}`,
  map: null
};
const Dimming = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $dim, $$unsubscribe_dim;
  let $mask, $$unsubscribe_mask;
  const { machine: machine2 } = getGameContext();
  const dim = useSelector(machine2.service, (state) => {
    if (state.matches("Playing.Gameloop.Playing.Moving") || state.matches("Playing.Gameloop.Playing.Placing")) {
      return "full";
    }
    const { context } = state;
    const gameState = GameState.fromContext(context);
    if (gameState.activeSide !== getCurrentUser(context).side)
      return "semi";
    return "none";
  });
  $$unsubscribe_dim = subscribe(dim, (value) => $dim = value);
  const mask = useSelector(machine2.service, (state) => {
    const moving = state.matches("Playing.Gameloop.Playing.Moving");
    const placing = state.matches("Playing.Gameloop.Playing.Placing");
    if (!moving && !placing) {
      return void 0;
    }
    const undimmedSquares = [];
    const gameState = GameState.fromContext(state.context);
    for (let x = 0; x < COLUMN_COUNT; x++) {
      for (let y = 0; y < ROW_COUNT; y++) {
        if (moving && (gameState.isValidMove([x, y]) || isEqual$1(GameState.fromContext(state.context).activePlayerPosition, [x, y])) || placing && gameState.isValidPlacement([x, y])) {
          undimmedSquares.push([x, y]);
        }
      }
    }
    return `url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 9 8">${undimmedSquares.map(([x, y]) => `<rect x="${x}" y="${y}" width="1" height="1" />`).join("")}</svg>')`;
  });
  $$unsubscribe_mask = subscribe(mask, (value) => $mask = value);
  $$result.css.add(css$k);
  $$unsubscribe_dim();
  $$unsubscribe_mask();
  return `<div class="${[
    "dimming dim-" + escape($dim, true) + " svelte-5qdlvl",
    $dim === "full" ? "has-mask" : ""
  ].join(" ").trim()}"${add_styles({ "--mask": $mask })}></div>`;
});
const css$j = {
  code: "@keyframes svelte-1af5wtt-pulsate{0%,to{opacity:.2}40%,60%{opacity:.7}}.highlighted-fields.svelte-1af5wtt.svelte-1af5wtt{grid-gap:0;bottom:0;display:grid;gap:0;grid-template-columns:repeat(var(--column-count),1fr);grid-template-rows:repeat(var(--row-count),1fr);left:0;pointer-events:none;position:absolute;right:0;top:0;z-index:var(--layer-grid-highlight)}.highlighted-fields.info.svelte-1af5wtt.svelte-1af5wtt{--_color:#000}.highlighted-fields.attacker.svelte-1af5wtt.svelte-1af5wtt,.highlighted-fields.reveal.svelte-1af5wtt.svelte-1af5wtt{--_color:var(--color-red-polygon)}.highlighted-fields.svelte-1af5wtt .field.svelte-1af5wtt{animation:svelte-1af5wtt-pulsate 1.8s infinite;background:radial-gradient(transparent 50%,var(--_color) 100%);grid-column:var(--column);grid-row:var(--row);transform-origin:center}@supports (color:color-mix(in lch,red,blue)) and (top:var(--f )){.highlighted-fields.svelte-1af5wtt .field.svelte-1af5wtt{background:radial-gradient(color-mix(in oklab,var(--_color),transparent 40%) 50%,var(--_color) 100%)}}",
  map: null
};
const HighlightedFields = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $highlightedFields, $$unsubscribe_highlightedFields;
  const { highlightedFields } = getGameContext();
  $$unsubscribe_highlightedFields = subscribe(highlightedFields, (value) => $highlightedFields = value);
  $$result.css.add(css$j);
  $$unsubscribe_highlightedFields();
  return `${$highlightedFields.info ? `<div class="highlighted-fields info svelte-1af5wtt">${each($highlightedFields.info, (coordinates) => {
    return `<div class="field svelte-1af5wtt"${add_styles({
      "--column": coordinates[0] + 1,
      "--row": coordinates[1] + 1
    })}></div>`;
  })}</div>` : ``} ${$highlightedFields.attacker ? `<div class="highlighted-fields attacker svelte-1af5wtt">${each($highlightedFields.attacker, (coordinates) => {
    return `<div class="field svelte-1af5wtt"${add_styles({
      "--column": coordinates[0] + 1,
      "--row": coordinates[1] + 1
    })}></div>`;
  })}</div>` : ``} ${$highlightedFields.reveal ? `<div class="highlighted-fields reveal svelte-1af5wtt">${each($highlightedFields.reveal, (coordinates) => {
    return `<div class="field svelte-1af5wtt"${add_styles({
      "--column": coordinates[0] + 1,
      "--row": coordinates[1] + 1
    })}></div>`;
  })}</div>` : ``}`;
});
const css$i = {
  code: "svg.svelte-1lyv30z{bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:0;z-index:var(--layer-grid-stage-lines)}path.svelte-1lyv30z{stroke:#000;stroke-width:1.5;fill:none}",
  map: null
};
const squareSize = 54;
const StageLines = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const width = squareSize * 9;
  const height = squareSize * 8;
  const exitHorizontally = [[4, 5], [5, 7], [7, 4]];
  const getShortestPath = (points) => {
    const path = [];
    let prevPoint = void 0;
    for (const point of points) {
      if (prevPoint) {
        if (exitHorizontally.filter((coordinate) => isEqual$1(coordinate, prevPoint)).length > 0) {
          path.push([point[0], prevPoint[1]]);
        } else {
          path.push([prevPoint[0], point[1]]);
        }
      }
      path.push(point);
      prevPoint = point;
    }
    return path;
  };
  const getPosition = (coordinate) => {
    const [x, y] = coordinate;
    const xPosition = x * squareSize + squareSize / 2;
    const yPosition = y * squareSize + squareSize / 2;
    return [xPosition, yPosition];
  };
  const toSvgPath = (points) => {
    const path = getShortestPath(points).map((coordinate, index) => {
      const [x, y] = getPosition(coordinate);
      if (index === 0) {
        return `M ${x} ${y}`;
      }
      return `L ${x} ${y}`;
    });
    return path.join(" ");
  };
  $$result.css.add(css$i);
  return `<svg viewBox="${"0 0 " + escape(width, true) + " " + escape(height, true)}" xmlns="http://www.w3.org/2000/svg" class="svelte-1lyv30z">${each(BOARD_SUPPLY_CHAINS, (chain) => {
    return `<path${add_attribute("d", toSvgPath(chain.map((stage) => stage.coordinate)), 0)} class="svelte-1lyv30z"></path>`;
  })}</svg>`;
});
const css$h = {
  code: "svg.svelte-1jd2x21{display:block;height:100%;position:relative;width:100%}",
  map: null
};
const ItemPolygon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { side } = $$props;
  if ($$props.side === void 0 && $$bindings.side && side !== void 0)
    $$bindings.side(side);
  $$result.css.add(css$h);
  return `${side === "attack" ? `<svg viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg" class="svelte-1jd2x21"><path d="M21.3571 26L6.61664 0L4.64282 26H21.3571Z" fill="#51514F"></path><path d="M21.357 10.7388L6.61658 0L21.357 26V10.7388Z" fill="#292521"></path></svg>` : `<svg viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg" class="svelte-1jd2x21"><path d="M6.9792 26L17.8865 17.8076L5 0L6.9792 26Z" fill="#9C9A9F"></path><path d="M17.8741 17.814L22 2.25865L5 0L17.8741 17.814Z" fill="#7D797D"></path></svg>`}`;
});
const css$g = {
  code: "@keyframes svelte-5dzsxa-pulsate{0%,to{scale:1.2}40%,60%{scale:1.4}}.item.svelte-5dzsxa.svelte-5dzsxa{height:1.5rem;position:absolute;width:1.5rem}.item.highlight.svelte-5dzsxa.svelte-5dzsxa{--_color:#fff;animation:svelte-5dzsxa-pulsate 1s infinite;background:transparent;background:#0004;border-radius:var(--radius-full);outline:.3rem solid rgba(0,0,0,.267);scale:1.4;z-index:var(--layer-top)}.item.svelte-5dzsxa>svg{position:absolute}.item.svelte-5dzsxa.svelte-5dzsxa:first-child{left:.5rem;top:.5rem}.item.svelte-5dzsxa:first-child>svg{left:-.25rem;top:-.25rem}.item.svelte-5dzsxa.svelte-5dzsxa:nth-child(2){bottom:.5rem;right:.5rem}.item.svelte-5dzsxa:nth-child(2)>svg{bottom:-.25rem;right:-.25rem}.item.svelte-5dzsxa .icon.svelte-5dzsxa{position:relative}.item.svelte-5dzsxa .icon.svelte-5dzsxa svg{display:block;height:100%;width:100%}",
  map: null
};
const Items = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $highlightedFields, $$unsubscribe_highlightedFields;
  let { coordinate } = $$props;
  const { highlightedFields } = getGameContext();
  $$unsubscribe_highlightedFields = subscribe(highlightedFields, (value) => $highlightedFields = value);
  const items = BOARD_ITEMS.filter((item) => isEqual$1(item.position, coordinate));
  if ($$props.coordinate === void 0 && $$bindings.coordinate && coordinate !== void 0)
    $$bindings.coordinate(coordinate);
  $$result.css.add(css$g);
  $$unsubscribe_highlightedFields();
  return `${each(items, (item) => {
    return `<div class="${[
      "item svelte-5dzsxa",
      !!$highlightedFields.items?.includes(item.id) ? "highlight" : ""
    ].join(" ").trim()}">${validate_component(ItemPolygon, "ItemPolygon").$$render(
      $$result,
      {
        side: isAttackItemId(item.id) ? "attack" : "defense"
      },
      {},
      {}
    )} <div class="icon svelte-5dzsxa">${validate_component(Item, "Item").$$render($$result, { itemId: item.id }, {}, {})}</div> </div>`;
  })}`;
});
const css$f = {
  code: '.player.svelte-1i2ukeu.svelte-1i2ukeu{--_radius:var(--radius-md);align-items:center;border-radius:var(--radius-md);border-radius:var(--_radius);display:flex;flex-direction:column;gap:.12rem;height:3.375rem;padding-top:.5rem;position:relative;width:3.375rem}.player.playing.svelte-1i2ukeu.svelte-1i2ukeu:after{border:2px solid #fff;border-radius:var(--_radius);bottom:calc(0px - var(--px));content:"";left:calc(0px - var(--px));position:absolute;right:calc(0px - var(--px));top:calc(0px - var(--px))}.player.playing.svelte-1i2ukeu .name.svelte-1i2ukeu{font-weight:700}.player.side-attack.svelte-1i2ukeu.svelte-1i2ukeu{background:var(--color-red-medium)}.player.side-defense.svelte-1i2ukeu.svelte-1i2ukeu{background:var(--color-blue-medium)}.player.side-admin.svelte-1i2ukeu.svelte-1i2ukeu{background:var(--color-blue-transp-12)}.player.svelte-1i2ukeu .name.svelte-1i2ukeu{align-items:center;display:flex;flex-shrink:0;font-size:.5rem;height:1.25rem;justify-content:center}.player.svelte-1i2ukeu .face.svelte-1i2ukeu{height:1.5rem;width:1.5rem}.player.svelte-1i2ukeu .online-status.svelte-1i2ukeu{background:orange;border-radius:var(--radius-full);height:.5rem;position:absolute;right:.25rem;top:.25rem;width:.5rem;z-index:var(--layer-4)}.player.svelte-1i2ukeu .online-status.connected.svelte-1i2ukeu{background:rgba(56,198,0,.467)}',
  map: null
};
const Player$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { name } = $$props;
  let { faceId = void 0 } = $$props;
  let { isConnected = void 0 } = $$props;
  let { isPlaying = false } = $$props;
  let { side } = $$props;
  if ($$props.name === void 0 && $$bindings.name && name !== void 0)
    $$bindings.name(name);
  if ($$props.faceId === void 0 && $$bindings.faceId && faceId !== void 0)
    $$bindings.faceId(faceId);
  if ($$props.isConnected === void 0 && $$bindings.isConnected && isConnected !== void 0)
    $$bindings.isConnected(isConnected);
  if ($$props.isPlaying === void 0 && $$bindings.isPlaying && isPlaying !== void 0)
    $$bindings.isPlaying(isPlaying);
  if ($$props.side === void 0 && $$bindings.side && side !== void 0)
    $$bindings.side(side);
  $$result.css.add(css$f);
  return `<div class="${[
    "player side-" + escape(side, true) + " svelte-1i2ukeu",
    isPlaying ? "playing" : ""
  ].join(" ").trim()}"><div class="face svelte-1i2ukeu">${validate_component(Face, "Face").$$render($$result, { faceId: faceId ?? 0 }, {}, {})}</div> <div class="name svelte-1i2ukeu">${escape(name)}</div> ${isConnected !== void 0 ? `<div class="${["online-status svelte-1i2ukeu", isConnected ? "connected" : ""].join(" ").trim()}"></div>` : ``} </div>`;
});
const css$e = {
  code: ".player.svelte-327b3{left:50%;position:absolute;top:50%;translate:-50% -50%}.player.multiple.defense.svelte-327b3{translate:-70% -70%}.player.multiple.attack.svelte-327b3{translate:-30% -30%}.player.defense.svelte-327b3{z-index:var(--layer-1)}.player.attack.svelte-327b3{z-index:var(--layer-2)}.player.svelte-327b3 svg{height:100%;width:100%}",
  map: null
};
const Players$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let multiple;
  let $players, $$unsubscribe_players;
  let { coordinate } = $$props;
  const { machine: machine2 } = getGameContext();
  const players = useSelector(
    machine2.service,
    ({ context }) => {
      const gameState = GameState.fromContext(context);
      const currentUser = getCurrentUser(context);
      const { playerPositions } = gameState;
      return objectEntries(playerPositions).filter(([_, position]) => isEqual$1(position, coordinate)).map(([playerId]) => getPlayer(playerId, context)).filter((player) => currentUser.side === "attack" || getPlayerSide(player.id) === currentUser.side).filter((player) => gameState.isPlaced(player.id)).map((player) => {
        const user = getUser(player.userId, context);
        return {
          ...player,
          user,
          side: getPlayerSide(player.id),
          isPlaying: gameState.activePlayer.id === player.id
        };
      });
    },
    isEqual$1
  );
  $$unsubscribe_players = subscribe(players, (value) => $players = value);
  if ($$props.coordinate === void 0 && $$bindings.coordinate && coordinate !== void 0)
    $$bindings.coordinate(coordinate);
  $$result.css.add(css$e);
  multiple = $players.length > 1;
  $$unsubscribe_players();
  return `${each($players, (player) => {
    return `<div class="${[
      "player " + escape(player.side, true) + " svelte-327b3",
      multiple ? "multiple" : ""
    ].join(" ").trim()}">${validate_component(Player$1, "Player").$$render(
      $$result,
      {
        name: player.user.name,
        side: player.side,
        faceId: player.faceId,
        isPlaying: player.isPlaying
      },
      {},
      {}
    )} </div>`;
  })}`;
});
const css$d = {
  code: `.stage.svelte-10ps0r5{align-items:center;background:url('data:image/svg+xml;utf8,<svg width="90" height="90" viewBox="0 0 90 90" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M70.2 79.6a791.4 791.4 0 0 0-54-.1c-1.7.2-3 .2-4 0s-1.5-.5-1.7-.7a.9.9 0 0 1-.2-.8v-.2l1.2-63.6c0-.5.1-1 .4-1.5.4-.5.9-.9 1.8-1a1316.6 1316.6 0 0 1 59.5-1.4h2.1l2.1.2c.6 0 1 .2 1.3.3.4.3.9.8 1 2.6.5 17.6-1 62.7-1 64.5v.1s0 .3-.3.6c-.3.2-.8.6-1.7.8a37.7 37.7 0 0 1-6.5.3Z" fill="%23D8E0E3"  stroke="black" stroke-width="2.5" /></svg>');background-size:cover;bottom:0;color:var(--color-black-dark);display:flex;flex-direction:column;justify-content:space-between;left:0;padding:1rem;position:absolute;right:0;top:0}.icon.svelte-10ps0r5{aspect-ratio:1;height:2.75rem}.name.svelte-10ps0r5{flex-shrink:0;font-size:var(--scale-0000);line-height:1.2;max-width:100%;overflow-x:hidden;text-align:center;text-overflow:ellipsis;white-space:nowrap}`,
  map: null
};
const Stage_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let stageName;
  let { coordinate } = $$props;
  const stage = BOARD_SUPPLY_CHAINS.flat().filter((stage2) => isEqual$1(stage2.coordinate, coordinate))[0];
  if ($$props.coordinate === void 0 && $$bindings.coordinate && coordinate !== void 0)
    $$bindings.coordinate(coordinate);
  $$result.css.add(css$d);
  stageName = stage?.id ? getStage(stage.id).name : "";
  return `${stage ? `<div class="stage svelte-10ps0r5"><div class="icon svelte-10ps0r5">${validate_component(Stage, "Stage").$$render($$result, { stageId: stage.id }, {}, {})}</div> <div class="name svelte-10ps0r5">${escape(stageName)}</div></div>` : ``}`;
});
const css$c = {
  code: ".square.svelte-fqu9rq.svelte-fqu9rq{--_inactive-opacity:0;display:block;grid-column:var(--_column);grid-row:var(--_row);min-height:0;min-width:0;position:relative}.square.svelte-fqu9rq .content.svelte-fqu9rq{bottom:0;left:0;position:absolute;right:0;top:0;z-index:var(--layer-grid-square)}.square.with-info.svelte-fqu9rq .content.svelte-fqu9rq{z-index:var(--layer-grid-square-with-info)}.square.svelte-fqu9rq>.svelte-fqu9rq{min-height:0;min-width:0}.info-button.svelte-fqu9rq.svelte-fqu9rq{background:transparent;bottom:0;cursor:default;display:block;left:0;position:absolute;right:0;top:0;transition:background .3s ease-out;z-index:var(--layer-top)}.info-button.svelte-fqu9rq span.svelte-fqu9rq{display:none}.info-button.svelte-fqu9rq.svelte-fqu9rq:hover{background:hsla(0,0%,100%,.133);transition-duration:0ms}.status.svelte-fqu9rq.svelte-fqu9rq{background-color:color-mix(in oklab,var(--color-blue-spielbrett),transparent 30%);bottom:0;left:0;pointer-events:none;position:absolute;right:0;top:0}.status.svelte-fqu9rq svg{height:1.5rem;position:absolute;right:.125rem;top:.125rem;width:1.5rem}",
  map: null
};
const Square = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $isDefended, $$unsubscribe_isDefended;
  let $isAttacked, $$unsubscribe_isAttacked;
  let { coordinate } = $$props;
  const { machine: machine2 } = getGameContext();
  const isDefended = useSelector(machine2.service, (state) => GameState.fromContext(state.context).isDefended(coordinate));
  $$unsubscribe_isDefended = subscribe(isDefended, (value) => $isDefended = value);
  const isAttacked = useSelector(machine2.service, (state) => GameState.fromContext(state.context).isAttacked(coordinate));
  $$unsubscribe_isAttacked = subscribe(isAttacked, (value) => $isAttacked = value);
  if ($$props.coordinate === void 0 && $$bindings.coordinate && coordinate !== void 0)
    $$bindings.coordinate(coordinate);
  $$result.css.add(css$c);
  $$unsubscribe_isDefended();
  $$unsubscribe_isAttacked();
  return ` <div class="${["square svelte-fqu9rq", ""].join(" ").trim()}"${add_styles({
    "--_row": coordinate[1] + 1,
    "--_column": coordinate[0] + 1
  })}><div class="content svelte-fqu9rq">${validate_component(Stage_1, "Stage").$$render($$result, { coordinate }, {}, {})} ${validate_component(Items, "Items").$$render($$result, { coordinate }, {}, {})} ${validate_component(Players$1, "Players").$$render($$result, { coordinate }, {}, {})} <button class="info-button unstyled svelte-fqu9rq" data-svelte-h="svelte-1p8qtlq"><span class="svelte-fqu9rq">Show info</span></button> ${$isDefended || $isAttacked ? `<div class="status svelte-fqu9rq">${$isDefended ? `${validate_component(StageStatus, "StageStatus").$$render($$result, { status: "defended" }, {}, {})}` : `${$isAttacked ? `${validate_component(StageStatus, "StageStatus").$$render($$result, { status: "attacked" }, {}, {})}` : ``}`}</div>` : ``}</div> ${``} </div>`;
});
const css$b = {
  code: ".grid.svelte-x0p9mg{grid-gap:0;display:grid;gap:0;grid-template-columns:repeat(var(--column-count),1fr);grid-template-rows:repeat(var(--row-count),1fr);height:var(--grid-height);position:relative;width:var(--grid-width)}",
  map: null
};
const Grid = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$b);
  return `<div class="grid svelte-x0p9mg">${validate_component(Backdrop, "Backdrop").$$render($$result, {}, {}, {})} ${validate_component(StageLines, "StageLines").$$render($$result, {}, {}, {})} ${each([...new Array(ROW_COUNT)], (_, y) => {
    return `${each([...new Array(COLUMN_COUNT)], (_2, x) => {
      return `${validate_component(Square, "Square").$$render($$result, { coordinate: [x, y] }, {}, {})}`;
    })}`;
  })} ${validate_component(GridLines, "GridLines").$$render($$result, {}, {}, {})} ${validate_component(Dimming, "Dimming").$$render($$result, {}, {}, {})} ${validate_component(HighlightedFields, "HighlightedFields").$$render($$result, {}, {}, {})} </div>`;
});
const ToastMessages = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_notifications;
  const { machine: machine2 } = getGameContext();
  const notifications = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    const user = getCurrentUser(context);
    const notifications2 = [];
    if (gameState.activePlayer.userId === user.id) {
      if (gameState.nextEventType === "move") {
        notifications2.push({
          id: `move-${gameState.activePlayer.id}`,
          message: `${user.name}, du bist dran!`,
          description: `Bewege dich auf eines der markierten Felder, indem du auf das gewünschte Feld klickst.`
        });
      } else if (gameState.nextEventType === "placement") {
        notifications2.push({
          id: `placement-${gameState.activePlayer.id}`,
          message: `${user.name}, du bist dran!`,
          description: gameState.activeSide === "attack" ? "Platziere dich auf einem Feld deiner Wahl." : "Platziere dich auf einem der markierten Felder."
        });
      }
    }
    return notifications2;
  });
  $$unsubscribe_notifications = subscribe(notifications, (value) => value);
  $$unsubscribe_notifications();
  return ``;
});
const Message_circle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg${spread(
    [
      { viewBox: "0 0 24 24" },
      { width: "1.2em" },
      { height: "1.2em" },
      escape_object($$props)
    ],
    {}
  )}><!-- HTML_TAG_START -->${`<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m3 21l1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z"/>`}<!-- HTML_TAG_END --></svg>`;
});
const css$a = {
  code: ".picker.svelte-7udbkn{aspect-ratio:1;isolation:isolate;position:relative;width:2.5rem}.picker.open.svelte-7udbkn,.toggle.svelte-7udbkn{z-index:var(--layer-top)}.toggle.svelte-7udbkn{align-content:center;background:var(--color-bg-strong);box-shadow:0 0 1rem var(--color-shadow-secondary);color:var(--color-blue-spielbrett);display:grid;font-size:var(--scale-2);height:100%;justify-content:center;padding:0;place-content:center;position:relative;width:100%}.emojis.svelte-7udbkn,.toggle.svelte-7udbkn{border-radius:var(--radius-full)}.emojis.svelte-7udbkn{background:var(--color-white-80);display:flex;flex-direction:row;gap:.125rem;padding-left:.5rem;padding-right:3rem;position:absolute;right:0;top:0}.emoji.svelte-7udbkn{align-content:center;aspect-ratio:1;border:none;cursor:pointer;display:grid;flex-shrink:0;font-size:var(--scale-3);justify-content:center;padding:0;place-content:center;width:2.5rem}.emoji.svelte-7udbkn:hover{scale:1.2}",
  map: null
};
const EmojiPicker = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  getGameContext();
  $$result.css.add(css$a);
  return `<div class="${["picker svelte-7udbkn", ""].join(" ").trim()}"><button class="unstyled toggle svelte-7udbkn">${validate_component(Message_circle, "ChatIcon").$$render($$result, {}, {}, {})}</button> ${``} </div>`;
});
const css$9 = {
  code: ".rounds.svelte-143evqt.svelte-143evqt{align-items:flex-end;display:flex;flex-direction:column-reverse;gap:.5rem;width:100%}.rounds.svelte-143evqt .round.svelte-143evqt{--_base-width:3.125rem;--_min-percent:10%;--_max-percent:65%;--_percent:calc(var(--_min-percent) + (var(--_max-percent) - var(--_min-percent))*var(--round)/12);align-items:center;background-color:#dadcdf;background:color-mix(in oklab,var(--color-blue-spielbrett2) calc(10% + 55%*var(--round)/12),#fff);color:var(--color-blue-transp-10);display:flex;font-size:.875rem;font-weight:500;height:2.125rem;justify-content:flex-end;padding:.3125rem 0;position:relative;width:3.125rem;width:var(--_base-width)}@supports (color:color-mix(in lch,red,blue)) and (top:var(--f )){.rounds.svelte-143evqt .round.svelte-143evqt{background:color-mix(in oklab,var(--color-blue-spielbrett2) var(--_percent),#fff)}}.rounds.svelte-143evqt .round span.svelte-143evqt{text-align:center;width:var(--_base-width)}.rounds.svelte-143evqt .round.current.svelte-143evqt{font-size:1rem;font-weight:700;width:calc(var(--_base-width) + .5rem)}.rounds.svelte-143evqt .round .global-attack.svelte-143evqt{cursor:pointer;position:absolute;right:-.75rem;top:1.5rem;width:2rem}.rounds.svelte-143evqt .round .attacker-reveal.svelte-143evqt{cursor:pointer;left:-1.25rem;position:absolute;top:1.5rem;width:2rem}.rounds.svelte-143evqt .round .attacker-reveal .eye.svelte-143evqt{left:-.75rem;position:absolute;top:.25rem}.rounds.svelte-143evqt .round .tooltip-content.svelte-143evqt svg{display:block;width:3rem}",
  map: null
};
const Rounds = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $currentRound, $$unsubscribe_currentRound;
  const { machine: machine2 } = getGameContext();
  const currentRound = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).currentRound);
  $$unsubscribe_currentRound = subscribe(currentRound, (value) => $currentRound = value);
  $$result.css.add(css$9);
  $$unsubscribe_currentRound();
  return `<div class="rounds svelte-143evqt">${each(new Array(TOTAL_ROUNDS), (_, i) => {
    return `<div class="${["round svelte-143evqt", $currentRound === i ? "current" : ""].join(" ").trim()}"${add_styles({ "--round": i })}><span class="svelte-143evqt">${escape(i + 1)}</span> ${NEW_GLOBAL_ATTACK_ROUNDS.includes(i) && i !== 0 ? `<div class="global-attack svelte-143evqt">${validate_component(Tooltip, "Tooltip").$$render($$result, { click: true, position: "left" }, {}, {
      default: () => {
        return `<div class="tooltip-content svelte-143evqt">${validate_component(Polygon, "Polygon").$$render($$result, { color: "orange" }, {}, {})}
              Der allgemeine Angriff wird ausgeführt, sofern er nicht verhindert wurde, und ein neues
              allgemeines Angriffsszenario wird aufgedeckt.</div> `;
      }
    })} ${validate_component(Polygon, "Polygon").$$render($$result, { color: "orange" }, {}, {})} </div>` : ``} ${ATTACKER_REVEAL_ROUNDS.includes(i) ? `<div class="attacker-reveal svelte-143evqt">${validate_component(Tooltip, "Tooltip").$$render($$result, { click: true, position: "left" }, {}, {
      default: () => {
        return `<div class="tooltip-content svelte-143evqt">${validate_component(Polygon, "Polygon").$$render($$result, { color: "red-angriff" }, {}, {})}
              Die Position vom Angreifer wird offenbart.</div> `;
      }
    })} ${validate_component(Polygon, "Polygon").$$render($$result, { color: "red-angriff" }, {}, {})} <svg class="eye svelte-143evqt" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 21"><g clip-path="url(#a2)"><path d="M25.5 12.9c.4 0 .7 0 1-.2.3-.3.6-.8.1-1.3-.8-.9-7.9-7.4-16.3-5.1-8.5 2.2-9.8 6-9.8 6s1.7 4.2 10.3 5.4A17.5 17.5 0 0 0 24.9 13s.3-.3.6-.2Z" stroke="#fff" stroke-linecap="round" stroke-linejoin="round"></path><path d="M13 7.3s-2.6.6-3 2.3c-.4 1.7-.7 5.3 2.5 6.4 3.2 1.2 6-3.1 4.8-6.4-1-3.3-4.2-2.3-4.2-2.3Z" fill="#fff"></path><path d="M1.5 5S4 7 5 8.3M13.9.5l-.2 5.3M22 8l3.2-2.5M6.7 1.8 9 6.6m9.7-.2L20.5 2m5.1 12.4s0 2.4-3.3 4m-2.4 1.2s-1 .5-2.4.8" stroke="#fff" stroke-linecap="round" stroke-linejoin="round"></path><path d="M13.5 8.6s-2.4.4-2.3 2.8" stroke="#1F2134" stroke-linecap="round" stroke-linejoin="round"></path><path d="M13.5 10s-1 .3-1.2.9c-.1.6-.3 2 1 2.4 1.2.5 2.2-1.2 1.8-2.4-.4-1.3-1.6-.9-1.6-.9Z" fill="#1F2134"></path></g><defs><clipPath id="a2"><path fill="#fff" d="M0 0h27.4v20.9H0z"></path></clipPath></defs></svg> </div>` : ``} </div>`;
  })} </div>`;
});
const css$8 = {
  code: ".status.svelte-16hbp9s{align-items:flex-end;display:flex;flex-direction:column;height:100%;width:100%}.rounds.svelte-16hbp9s{align-items:center;display:grid;flex:1;justify-content:end}.emojis.svelte-16hbp9s{margin-right:1rem}",
  map: null
};
const Status = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$8);
  return `<div class="status svelte-16hbp9s"><div class="rounds svelte-16hbp9s">${validate_component(Rounds, "Rounds").$$render($$result, {}, {}, {})}</div> <div class="emojis svelte-16hbp9s">${validate_component(EmojiPicker, "EmojiPicker").$$render($$result, {}, {}, {})}</div> </div>`;
});
const AttackerPosition = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $attackerPosition, $$unsubscribe_attackerPosition;
  let $side, $$unsubscribe_side;
  const { machine: machine2, highlightedFields } = getGameContext();
  const side = useSelector(machine2.service, ({ context }) => getCurrentUser(context).side);
  $$unsubscribe_side = subscribe(side, (value) => $side = value);
  const attackerPosition = useSelector(
    machine2.service,
    ({ context }) => {
      const gameState = GameState.fromContext(context);
      const actionCount = gameState.finalizedActionEvents.length;
      const showingAttackerPosition = gameState.currentRound === 4 && actionCount < 6 * 4 + 2 || gameState.currentRound === 9 && actionCount < 6 * 9 + 2;
      if (!showingAttackerPosition) {
        return void 0;
      }
      return gameState.finalizedMoveEvents.filter((event) => event.playerId === "attacker").slice(gameState.currentRound * 2 - 1, gameState.currentRound * 2).at(0)?.to;
    },
    isEqual$1
  );
  $$unsubscribe_attackerPosition = subscribe(attackerPosition, (value) => $attackerPosition = value);
  let visible = true;
  {
    if ($attackerPosition && $side === "defense") {
      highlightedFields.update((fields) => ({ ...fields, attacker: [$attackerPosition] }));
    } else {
      highlightedFields.update((fields) => ({ ...fields, attacker: void 0 }));
    }
  }
  $$unsubscribe_attackerPosition();
  $$unsubscribe_side();
  return `${$attackerPosition && visible ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Angreifer:innen Position" }, {}, {
    default: () => {
      return `${$side === "defense" ? `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Die Position des/der Angreifer:in wird nun am Feld angezeigt.`;
        }
      })} ${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Bedenke jedoch, dass der/die Angreifer:in jetzt ziehen kann und nicht mehr auf diesem Feld
        stehen wird.`;
        }
      })}` : `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Deine Position wird der Verteidigung nun am Feld angezeigt.`;
        }
      })} ${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Die Verteidigung sieht jedoch nicht Deinen nächsten Zug.`;
        }
      })}`}`;
    }
  })}` : ``}`;
});
const GlobalActions = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(AttackerPosition, "AttackerPosition").$$render($$result, {}, {}, {})}`;
});
const AttacksIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="m16.6 38-.09-.01a.36.36 0 0 1-.26-.31c-.1-.99.49-13.73.55-15.16-.15 0-.59.05-1.56.44-1.52.61-2.68.75-3.45.41-.5-.21-.65-.55-.67-.61a.33.33 0 0 1-.03-.13c0-1.33 3.97-15.6 4.42-17.23a.37.37 0 0 1 .26-.25l11.9-3.03c.81-.2 1.36-.15 1.7.16.32.3.25.72.24.76a.3.3 0 0 1-.02.08l-4.97 11.64c2.4-.5 4.58-.26 4.68-.25a.36.36 0 0 1 .29.5C25.04 25.8 16.99 37.72 16.9 37.84a.36.36 0 0 1-.3.16Zm.92-15.53c-.18 4.04-.5 11.15-.56 13.98 1.99-3.03 8-12.47 11.77-21.26-.86-.05-2.75-.08-4.63.43a.36.36 0 0 1-.36-.12.37.37 0 0 1-.06-.37L28.9 2.89a.14.14 0 0 0-.04-.1c-.04-.02-.25-.17-1.03.03l-11.7 2.97c-1.72 6.18-4.2 15.42-4.33 16.75.14.16.81.7 3.16-.25 1.66-.66 2.13-.53 2.38-.3.16.14.2.34.17.48Z" fill="currentColor"></path><path d="M16.16 12.19a.36.36 0 0 1-.35-.44l.42-1.71a.36.36 0 0 1 .7.17l-.42 1.7a.36.36 0 0 1-.35.28Zm.8-3.57-.1-.01a.36.36 0 0 1-.25-.45l.46-1.59a.35.35 0 0 1 .26-.25l3.23-.76a.36.36 0 0 1 .16.7l-3.02.7-.4 1.4a.36.36 0 0 1-.34.26Zm6.19 15.08a.36.36 0 0 1-.3-.55c.38-.59 2.13-4.16 3.01-5.97a.36.36 0 0 1 .65.31c-.1.22-2.56 5.27-3.06 6.05a.36.36 0 0 1-.3.16Zm6.69-12.36a.36.36 0 0 1-.19-.67l7.48-4.54a.36.36 0 0 1 .37.62l-7.48 4.53a.37.37 0 0 1-.18.06Zm1.93 3.62a.36.36 0 0 1-.01-.72l6.53-.26c.2 0 .37.15.38.34 0 .2-.15.37-.35.38l-6.53.26h-.02Zm4.03 7.41a.38.38 0 0 1-.15-.03l-5.28-2.35a.36.36 0 0 1 .3-.66l5.27 2.36a.36.36 0 0 1-.14.68Zm-24.87-9.99a.4.4 0 0 1-.15-.03L3.56 9.03a.36.36 0 0 1-.17-.47c.08-.18.3-.26.47-.18l7.22 3.32c.18.08.26.3.18.47a.36.36 0 0 1-.33.21ZM9.6 16.82l-8.24-.26a.36.36 0 0 1-.35-.37c0-.2.16-.36.37-.35l8.24.27a.36.36 0 0 1 0 .71Zm-5.17 6.31a.36.36 0 0 1-.14-.68L9.1 20.2a.36.36 0 1 1 .3.65L4.59 23.1a.36.36 0 0 1-.16.03Z" fill="currentColor"></path></svg>`;
});
const InventoryIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<svg viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="m27.96.69-.01-.12V.55c-.12-.44-.16-.6-5.04-.54-2.35.03-5.01.1-6.13.17-2.6.14-6.62.11-8.5.04h-.1c-.19.03-.94.26-2.8 2.03a62.45 62.45 0 0 0-4.35 4.82c-.4.41-.76 1.45-.94 4.18-.11 1.89-.09 3.76-.09 3.77.08 5.34.18 11.77.27 12.09.1.4.15.59 4.87.78a115.9 115.9 0 0 0 6.05.08c2.6-.14 6.61-.11 8.5-.03a1.27 1.27 0 0 0 .95-.39c1.3-1.14 6.06-5.42 6.59-6.5.55-1.14.7-6.79.73-7.91.04-5.21.07-11.42 0-12.45ZM6.06 2.97c1.45-1.37 2.1-1.7 2.26-1.76 1.95.08 5.92.1 8.51-.04 2.08-.11 7.59-.24 9.66-.14a182.9 182.9 0 0 1-6.25 5.89c-1.77-.08-13.31-.6-17.57-.26a52.5 52.5 0 0 1 3.4-3.69Zm5.07 24.01a87.6 87.6 0 0 1-9.9-.36c-.07-1.41-.17-7.5-.23-11.61-.05-3.4.25-6.57.69-7.17l.02-.03.03-.03c1.99-.5 12.84-.14 18.49.13.28.78.14 4.21.06 6.1l-.06 1.73c-.03.93-.05 2.48-.07 4.12-.03 2.57-.07 5.49-.14 6.82 0 .06-.03.11-.06.15l-.07.07a.3.3 0 0 1-.16.04c-1.9-.07-5.96-.1-8.6.04Zm15.83-13.86c-.06 2.51-.28 6.77-.64 7.5-.3.62-3.03 3.2-5.27 5.23.05-1.52.08-3.86.11-5.97.02-1.64.04-3.19.07-4.1l.06-1.72c.16-3.8.17-5.75-.17-6.59a187.8 187.8 0 0 0 5.87-5.53c.02 2.32 0 7.5-.03 11.19Z" fill="currentColor"></path></svg>`;
});
const css$7 = {
  code: "button.svelte-17fepg1.svelte-17fepg1{text-wrap:nowrap;align-items:center;border-radius:var(--radius-xs);color:#fff;display:flex;flex-direction:column;flex-shrink:0;font-size:.5rem;font-weight:700;height:4.5rem;isolation:isolate;justify-content:flex-end;padding:.5rem 0;position:relative;text-align:center;width:3rem}button.svelte-17fepg1 svg{bottom:auto;left:.25rem;position:absolute;right:.25rem;top:.75rem;z-index:-1}button.svelte-17fepg1 span.svelte-17fepg1{display:block}button.attack.svelte-17fepg1.svelte-17fepg1{background-color:var(--color-red-polygon)}button.defense.svelte-17fepg1.svelte-17fepg1{background-color:var(--color-orange-dark)}button.selected.svelte-17fepg1.svelte-17fepg1{box-shadow:0 .125rem .5rem 0 rgba(88,90,90,.4);height:5.25rem;width:3.5rem}",
  map: null
};
const AttackCard = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { selected = false } = $$props;
  let { disabled = false } = $$props;
  let { side } = $$props;
  if ($$props.selected === void 0 && $$bindings.selected && selected !== void 0)
    $$bindings.selected(selected);
  if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0)
    $$bindings.disabled(disabled);
  if ($$props.side === void 0 && $$bindings.side && side !== void 0)
    $$bindings.side(side);
  $$result.css.add(css$7);
  return `<button ${disabled ? "disabled" : ""} class="${[
    "unstyled " + escape(side, true) + " svelte-17fepg1",
    selected ? "selected" : ""
  ].join(" ").trim()}">${validate_component(Polygon, "Polygon").$$render(
    $$result,
    {
      color: side === "attack" ? "red" : "orange"
    },
    {},
    {}
  )} <span class="svelte-17fepg1">${slots.default ? slots.default({}) : ``}</span> </button>`;
});
const css$6 = {
  code: ".scenarios.svelte-18oeftd.svelte-18oeftd{display:flex;flex-direction:column;gap:1rem;height:100%}.description.svelte-18oeftd.svelte-18oeftd{flex:1}.attacks.svelte-18oeftd.svelte-18oeftd{align-items:center;display:flex;gap:.5rem;list-style:none;margin:-1rem;padding:1rem;width:100%}.targets.svelte-18oeftd.svelte-18oeftd{display:flex;gap:2rem}.targets.svelte-18oeftd .stage.svelte-18oeftd{font-size:.75rem}.targets.svelte-18oeftd .items.svelte-18oeftd{display:flex;gap:.5rem}",
  map: null
};
const GlobalAttacks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let selectedAttack;
  let $highlightedFields, $$unsubscribe_highlightedFields;
  let $globalAttackScenario, $$unsubscribe_globalAttackScenario;
  let $globalAttackScenarioIndex, $$unsubscribe_globalAttackScenarioIndex;
  let $activeAttackIndex, $$unsubscribe_activeAttackIndex;
  const { machine: machine2, highlightedFields } = getGameContext();
  $$unsubscribe_highlightedFields = subscribe(highlightedFields, (value) => $highlightedFields = value);
  const activeAttackIndex = useSelector(machine2.service, (state) => GameState.fromContext(state.context).activeGlobalAttackIndex);
  $$unsubscribe_activeAttackIndex = subscribe(activeAttackIndex, (value) => $activeAttackIndex = value);
  const globalAttackScenarioIndex = useSelector(machine2.service, (state) => state.context.globalAttackScenario);
  $$unsubscribe_globalAttackScenarioIndex = subscribe(globalAttackScenarioIndex, (value) => $globalAttackScenarioIndex = value);
  const globalAttackScenario = useSelector(machine2.service, (state) => GameState.fromContext(state.context).globalAttackScenario, isEqual$1);
  $$unsubscribe_globalAttackScenario = subscribe(globalAttackScenario, (value) => $globalAttackScenario = value);
  let selectedAttackIndex = 0;
  $$result.css.add(css$6);
  selectedAttack = $globalAttackScenario.attacks[selectedAttackIndex];
  {
    console.log($highlightedFields.items);
  }
  $$unsubscribe_highlightedFields();
  $$unsubscribe_globalAttackScenario();
  $$unsubscribe_globalAttackScenarioIndex();
  $$unsubscribe_activeAttackIndex();
  return `<div class="scenarios svelte-18oeftd"><h6 class="display-xxs" data-svelte-h="svelte-1ge8ce7">Allgemeiner Angriff</h6> <ul class="attacks svelte-18oeftd"><li>${validate_component(AttackCard, "AttackCard").$$render(
    $$result,
    {
      side: "defense",
      selected: selectedAttackIndex === -1
    },
    {},
    {
      default: () => {
        return `Szenario ${escape($globalAttackScenarioIndex + 1)}<br>
        Szenario`;
      }
    }
  )}</li> ${each($globalAttackScenario.attacks, (attack, index) => {
    let disabled = index > $activeAttackIndex;
    return ` <li>${validate_component(AttackCard, "AttackCard").$$render(
      $$result,
      {
        side: "defense",
        disabled,
        selected: selectedAttackIndex === index
      },
      {},
      {
        default: () => {
          return `Szenario ${escape($globalAttackScenarioIndex + 1)}<br>
          Angriff ${escape(index + 1)} `;
        }
      }
    )} </li>`;
  })}</ul> ${!selectedAttack ? `<div class="description svelte-18oeftd"><h4 class="auto">${escape($globalAttackScenario.name)}</h4> <p class="text-xs">${escape($globalAttackScenario.description)}</p></div>` : `<div class="description svelte-18oeftd"><h4 class="auto">Angriff ${escape(selectedAttackIndex + 1)}</h4> <p class="text-xs">${escape(selectedAttack.description)}</p></div> <div class="key-info"><h6 class="auto" data-svelte-h="svelte-19i4iqs">Benötigte Gegenstände</h6> <div class="targets svelte-18oeftd">${each(selectedAttack.targets, (target) => {
    let stage = getStage(target.stageId);
    return ` <div class="target"><div class="stage svelte-18oeftd">${escape(stage.name)}</div> <div class="items svelte-18oeftd">${each(stage.defenseItems, (item) => {
      return `${validate_component(Item, "Item").$$render($$result, { highlightOnHover: true, itemId: item }, {}, {})}`;
    })}</div> </div>`;
  })}</div></div>`} </div>`;
});
const css$5 = {
  code: ".scenarios.svelte-1mkbq4l.svelte-1mkbq4l{display:flex;flex-direction:column;gap:1rem;height:100%}.description.svelte-1mkbq4l.svelte-1mkbq4l{flex:1}.attacks.svelte-1mkbq4l.svelte-1mkbq4l{align-items:flex-end;align-items:center;display:flex;gap:.5rem;list-style:none;margin:-1rem;overflow-x:scroll;padding:1rem;width:100%}.targets.svelte-1mkbq4l.svelte-1mkbq4l{display:flex;gap:2rem}.targets.svelte-1mkbq4l .items.svelte-1mkbq4l{display:flex;gap:.5rem}.key-info.svelte-1mkbq4l.svelte-1mkbq4l{display:flex;gap:2rem}.key-info.svelte-1mkbq4l>.svelte-1mkbq4l{flex:1}",
  map: null
};
const TargetedAttacks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let selectedAttack;
  let selectedStage;
  let $activeAttacks, $$unsubscribe_activeAttacks;
  let $totalAttackCount, $$unsubscribe_totalAttackCount;
  const { machine: machine2, highlightedFields } = getGameContext();
  const activeAttacks = useSelector(machine2.service, (state) => GameState.fromContext(state.context).activeTargetedAttacks, isEqual$1);
  $$unsubscribe_activeAttacks = subscribe(activeAttacks, (value) => $activeAttacks = value);
  const totalAttackCount = useSelector(machine2.service, (state) => state.context.targetedAttacks.length);
  $$unsubscribe_totalAttackCount = subscribe(totalAttackCount, (value) => $totalAttackCount = value);
  let selectedAttackIndex = 0;
  $$result.css.add(css$5);
  selectedAttack = $activeAttacks[selectedAttackIndex];
  selectedStage = selectedAttack ? getStage(selectedAttack.target.stageId) : void 0;
  $$unsubscribe_activeAttacks();
  $$unsubscribe_totalAttackCount();
  return `<div class="scenarios svelte-1mkbq4l">${validate_component(Paragraph, "Paragraph").$$render($$result, { spacing: "none", size: "sm" }, {}, {
    default: () => {
      return `Gezielter Angriffe`;
    }
  })} <ul class="attacks svelte-1mkbq4l">${each(new Array($totalAttackCount), (_, index) => {
    let disabled = index >= $activeAttacks.length;
    return ` <li>${validate_component(AttackCard, "AttackCard").$$render(
      $$result,
      {
        side: "attack",
        selected: selectedAttackIndex === index,
        disabled
      },
      {},
      {
        default: () => {
          return `Angriff ${escape(index + 1)} `;
        }
      }
    )} </li>`;
  })}</ul> ${selectedAttack && selectedStage ? `<div class="description svelte-1mkbq4l">${validate_component(Heading, "Heading").$$render($$result, { size: "sm", spacing: "none" }, {}, {
    default: () => {
      return `Angriff ${escape(selectedAttackIndex + 1)}`;
    }
  })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
    default: () => {
      return `${escape(selectedAttack.description)}`;
    }
  })}</div> <div class="key-info svelte-1mkbq4l"><div class="summary svelte-1mkbq4l">${validate_component(Heading, "Heading").$$render($$result, { size: "xs", spacing: "none" }, {}, {
    default: () => {
      return `Aufgabe`;
    }
  })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
    default: () => {
      return `Legt ${escape(selectedStage.gender === "f" ? "die" : selectedStage.gender === "n" ? "das" : "den")} ${escape(selectedStage.name)} der Supply Chain ${escape(selectedAttack.target.supplyChainId + 1)} lahm.`;
    }
  })}</div> <div class="items svelte-1mkbq4l">${validate_component(Heading, "Heading").$$render($$result, { size: "xs", spacing: "none" }, {}, {
    default: () => {
      return `Benötigte Gegenstände`;
    }
  })} <div class="targets svelte-1mkbq4l"><div class="target"><div class="items svelte-1mkbq4l">${each(selectedAttack.target.requiredItems, (item) => {
    return `${validate_component(Item, "Item").$$render($$result, { highlightOnHover: true, itemId: item }, {}, {})}`;
  })}</div></div></div></div></div>` : `<div class="not-started">${validate_component(Heading, "Heading").$$render($$result, { size: "md", spacing: "none" }, {}, {
    default: () => {
      return `Es sind noch keine Karten aufgedeckt`;
    }
  })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { spacing: "none", size: "sm" }, {}, {
    default: () => {
      return `Sobald alle Spieler:innen platziert wurden, werden die ersten Karten aufgedeckt.`;
    }
  })}</div>`} </div>`;
});
const css$4 = {
  code: ".info-panel.svelte-1q469qh.svelte-1q469qh{display:flex;height:22.5rem}nav.svelte-1q469qh.svelte-1q469qh{align-items:flex-end;display:flex;flex-direction:column;gap:.25rem}nav.svelte-1q469qh button.svelte-1q469qh{background-color:var(--color-blue-transp-12);border-radius:var(--radius-md);border-bottom-right-radius:0;border-top-right-radius:0;height:2.5rem;padding:.3125rem;width:2.5rem}nav.svelte-1q469qh button.active.svelte-1q469qh{background-color:#fff;color:var(--color-blue-spielbrett)}nav.svelte-1q469qh button.svelte-1q469qh svg{display:block;height:100%;width:100%}.content.svelte-1q469qh.svelte-1q469qh{background-color:#fff;border-radius:var(--radius-md);border-top-left-radius:0;color:var(--color-blue-spielbrett);flex:1;max-width:100%;overflow:hidden;padding:.75rem 1.25rem}",
  map: null
};
const InfoPanel = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $side, $$unsubscribe_side;
  const { machine: machine2 } = getGameContext();
  const side = useSelector(machine2.service, (state) => getCurrentUser(state.context).side);
  $$unsubscribe_side = subscribe(side, (value) => $side = value);
  $$result.css.add(css$4);
  $$unsubscribe_side();
  return `<div class="info-panel svelte-1q469qh"><nav class="svelte-1q469qh"><button class="${["unstyled svelte-1q469qh", "active"].join(" ").trim()}">${validate_component(AttacksIcon, "AttacksIcon").$$render($$result, {}, {}, {})}</button> <button class="${["unstyled svelte-1q469qh", ""].join(" ").trim()}">${validate_component(InventoryIcon, "InventoryIcon").$$render($$result, {}, {}, {})}</button></nav> <div class="content svelte-1q469qh">${`${$side === "attack" ? `${validate_component(TargetedAttacks, "TargetedAttacks").$$render($$result, {}, {}, {})}` : `${validate_component(GlobalAttacks, "GlobalAttacks").$$render($$result, {}, {}, {})}`}`}</div> </div>`;
});
const css$3 = {
  code: '.player.svelte-1xi8rbz.svelte-1xi8rbz{--_radius:var(--radius-sm);align-items:center;border-radius:var(--radius-sm);border-radius:var(--_radius);display:flex;height:3.125rem;position:relative;width:100%}.player.playing.svelte-1xi8rbz.svelte-1xi8rbz:after{border:2px solid #fff;border-radius:var(--_radius);bottom:calc(0px - var(--px));content:"";left:calc(0px - var(--px));position:absolute;right:calc(0px - var(--px));top:calc(0px - var(--px))}.player.side-attack.svelte-1xi8rbz.svelte-1xi8rbz{background:var(--color-red-medium)}.player.side-defense.svelte-1xi8rbz.svelte-1xi8rbz{background:var(--color-blue-medium)}.player.side-admin.svelte-1xi8rbz.svelte-1xi8rbz{background:var(--color-blue-transp-12)}.player.svelte-1xi8rbz .description.svelte-1xi8rbz{min-width:0;padding-left:.5rem;padding-right:.5rem}.player.svelte-1xi8rbz .description .character.svelte-1xi8rbz,.player.svelte-1xi8rbz .description .name.svelte-1xi8rbz{text-wrap:nowrap;overflow:hidden;text-overflow:ellipsis;width:100%}.player.svelte-1xi8rbz .description .character.svelte-1xi8rbz{font-size:var(--scale-00)}.player.svelte-1xi8rbz .description .name.svelte-1xi8rbz{font-size:var(--scale-000)}.player.svelte-1xi8rbz .face.svelte-1xi8rbz{aspect-ratio:1;background:hsla(0,0%,100%,.067);flex-shrink:0;height:100%;padding:.375rem}.player.svelte-1xi8rbz .online-status.svelte-1xi8rbz{background:orange;border-radius:var(--radius-full);height:.5rem;position:absolute;right:.25rem;top:.25rem;width:.5rem;z-index:var(--layer-4)}.player.svelte-1xi8rbz .online-status.connected.svelte-1xi8rbz{display:none}.tooltip-content.svelte-1xi8rbz .header.svelte-1xi8rbz{align-items:center;display:flex;gap:0;margin-bottom:.5rem}.tooltip-content.svelte-1xi8rbz .header .description .character.svelte-1xi8rbz{font-size:var(--scale-0);font-weight:700}.tooltip-content.svelte-1xi8rbz .header .description .name.svelte-1xi8rbz{font-size:var(--scale-00)}.tooltip-content.svelte-1xi8rbz .header .face.svelte-1xi8rbz{border-radius:var(--radius-sm);color:#fff;height:3.125rem;width:3.125rem}.side-attack.svelte-1xi8rbz .tooltip-content .header .face.svelte-1xi8rbz{background:var(--color-red-medium)}.side-defense.svelte-1xi8rbz .tooltip-content .header .face.svelte-1xi8rbz{background:var(--color-blue-medium)}.side-admin.svelte-1xi8rbz .tooltip-content .header .face.svelte-1xi8rbz{background:var(--color-blue-transp-12)}',
  map: null
};
const Player = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { name } = $$props;
  let { character } = $$props;
  let { characterAbility = void 0 } = $$props;
  let { faceId = void 0 } = $$props;
  let { isConnected = void 0 } = $$props;
  let { isPlaying = false } = $$props;
  let { side } = $$props;
  let { showFace = true } = $$props;
  if ($$props.name === void 0 && $$bindings.name && name !== void 0)
    $$bindings.name(name);
  if ($$props.character === void 0 && $$bindings.character && character !== void 0)
    $$bindings.character(character);
  if ($$props.characterAbility === void 0 && $$bindings.characterAbility && characterAbility !== void 0)
    $$bindings.characterAbility(characterAbility);
  if ($$props.faceId === void 0 && $$bindings.faceId && faceId !== void 0)
    $$bindings.faceId(faceId);
  if ($$props.isConnected === void 0 && $$bindings.isConnected && isConnected !== void 0)
    $$bindings.isConnected(isConnected);
  if ($$props.isPlaying === void 0 && $$bindings.isPlaying && isPlaying !== void 0)
    $$bindings.isPlaying(isPlaying);
  if ($$props.side === void 0 && $$bindings.side && side !== void 0)
    $$bindings.side(side);
  if ($$props.showFace === void 0 && $$bindings.showFace && showFace !== void 0)
    $$bindings.showFace(showFace);
  $$result.css.add(css$3);
  return `<button class="${[
    "unstyled player side-" + escape(side, true) + " svelte-1xi8rbz",
    isPlaying ? "playing" : ""
  ].join(" ").trim()}">${validate_component(Tooltip, "Tooltip").$$render($$result, { click: true, position: "bottom" }, {}, {
    default: () => {
      return `<div class="tooltip-content svelte-1xi8rbz"><div class="header svelte-1xi8rbz"><div class="face svelte-1xi8rbz">${validate_component(Face, "Face").$$render($$result, { faceId: faceId ?? 0 }, {}, {})}</div> <div class="description svelte-1xi8rbz"><div class="character svelte-1xi8rbz">${escape(character)}</div> <div class="name svelte-1xi8rbz">${escape(name)}</div></div></div> ${side === "admin" ? `${validate_component(Heading, "Heading").$$render($$result, { size: "sm", spacing: "none" }, {}, {
        default: () => {
          return `Spielleitung`;
        }
      })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
        default: () => {
          return `Kann Spielseite wechseln und alle Züge rückgängig machen.`;
        }
      })}` : `${characterAbility ? `${validate_component(Heading, "Heading").$$render($$result, { size: "sm", spacing: "none" }, {}, {
        default: () => {
          return `Fähigkeit`;
        }
      })} ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
        default: () => {
          return `${escape(characterAbility)}`;
        }
      })}` : ``}`}</div>`;
    }
  })} ${showFace ? `<div class="face svelte-1xi8rbz">${validate_component(Face, "Face").$$render($$result, { faceId: faceId ?? 0 }, {}, {})}</div>` : ``} <div class="description svelte-1xi8rbz"><div class="character svelte-1xi8rbz">${escape(character)}</div> <div class="name svelte-1xi8rbz">${escape(name)}</div></div> ${isConnected !== void 0 ? `<div class="${["online-status svelte-1xi8rbz", isConnected ? "connected" : ""].join(" ").trim()}"></div>` : ``} </button>`;
});
const css$2 = {
  code: "h3.svelte-scrjvt{font:var(--text-small);font-family:var(--font-display);font-size:1rem;margin-bottom:.25rem;margin-top:0;text-transform:uppercase}.players.svelte-scrjvt{grid-gap:.75rem;display:grid;gap:.75rem;grid-template-columns:repeat(auto-fill,minmax(10rem,1fr))}.players.side-admin.svelte-scrjvt{grid-template-columns:repeat(auto-fit,minmax(1rem,1fr))}",
  map: null
};
const PlayersList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { players } = $$props;
  let { side } = $$props;
  if ($$props.players === void 0 && $$bindings.players && players !== void 0)
    $$bindings.players(players);
  if ($$props.side === void 0 && $$bindings.side && side !== void 0)
    $$bindings.side(side);
  $$result.css.add(css$2);
  return `<div class="wrapper"><h3 class="svelte-scrjvt">${side === "attack" ? `Angreifer:in` : `${side === "defense" ? `Verteidiger:innen` : `Spielleitung`}`}</h3> <div class="${"players side-" + escape(side, true) + " svelte-scrjvt"}">${each(players, (player) => {
    return `<div class="player">${validate_component(Player, "Player").$$render(
      $$result,
      {
        faceId: player.faceId,
        name: player.name,
        character: player.character,
        characterAbility: player.characterAbility,
        isConnected: player.isConnected,
        isPlaying: player.isPlaying,
        side,
        showFace: side !== "admin" || players.length <= 3
      },
      {},
      {}
    )} </div>`;
  })}</div> </div>`;
});
const css$1 = {
  code: ".players-container.svelte-88996d{align-content:flex-start;display:flex;flex:1;flex-direction:column;gap:1rem}",
  map: null
};
const Players = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let defensePlayerDescriptions;
  let attackPlayerDescriptions;
  let adminPlayerDescriptions;
  let $attackAdmins, $$unsubscribe_attackAdmins;
  let $defenseAdmins, $$unsubscribe_defenseAdmins;
  let $activePlayerId, $$unsubscribe_activePlayerId;
  let $attackPlayers, $$unsubscribe_attackPlayers;
  let $defensePlayers, $$unsubscribe_defensePlayers;
  let $users, $$unsubscribe_users;
  const { machine: machine2 } = getGameContext();
  const attackPlayers = useSelector(machine2.service, ({ context }) => [context.attack.attacker], isEqual$1);
  $$unsubscribe_attackPlayers = subscribe(attackPlayers, (value) => $attackPlayers = value);
  const defensePlayers = useSelector(machine2.service, ({ context }) => context.defense.defenders, isEqual$1);
  $$unsubscribe_defensePlayers = subscribe(defensePlayers, (value) => $defensePlayers = value);
  const attackAdmins = useSelector(machine2.service, ({ context }) => context.users.filter((user) => user.side === "attack" && user.isAdmin), isEqual$1);
  $$unsubscribe_attackAdmins = subscribe(attackAdmins, (value) => $attackAdmins = value);
  const defenseAdmins = useSelector(machine2.service, ({ context }) => context.users.filter((user) => user.side === "defense" && user.isAdmin), isEqual$1);
  $$unsubscribe_defenseAdmins = subscribe(defenseAdmins, (value) => $defenseAdmins = value);
  const users = useSelector(machine2.service, ({ context }) => context.users, isEqual$1);
  $$unsubscribe_users = subscribe(users, (value) => $users = value);
  const getUserForPlayer = (player, users2) => {
    const user = users2.find((user2) => user2.id === player.userId);
    return user ?? { name: "Unbekannt", isConnected: false };
  };
  const activePlayerId = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).activePlayer.id);
  $$unsubscribe_activePlayerId = subscribe(activePlayerId, (value) => $activePlayerId = value);
  const mapPlayer = (player, activePlayerId2) => {
    const user = getUserForPlayer(player, $users);
    const character = getCharacter(player.character);
    return {
      faceId: player.faceId,
      name: user.name,
      character: character.name,
      characterAbility: character.description,
      isConnected: user.isConnected,
      isPlaying: activePlayerId2 === player.id
    };
  };
  $$result.css.add(css$1);
  defensePlayerDescriptions = $defensePlayers.map((player) => mapPlayer(player, $activePlayerId));
  attackPlayerDescriptions = $attackPlayers.map((player) => mapPlayer(player, $activePlayerId));
  adminPlayerDescriptions = [...$defenseAdmins, ...$attackAdmins].map((admin) => ({
    faceId: 0,
    name: admin.name,
    character: admin.side === "attack" ? "Angriff" : "Verteidigung",
    isConnected: admin.isConnected,
    isPlaying: false
  }));
  $$unsubscribe_attackAdmins();
  $$unsubscribe_defenseAdmins();
  $$unsubscribe_activePlayerId();
  $$unsubscribe_attackPlayers();
  $$unsubscribe_defensePlayers();
  $$unsubscribe_users();
  return `<div class="players-container svelte-88996d">${validate_component(PlayersList, "PlayersList").$$render(
    $$result,
    {
      side: "defense",
      players: defensePlayerDescriptions
    },
    {},
    {}
  )} ${validate_component(PlayersList, "PlayersList").$$render(
    $$result,
    {
      side: "attack",
      players: attackPlayerDescriptions
    },
    {},
    {}
  )} ${validate_component(PlayersList, "PlayersList").$$render(
    $$result,
    {
      side: "admin",
      players: adminPlayerDescriptions
    },
    {},
    {}
  )} </div>`;
});
const AwaitingReaction = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $side, $$unsubscribe_side;
  let $isAwaitingReaction, $$unsubscribe_isAwaitingReaction;
  const { machine: machine2 } = getGameContext();
  const isAwaitingReaction = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).nextEventType === "reaction");
  $$unsubscribe_isAwaitingReaction = subscribe(isAwaitingReaction, (value) => $isAwaitingReaction = value);
  const side = useSelector(machine2.service, ({ context }) => getCurrentUser(context).side);
  $$unsubscribe_side = subscribe(side, (value) => $side = value);
  $$unsubscribe_side();
  $$unsubscribe_isAwaitingReaction();
  return `${$side === "defense" && $isAwaitingReaction ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Warten auf Antwort" }, {}, {
    default: () => {
      return `${validate_component(Paragraph, "Paragraph").$$render($$result, {}, {}, {
        default: () => {
          return `Der/Die Angreifer:in hat nun die Möglichkeit einen Joker einzusetzen um der Frage
      auszuweichen.`;
        }
      })}`;
    }
  })}` : ``}`;
});
const Reaction = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $hasJoker, $$unsubscribe_hasJoker;
  let $canPerformReaction, $$unsubscribe_canPerformReaction;
  let $question, $$unsubscribe_question;
  const { machine: machine2 } = getGameContext();
  const question = useSelector(machine2.service, ({ context }) => GameState.fromContext(context).activeQuestion);
  $$unsubscribe_question = subscribe(question, (value) => $question = value);
  const canPerformReaction = useSelector(machine2.service, (state) => state.matches("Playing.Gameloop.Playing.Reacting"));
  $$unsubscribe_canPerformReaction = subscribe(canPerformReaction, (value) => $canPerformReaction = value);
  const hasJoker = useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    return gameState.jokers > 0;
  });
  $$unsubscribe_hasJoker = subscribe(hasJoker, (value) => $hasJoker = value);
  let answer = void 0;
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `${$canPerformReaction ? `${validate_component(GameDialog, "GameDialog").$$render($$result, { title: "Joker einsetzen" }, {}, {
      default: () => {
        return `${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm" }, {}, {
          default: () => {
            return `${$question === "is-on-field" ? `Die Verteidigung fragt ob Du auf dem Feld bist.` : `${$question === "has-collected-items" ? `Die Verteidigung fragt ob Du Gegenstände gesammelt hast.` : `${$question === "quarter-reveal" ? `Die Verteidigung fragt auf welchem Viertel des Spielbretts Du dich befindest.` : `${$question === "is-attacking-stage" ? `Die Verteidigung fragt ob Du einen gezielten Angriff auf eine Stufe hast.` : `${$question === "is-next-to-attacker" ? `Die Verteidigung fragt ob Du dich auf einem angrenzend Feld befindest.` : ``}`}`}`}`} <br> ${$hasJoker ? `Möchtest Du Deinen Joker einsetzen, um der Frage auszuweichen?` : `Du hast leider keinen Joker mehr zur Verfügung um der Frage auszuweichen.`}`;
          }
        })} <form>${$hasJoker ? `${validate_component(RadioOptions, "RadioOptions").$$render($$result, { vertical: true }, {}, {
          default: () => {
            return `${validate_component(RadioButton, "RadioButton").$$render(
              $$result,
              { value: true, group: answer },
              {
                group: ($$value) => {
                  answer = $$value;
                  $$settled = false;
                }
              },
              {
                default: () => {
                  return `Ja
            ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
                    default: () => {
                      return `Wir möchten den Joker einsetzen und der Frage ausweichen.`;
                    }
                  })}`;
                }
              }
            )} ${validate_component(RadioButton, "RadioButton").$$render(
              $$result,
              { value: false, group: answer },
              {
                group: ($$value) => {
                  answer = $$value;
                  $$settled = false;
                }
              },
              {
                default: () => {
                  return `Nein
            ${validate_component(Paragraph, "Paragraph").$$render($$result, { size: "sm", spacing: "none" }, {}, {
                    default: () => {
                      return `Wir möchten den Joker nicht einsetzen und die Verteidigung soll die Antwort
              automatisch erhalten.`;
                    }
                  })}`;
                }
              }
            )}`;
          }
        })}` : ``} ${validate_component(Actions$1, "Actions").$$render($$result, { spacing: "dialog" }, {}, {
          default: () => {
            return `${validate_component(Button, "Button").$$render(
              $$result,
              {
                size: "small",
                inverse: true,
                type: "submit"
              },
              {},
              {
                default: () => {
                  return `Bestätigen`;
                }
              }
            )}`;
          }
        })}</form>`;
      }
    })}` : ``}`;
  } while (!$$settled);
  $$unsubscribe_hasJoker();
  $$unsubscribe_canPerformReaction();
  $$unsubscribe_question();
  return $$rendered;
});
const css = {
  code: ".playing.svelte-jz4jw9{grid-gap:1rem;display:grid;gap:1rem;grid-template-columns:var(--player-status-width) auto 1fr;position:relative}.grid-wrapper.svelte-jz4jw9{--grid-height:45rem;--grid-width:calc(var(--grid-height)*var(--column-count)/var(--row-count));--grid-square-size:calc(var(--grid-height)/var(--row-count));isolation:isolate;position:relative}.player-status.svelte-jz4jw9{display:flex;flex-direction:column;gap:1rem;padding-left:1rem}",
  map: null
};
const Playing = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${validate_component(GlobalActions, "GlobalActions").$$render($$result, {}, {}, {})} ${validate_component(ToastMessages, "ToastMessages").$$render($$result, {}, {}, {})} <div class="playing svelte-jz4jw9"><div class="player-status svelte-jz4jw9">${validate_component(Players, "Players").$$render($$result, {}, {}, {})} ${validate_component(InfoPanel, "InfoPanel").$$render($$result, {}, {}, {})}</div> <div class="grid-wrapper svelte-jz4jw9">${validate_component(Grid, "Grid").$$render($$result, {}, {}, {})} ${validate_component(Actions, "Actions").$$render($$result, {}, {}, {})} ${validate_component(Reaction, "Reaction").$$render($$result, {}, {}, {})} ${validate_component(AwaitingReaction, "AwaitingReaction").$$render($$result, {}, {}, {})} ${validate_component(ReactionResult, "ReactionResult").$$render($$result, {}, {}, {})}</div> <div class="game-status">${validate_component(Status, "Status").$$render($$result, {}, {}, {})}</div> </div>`;
});
const Sound$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const { machine: machine2 } = getGameContext();
  useSelector(
    machine2.service,
    ({ context }) => {
      const gameState = GameState.fromContext(context);
      if (getCurrentUser(context).side === "attack") {
        return gameState.playerPositions;
      } else {
        const { attacker: _, ...playerPositions } = gameState.playerPositions;
        return playerPositions;
      }
    },
    isEqual$1
  );
  useSelector(machine2.service, ({ context }) => {
    const gameState = GameState.fromContext(context);
    let itemCounts;
    if (getCurrentUser(context).side === "attack") {
      itemCounts = Object.values(gameState.attackInventory);
    } else {
      itemCounts = Object.values(gameState.defenseInventory);
    }
    return itemCounts.reduce((acc, count) => acc + count, 0);
  });
  useSelector(machine2.service, ({ context }) => GameState.fromContext(context).attackedStages.length);
  useSelector(machine2.service, ({ context }) => GameState.fromContext(context).defendedStages.length);
  return ``;
});
const Game = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_didWarmup;
  let $section, $$unsubscribe_section;
  $$unsubscribe_didWarmup = subscribe(didWarmup, (value) => value);
  const { machine: machine2 } = getGameContext();
  let { reportMousePosition } = $$props;
  const section = useSelector(machine2.service, (snapshot) => {
    let section2 = void 0;
    if (snapshot.matches("Lobby")) {
      section2 = "Lobby";
    } else if (snapshot.matches("Playing")) {
      section2 = "Playing";
    } else if (snapshot.matches("Finished")) {
      section2 = "Finished";
    }
    return section2;
  });
  $$unsubscribe_section = subscribe(section, (value) => $section = value);
  if ($$props.reportMousePosition === void 0 && $$bindings.reportMousePosition && reportMousePosition !== void 0)
    $$bindings.reportMousePosition(reportMousePosition);
  $$unsubscribe_didWarmup();
  $$unsubscribe_section();
  return ` ${validate_component(Board, "Board").$$render(
    $$result,
    {
      reportMousePosition,
      paddedContent: $section !== "Playing",
      showFooter: $section === "Lobby"
    },
    {},
    {
      overlays: () => {
        return `${slots.overlays ? slots.overlays({ slot: "overlays" }) : ``}`;
      },
      header: () => {
        return `${validate_component(InGame, "InGame").$$render($$result, { slot: "header" }, {}, {})}`;
      },
      default: () => {
        return `${$section === "Lobby" ? `${validate_component(Lobby, "Lobby").$$render($$result, {}, {}, {})}` : `${$section === "Playing" ? `${validate_component(Playing, "Playing").$$render($$result, {}, {}, {})}` : `${$section === "Finished" ? `${validate_component(Finished, "Finished").$$render($$result, {}, {}, {})}` : `Unknown state`}`}`}`;
      }
    }
  )} ${validate_component(Toaster, "Toaster").$$render(
    $$result,
    {
      position: "top-right",
      closeButton: true,
      duration: 1e3 * 60,
      theme: "light"
    },
    {},
    {}
  )} ${validate_component(Sound$1, "Sound").$$render($$result, {}, {}, {})}`;
});
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $socketConnection, $$unsubscribe_socketConnection;
  let $state, $$unsubscribe_state;
  let { data } = $$props;
  const machineInput = data.machineInput;
  const gameId = machineInput.gameId;
  const userId = machineInput.userId;
  const hostUserId = machineInput.hostUserId;
  const mousePositions = {};
  let debug = !!window.location.hash.match("#debug");
  const socketConnection = createWebSocketConnection({
    gameId,
    userId,
    onMessage: (message) => {
      if (message.type === "mouse position") {
        mousePositions[message.userId] = message.position;
      } else {
        machine2.send(message);
      }
    },
    debug
  });
  $$unsubscribe_socketConnection = subscribe(socketConnection, (value) => $socketConnection = value);
  const machine2 = useMachine(
    getClientGameMachine({
      send: socketConnection.send,
      actions: {
        playSound: play,
        showEmoji: ({ userId: userId2, emoji }) => showEmoji?.({ userId: userId2, emoji })
      }
    }),
    { input: machineInput }
  );
  const user = useSelector(machine2.service, ({ context }) => getCurrentUser(context), isEqual$1);
  setGameContext({
    gameId,
    userId,
    user,
    hostUserId,
    machine: machine2,
    highlightedFields: writable({})
  });
  const state = machine2.state;
  $$unsubscribe_state = subscribe(state, (value) => $state = value);
  const reportMousePosition = throttle(
    (position) => {
      if (envBool(PUBLIC_DEV_DISABLE_CURSOR_POSITIONS))
        return;
      if ($socketConnection.status === "opened") {
        socketConnection.send({ type: "mouse position", position });
      }
    },
    50,
    { leading: true, trailing: true }
  );
  let showEmoji;
  if ($$props.data === void 0 && $$bindings.data && data !== void 0)
    $$bindings.data(data);
  let $$settled;
  let $$rendered;
  do {
    $$settled = true;
    $$rendered = `<div style="display: contents; --row-count:${escape(ROW_COUNT, true)}; --column-count:${escape(COLUMN_COUNT, true)};">${validate_component(Game, "Game").$$render($$result, { reportMousePosition }, {}, {
      overlays: () => {
        return `${validate_component(CursorOverlays, "CursorOverlays").$$render($$result, { mousePositions }, {}, {})} ${validate_component(EmojiOverlays, "EmojiOverlays").$$render(
          $$result,
          { showEmoji },
          {
            showEmoji: ($$value) => {
              showEmoji = $$value;
              $$settled = false;
            }
          },
          {}
        )}`;
      }
    })}</div> ${debug ? `<button data-svelte-h="svelte-ribgho">fill inventory</button> <pre>${escape($socketConnection.log.join("\n"))}

${escape(JSON.stringify($state, null, 2))}
</pre>` : ``}`;
  } while (!$$settled);
  $$unsubscribe_socketConnection();
  $$unsubscribe_state();
  return $$rendered;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-041777ae.js.map
